/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/item/application/list": {
    /** List a user’s connected applications */
    post: operations["itemApplicationList"];
  };
  "/item/application/scopes/update": {
    /** Enable consumers to update product access on selected accounts for an application. */
    post: operations["itemApplicationScopesUpdate"];
  };
  "/application/get": {
    /** Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences */
    post: operations["applicationGet"];
  };
  "/item/get": {
    /** Returns information about the status of an Item. */
    post: operations["itemGet"];
  };
  "/auth/get": {
    /**
     * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item's checking and savings accounts, along with high-level account data and balances when available.
     *
     * Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     *
     * Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.
     *
     * Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     */
    post: operations["authGet"];
  };
  "/transactions/get": {
    /**
     * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.
     *
     * Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).
     *
     * Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.
     *
     * Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.
     *
     * Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn't. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     */
    post: operations["transactionsGet"];
  };
  "/transactions/refresh": {
    /**
     * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.
     *
     * Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
     */
    post: operations["transactionsRefresh"];
  };
  "/transactions/recurring/get": {
    /**
     * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.
     *
     * This endpoint is not included by default as part of Transactions. To request access to this endpoint and learn more about pricing, contact your Plaid account manager.
     *
     * Note that unlike `/transactions/get`, `/transactions/recurring/get` will not initialize an Item with Transactions. The Item must already have been initialized with Transactions (either during Link, by specifying it in `/link/token/create`, or after Link, by calling `/transactions/get`) before calling this endpoint. Data is available to `/transactions/recurring/get` approximately 5 seconds after the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook has fired (about 1-2 minutes after initialization).
     *
     * After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Since recurring streams do not change often, it will typically not be necessary to call this endpoint more than once per day.
     */
    post: operations["transactionsRecurringGet"];
  };
  "/transactions/recurring/deactivate": {};
  "/transactions/sync": {
    /**
     * This endpoint replaces `/transactions/get` and its associated webhooks for most common use-cases.
     *
     * The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates.
     *
     * This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.
     *
     * Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.
     *
     * In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as "adds"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.
     *
     * Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates.
     *
     * Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.
     *
     * Note that for newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.
     *
     * To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
     */
    post: operations["transactionsSync"];
  };
  "/institutions/get": {
    /**
     * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.
     *
     * If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     */
    post: operations["institutionsGet"];
  };
  "/institutions/search": {
    /**
     * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.
     *
     * Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
     */
    post: operations["institutionsSearch"];
  };
  "/institutions/get_by_id": {
    /**
     * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.
     *
     * Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
     */
    post: operations["institutionsGetById"];
  };
  "/item/remove": {
    /**
     * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.
     *
     * Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.
     *
     * Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution's OAuth permission manager.
     *
     * API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
     */
    post: operations["itemRemove"];
  };
  "/accounts/get": {
    /**
     * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.
     * For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link's [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.
     *
     * This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
     */
    post: operations["accountsGet"];
  };
  "/categories/get": {
    /** Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication. */
    post: operations["categoriesGet"];
  };
  "/sandbox/processor_token/create": {
    /** Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. */
    post: operations["sandboxProcessorTokenCreate"];
  };
  "/sandbox/public_token/create": {
    /** Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions. */
    post: operations["sandboxPublicTokenCreate"];
  };
  "/sandbox/item/fire_webhook": {
    /**
     * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:
     *
     * `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
     *
     * `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.
     *
     * `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.
     *
     * `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
     *
     * Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
     */
    post: operations["sandboxItemFireWebhook"];
  };
  "/accounts/balance/get": {
    /** The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. */
    post: operations["accountsBalanceGet"];
  };
  "/identity/get": {
    /**
     * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.
     *
     * This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     *
     * Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
     */
    post: operations["identityGet"];
  };
  "/identity/match": {
    /**
     * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.
     *
     * This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     */
    post: operations["identityMatch"];
  };
  "/dashboard_user/get": {
    /** Retrieve information about a dashboard user. */
    post: operations["dashobardUserGet"];
  };
  "/dashboard_user/list": {
    /** List all dashboard users associated with your account. */
    post: operations["dashboardUserList"];
  };
  "/identity_verification/create": {
    /**
     * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided.
     * If you don't know whether the associated user already has an active Identity Verification, you can specify `"is_idempotent": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.
     */
    post: operations["identityVerificationCreate"];
  };
  "/identity_verification/get": {
    /** Retrieve a previously created identity verification */
    post: operations["identityVerificationGet"];
  };
  "/identity_verification/list": {
    /** Filter and list Identity Verifications created by your account */
    post: operations["identityVerificationList"];
  };
  "/identity_verification/retry": {
    /** Allow a customer to retry their identity verification */
    post: operations["identityVerificationRetry"];
  };
  "/watchlist_screening/entity/create": {
    /** Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time. */
    post: operations["watchlistScreeningEntityCreate"];
  };
  "/watchlist_screening/entity/get": {
    /** Retrieve an entity watchlist screening. */
    post: operations["watchlistScreeningEntityGet"];
  };
  "/watchlist_screening/entity/history/list": {
    /** List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned. */
    post: operations["watchlistScreeningEntityHistoryList"];
  };
  "/watchlist_screening/entity/hit/list": {
    /** List all hits for the entity watchlist screening. */
    post: operations["watchlistScreeningEntityHitsList"];
  };
  "/watchlist_screening/entity/list": {
    /** List all entity screenings. */
    post: operations["watchlistScreeningEntityList"];
  };
  "/watchlist_screening/entity/program/get": {
    /** Get an entity watchlist screening program */
    post: operations["watchlistScreeningEntityProgramGet"];
  };
  "/watchlist_screening/entity/program/list": {
    /** List all entity watchlist screening programs */
    post: operations["watchlistScreeningEntityProgramList"];
  };
  "/watchlist_screening/entity/review/create": {
    /** Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid. */
    post: operations["watchlistScreeningEntityReviewCreate"];
  };
  "/watchlist_screening/entity/review/list": {
    /** List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid. */
    post: operations["watchlistScreeningEntityReviewList"];
  };
  "/watchlist_screening/entity/update": {
    /** Update an entity watchlist screening. */
    post: operations["watchlistScreeningEntityUpdate"];
  };
  "/watchlist_screening/individual/create": {
    /** Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time. */
    post: operations["watchlistScreeningIndividualCreate"];
  };
  "/watchlist_screening/individual/get": {
    /** Retrieve a previously created individual watchlist screening */
    post: operations["watchlistScreeningIndividualGet"];
  };
  "/watchlist_screening/individual/history/list": {
    /** List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned. */
    post: operations["watchlistScreeningIndividualHistoryList"];
  };
  "/watchlist_screening/individual/hit/list": {
    /** List all hits found by Plaid for a particular individual watchlist screening. */
    post: operations["watchlistScreeningIndividualHitList"];
  };
  "/watchlist_screening/individual/list": {
    /** List previously created watchlist screenings for individuals */
    post: operations["watchlistScreeningIndividualList"];
  };
  "/watchlist_screening/individual/program/get": {
    /** Get an individual watchlist screening program */
    post: operations["watchlistScreeningIndividualProgramGet"];
  };
  "/watchlist_screening/individual/program/list": {
    /** List all individual watchlist screening programs */
    post: operations["watchlistScreeningIndividualProgramList"];
  };
  "/watchlist_screening/individual/review/create": {
    /** Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid. */
    post: operations["watchlistScreeningIndividualReviewCreate"];
  };
  "/watchlist_screening/individual/review/list": {
    /** List all reviews for the individual watchlist screening. */
    post: operations["watchlistScreeningIndividualReviewsList"];
  };
  "/watchlist_screening/individual/update": {
    /** Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change. */
    post: operations["watchlistScreeningIndividualUpdate"];
  };
  "/processor/auth/get": {
    /**
     * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that''s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.
     *
     * Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
     */
    post: operations["processorAuthGet"];
  };
  "/processor/bank_transfer/create": {
    /** Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor */
    post: operations["processorBankTransferCreate"];
  };
  "/processor/identity/get": {
    /** The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. */
    post: operations["processorIdentityGet"];
  };
  "/processor/balance/get": {
    /** The `/processor/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. */
    post: operations["processorBalanceGet"];
  };
  "/item/webhook/update": {
    /** The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL. */
    post: operations["itemWebhookUpdate"];
  };
  "/item/access_token/invalidate": {
    /**
     * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.
     *
     * You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
     */
    post: operations["itemAccessTokenInvalidate"];
  };
  "/webhook_verification_key/get": {
    /**
     * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.
     *
     * The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     */
    post: operations["webhookVerificationKeyGet"];
  };
  "/liabilities/get": {
    /**
     * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).
     *
     * The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.
     *
     * Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     */
    post: operations["liabilitiesGet"];
  };
  "/payment_initiation/recipient/create": {
    /**
     * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.
     *
     * The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
     */
    post: operations["paymentInitiationRecipientCreate"];
  };
  "/payment_initiation/payment/reverse": {
    /**
     * Reverse a previously settled payment from a Plaid virtual account.
     *
     * The original payment must be in a settled state to be refunded and only full payment refunds are currently supported.
     * To power partial refunds, use `/wallet/transaction/execute`, where you can specify the exact amount for a payout to an end user.
     *
     * A payment can only be reversed once and will be refunded back to the same source account that initiated the payment.
     * The original payment must have been initiated to a Plaid virtual account.
     * The refund will be initiated from the same virtual account that the payment was paid into.
     */
    post: operations["paymentInitiationPaymentReverse"];
  };
  "/payment_initiation/recipient/get": {
    /** Get details about a payment recipient you have previously created. */
    post: operations["paymentInitiationRecipientGet"];
  };
  "/payment_initiation/recipient/list": {
    /** The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created. */
    post: operations["paymentInitiationRecipientList"];
  };
  "/payment_initiation/payment/create": {
    /**
     * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.
     *
     * Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.
     *
     * In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
     */
    post: operations["paymentInitiationPaymentCreate"];
  };
  "/payment_initiation/payment/token/create": {
    /**
     * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.
     *
     * The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     */
    post: operations["createPaymentToken"];
  };
  "/payment_initiation/consent/create": {
    /**
     * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.
     *
     * Consents can be limited in time and scope, and have constraints that describe limitations for payments.
     */
    post: operations["paymentInitiationConsentCreate"];
  };
  "/payment_initiation/consent/get": {
    /** The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints. */
    post: operations["paymentInitiationConsentGet"];
  };
  "/payment_initiation/consent/revoke": {
    /** The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it. */
    post: operations["paymentInitiationConsentRevoke"];
  };
  "/payment_initiation/consent/payment/execute": {
    /** The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent. */
    post: operations["paymentInitiationConsentPaymentExecute"];
  };
  "/sandbox/item/reset_login": {
    /**
     * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link's [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.
     *
     *
     * In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
     */
    post: operations["sandboxItemResetLogin"];
  };
  "/sandbox/item/set_verification_status": {
    /**
     * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.
     *
     * Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).
     *
     * For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     */
    post: operations["sandboxItemSetVerificationStatus"];
  };
  "/item/public_token/exchange": {
    /**
     * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.
     *
     * The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
     */
    post: operations["itemPublicTokenExchange"];
  };
  "/item/public_token/create": {
    /**
     * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).
     *
     * If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.
     *
     * A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.
     *
     * The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     */
    post: operations["itemCreatePublicToken"];
  };
  "/user/create": {
    /**
     * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.
     *
     * If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.
     */
    post: operations["userCreate"];
  };
  "/payment_initiation/payment/get": {
    /** The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order. */
    post: operations["paymentInitiationPaymentGet"];
  };
  "/payment_initiation/payment/list": {
    /** The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters. */
    post: operations["paymentInitiationPaymentList"];
  };
  "/asset_report/create": {
    /**
     * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.
     *
     * The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).
     *
     * The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
     */
    post: operations["assetReportCreate"];
  };
  "/asset_report/refresh": {
    /**
     * An Asset Report is an immutable snapshot of a user's assets. In order to "refresh" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.
     *
     * The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string ("") for any previously-populated fields you would like set as empty.
     */
    post: operations["assetReportRefresh"];
  };
  "/asset_report/relay/refresh": {
    /** The `/asset_report/relay/refresh` endpoint allows third parties to refresh an Asset Report that was relayed to them, using an `asset_relay_token` that was created by the report owner. A new Asset Report will be created based on the old one, but with the most recent data available. */
    post: operations["assetReportRelayRefresh"];
  };
  "/asset_report/remove": {
    /**
     * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.
     *
     * The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
     */
    post: operations["assetReportRemove"];
  };
  "/asset_report/filter": {
    /**
     * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.
     *
     * To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report's data.
     *
     * Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.
     *
     * Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
     */
    post: operations["assetReportFilter"];
  };
  "/asset_report/get": {
    /**
     * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.
     *
     * By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.
     *
     * To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.
     */
    post: operations["assetReportGet"];
  };
  "/asset_report/pdf/get": {
    /**
     * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.
     *
     * The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.
     *
     * [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     */
    post: operations["assetReportPdfGet"];
  };
  "/asset_report/audit_copy/create": {
    /**
     * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.
     *
     * To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     */
    post: operations["assetReportAuditCopyCreate"];
  };
  "/asset_report/audit_copy/remove": {
    /** The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy. */
    post: operations["assetReportAuditCopyRemove"];
  };
  "/asset_report/relay/create": {
    /**
     * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.
     *
     * To grant access to an Asset Report to a third party, use the `/asset_report/relay/create` endpoint to create an `asset_relay_token` and then pass that token to the third party who needs access. Each third party has its own `secondary_client_id`, for example `ce5bd328dcd34123456`. You'll need to create a separate `asset_relay_token` for each third party to whom you want to grant access to the Report.
     */
    post: operations["assetReportRelayCreate"];
  };
  "/asset_report/relay/get": {
    /** `/asset_report/relay/get` allows third parties to get an Asset Report that was shared with them, using an `asset_relay_token` that was created by the report owner. */
    post: operations["assetReportRelayGet"];
  };
  "/asset_report/relay/remove": {
    /** The `/asset_report/relay/remove` endpoint allows you to invalidate an `asset_relay_token`, meaning the third party holding the token will no longer be able to use it to access the Asset Report to which the `asset_relay_token` gives access to. The Asset Report, Items associated with it, and other Asset Relay Tokens that provide access to the same Asset Report are not affected and will remain accessible after removing the given `asset_relay_token. */
    post: operations["assetReportRelayRemove"];
  };
  "/investments/holdings/get": {
    /** The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts. */
    post: operations["investmentsHoldingsGet"];
  };
  "/investments/transactions/get": {
    /**
     * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.
     *
     * Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.
     *
     * Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.
     */
    post: operations["investmentsTransactionsGet"];
  };
  "/processor/token/create": {
    /** Used to create a token suitable for sending to one of Plaid's partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Processor tokens can also be revoked, using `/item/remove`. */
    post: operations["processorTokenCreate"];
  };
  "/processor/stripe/bank_account_token/create": {
    /** Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/). Bank account tokens can also be revoked, using `/item/remove`. */
    post: operations["processorStripeBankAccountTokenCreate"];
  };
  "/processor/apex/processor_token/create": {
    /** Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations. */
    post: operations["processorApexProcessorTokenCreate"];
  };
  "/deposit_switch/create": {
    /** This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch. */
    post: operations["depositSwitchCreate"];
  };
  "/item/import": {
    /**
     * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.
     *
     * Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).
     */
    post: operations["itemImport"];
  };
  "/deposit_switch/token/create": {
    /** In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. */
    post: operations["depositSwitchTokenCreate"];
  };
  "/link/token/create": {
    /**
     * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.
     *
     * A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     */
    post: operations["linkTokenCreate"];
  };
  "/link/token/get": {
    /**
     * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the
     * `/link/token/create` endpoint. It can be useful for debugging purposes.
     */
    post: operations["linkTokenGet"];
  };
  "/asset_report/audit_copy/get": {
    /** `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`. */
    post: operations["assetReportAuditCopyGet"];
  };
  "/deposit_switch/get": {
    /** This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user's direct deposit allocation preferences. */
    post: operations["depositSwitchGet"];
    parameters: {};
  };
  "/transfer/get": {
    /** The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`. */
    post: operations["transferGet"];
  };
  "/bank_transfer/get": {
    /** The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`. */
    post: operations["bankTransferGet"];
  };
  "/transfer/authorization/create": {
    /**
     * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.
     *
     * In Plaid's sandbox environment the decisions will be returned as follows:
     *
     *   - To approve a transfer with null rationale code, make an authorization request with an `amount` less than the available balance in the account.
     *
     *   - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).
     *
     *   - To approve a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).
     *
     *   - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
     *
     *   - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
     *
     * For guaranteed ACH customers, the following fields are required : `user.phone_number` (optional if `email_address` provided), `user.email_address` (optional if `phone_number` provided), `device.ip_address`, `device.user_agent`, and `user_present`.
     */
    post: operations["transferAuthorizationCreate"];
  };
  "/transfer/create": {
    /** Use the `/transfer/create` endpoint to initiate a new transfer. */
    post: operations["transferCreate"];
  };
  "/bank_transfer/create": {
    /** Use the `/bank_transfer/create` endpoint to initiate a new bank transfer. */
    post: operations["bankTransferCreate"];
  };
  "/transfer/list": {
    /** Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. */
    post: operations["transferList"];
  };
  "/bank_transfer/list": {
    /** Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. */
    post: operations["bankTransferList"];
  };
  "/transfer/cancel": {
    /** Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`. */
    post: operations["transferCancel"];
  };
  "/bank_transfer/cancel": {
    /** Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`. */
    post: operations["bankTransferCancel"];
  };
  "/transfer/event/list": {
    /** Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria. */
    post: operations["transferEventList"];
  };
  "/bank_transfer/event/list": {
    /** Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria. */
    post: operations["bankTransferEventList"];
  };
  "/transfer/event/sync": {
    /** `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events. */
    post: operations["transferEventSync"];
  };
  "/bank_transfer/event/sync": {
    /** `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events. */
    post: operations["bankTransferEventSync"];
  };
  "/transfer/sweep/get": {
    /** The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`. */
    post: operations["transferSweepGet"];
  };
  "/bank_transfer/sweep/get": {
    /** The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`. */
    post: operations["bankTransferSweepGet"];
  };
  "/transfer/sweep/list": {
    /** The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters. */
    post: operations["transferSweepList"];
  };
  "/bank_transfer/sweep/list": {
    /** The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters. */
    post: operations["bankTransferSweepList"];
  };
  "/bank_transfer/balance/get": {
    /**
     * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.
     *
     * The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.
     *
     * Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     */
    post: operations["bankTransferBalanceGet"];
  };
  "/bank_transfer/migrate_account": {
    /** As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager. */
    post: operations["bankTransferMigrateAccount"];
  };
  "/transfer/migrate_account": {
    /** As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager. */
    post: operations["transferMigrateAccount"];
  };
  "/transfer/intent/create": {
    /** Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI. */
    post: operations["transferIntentCreate"];
  };
  "/transfer/intent/get": {
    /** Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent. */
    post: operations["transferIntentGet"];
  };
  "/transfer/repayment/list": {
    /** The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`. */
    post: operations["transferRepaymentList"];
  };
  "/transfer/repayment/return/list": {
    /** The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment. */
    post: operations["transferRepaymentReturnList"];
  };
  "/sandbox/bank_transfer/simulate": {
    /** Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox. */
    post: operations["sandboxBankTransferSimulate"];
  };
  "/sandbox/transfer/sweep/simulate": {
    /** Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`. */
    post: operations["sandboxTransferSweepSimulate"];
  };
  "/sandbox/transfer/simulate": {
    /** Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox. */
    post: operations["sandboxTransferSimulate"];
  };
  "/sandbox/transfer/repayment/simulate": {
    /** Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned. */
    post: operations["sandboxTransferRepaymentSimulate"];
  };
  "/sandbox/transfer/fire_webhook": {
    /** Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a Transfer webhook in the Sandbox environment. */
    post: operations["sandboxTransferFireWebhook"];
  };
  "/employers/search": {
    /**
     * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user's employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.
     *
     * The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     */
    post: operations["employersSearch"];
  };
  "/income/verification/create": {
    /** `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. */
    post: operations["incomeVerificationCreate"];
  };
  "/income/verification/paystubs/get": {
    /**
     * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user's income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     *
     * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     */
    post: operations["incomeVerificationPaystubsGet"];
  };
  "/income/verification/documents/download": {
    /**
     * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.
     *
     * If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available
     * for download from the payroll provider will be available from this endpoint.
     *
     * The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file.
     * If not, the response will contain all documents associated with the verification.
     *
     * The `request_id` is returned in the `Plaid-Request-ID` header.
     */
    post: operations["incomeVerificationDocumentsDownload"];
    parameters: {};
  };
  "/income/verification/refresh": {
    /** `/income/verification/refresh` refreshes a given income verification. */
    post: operations["incomeVerificationRefresh"];
  };
  "/income/verification/taxforms/get": {
    /**
     * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user''s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     *
     * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     */
    post: operations["incomeVerificationTaxformsGet"];
  };
  "/income/verification/precheck": {
    /**
     * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.
     *
     * While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.
     *
     * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
     */
    post: operations["incomeVerificationPrecheck"];
  };
  "/employment/verification/get": {
    /**
     * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.
     *
     * This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
     */
    post: operations["employmentVerificationGet"];
  };
  "/deposit_switch/alt/create": {
    /** This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch. */
    post: operations["depositSwitchAltCreate"];
  };
  "/credit/audit_copy_token/create": {
    /**
     * Plaid can provide an Audit Copy token of an Asset Report and/or Income Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).
     *
     * To grant access to an Audit Copy token, use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     */
    post: operations["creditAuditCopyTokenCreate"];
  };
  "/credit/audit_copy_token/remove": {
    /** The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy. */
    post: operations["creditReportAuditCopyRemove"];
  };
  "/credit/asset_report/freddie_mac/get": {
    /** The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac's JSON format. */
    post: operations["creditAssetReportFreddieMacGet"];
  };
  "/credit/bank_income/get": {
    /** `/credit/bank_income/get` returns the bank income report(s) for a specified user. */
    post: operations["creditBankIncomeGet"];
  };
  "/credit/bank_income/pdf/get": {
    /** `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format. */
    post: operations["creditBankIncomePdfGet"];
  };
  "/credit/bank_income/refresh": {
    /** `/credit/bank_income/refresh` refreshes the bank income report data for a specific user. */
    post: operations["creditBankIncomeRefresh"];
  };
  "/credit/payroll_income/get": {
    /** This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document. */
    post: operations["creditPayrollIncomeGet"];
  };
  "/credit/payroll_income/precheck": {
    /**
     * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.
     *
     * While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.
     */
    post: operations["creditPayrollIncomePrecheck"];
  };
  "/credit/employment/get": {
    /** `/credit/employment/get` returns a list of items with employment information from a user's payroll provider that was verified by an end user. */
    post: operations["creditEmploymentGet"];
  };
  "/credit/payroll_income/refresh": {
    /** `/credit/payroll_income/refresh` refreshes a given digital payroll income verification. */
    post: operations["creditPayrollIncomeRefresh"];
  };
  "/credit/relay/create": {
    /**
     * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.
     *
     * To grant access to an Asset Report to a third party, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to the third party who needs access. Each third party has its own `secondary_client_id`, for example `ce5bd328dcd34123456`. You'll need to create a separate `relay_token` for each third party to whom you want to grant access to the Report.
     */
    post: operations["creditRelayCreate"];
  };
  "/credit/relay/get": {
    /** `/credit/relay/get` allows third parties to get a report that was shared with them, using an `relay_token` that was created by the report owner. */
    post: operations["creditRelayGet"];
  };
  "/credit/relay/refresh": {
    /** The `/credit/relay/refresh` endpoint allows third parties to refresh an report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created based on the old one, but with the most recent data available. */
    post: operations["creditRelayRefresh"];
  };
  "/credit/relay/remove": {
    /** The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`, meaning the third party holding the token will no longer be able to use it to access the reports to which the `relay_token` gives access to. The report, items associated with it, and other Relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token. */
    post: operations["creditRelayRemove"];
  };
  "/sandbox/bank_transfer/fire_webhook": {
    /** Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment. */
    post: operations["sandboxBankTransferFireWebhook"];
  };
  "/sandbox/income/fire_webhook": {
    /** Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment. */
    post: operations["sandboxIncomeFireWebhook"];
  };
  "/sandbox/oauth/select_accounts": {
    /** Save the selected accounts when connecting to the Platypus Oauth institution */
    post: operations["sandboxOauthSelectAccounts"];
  };
  "/signal/evaluate": {
    /**
     * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.
     *
     * In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
     */
    post: operations["signalEvaluate"];
  };
  "/signal/decision/report": {
    /** After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`. */
    post: operations["signalDecisionReport"];
  };
  "/signal/return/report": {
    /** Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio. */
    post: operations["signalReturnReport"];
  };
  "/signal/prepare": {
    /** Call `/signal/prepare` with Plaid-linked bank account information at least 10 seconds before calling `/signal/evaluate` or as soon as an end-user enters the ACH deposit flow in your application. */
    post: operations["signalPrepare"];
  };
  "/wallet/create": {
    /** Create an e-wallet. The response is the newly created e-wallet object. */
    post: operations["walletCreate"];
  };
  "/wallet/get": {
    /** Fetch an e-wallet. The response includes the current balance. */
    post: operations["walletGet"];
  };
  "/wallet/list": {
    /** This endpoint lists all e-wallets in descending order of creation. */
    post: operations["walletList"];
  };
  "/wallet/transaction/execute": {
    /**
     * Execute a transaction using the specified e-wallet.
     * Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction.
     * Transactions will settle in seconds to several days, depending on the underlying payment rail.
     */
    post: operations["walletTransactionExecute"];
  };
  "/wallet/transaction/get": {
    /** Fetch a specific e-wallet transaction */
    post: operations["walletTransactionGet"];
  };
  "/wallet/transactions/list": {
    /** This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time. */
    post: operations["walletTransactionsList"];
  };
  "/beta/transactions/v1/enhance": {
    /**
     * The '/beta/transactions/v1/enhance' endpoint enriches raw transaction data provided directly by clients.
     *
     * The product is currently in beta.
     */
    post: operations["transactionsEnhance"];
  };
  "/beta/transactions/rules/v1/create": {
    /**
     * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.
     *
     * Rules will be applied on the Item's transactions returned in `/transactions/get` response.
     *
     * The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     */
    post: operations["transactionsRulesCreate"];
  };
  "/beta/transactions/rules/v1/list": {
    /** The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token. */
    post: operations["transactionsRulesList"];
  };
  "/beta/transactions/rules/v1/remove": {
    /** The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule. */
    post: operations["transactionsRulesRemove"];
  };
  "/payment_profile/create": {
    /** Use `/payment_profile/create` endpoint to create a new payment profile, the return value is a Payment Profile ID. Attach it to the link token create request and the link workflow will then "activate" this Payment Profile if the linkage is successful. It can then be used to create Transfers using `/transfer/authorization/create` and /transfer/create`. */
    post: operations["paymentProfileCreate"];
  };
  "/payment_profile/get": {
    /** Use the `/payment_profile/get` endpoint to get the status of a given Payment Profile. */
    post: operations["paymentProfileGet"];
  };
  "/payment_profile/remove": {
    /** Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers. */
    post: operations["paymentProfileRemove"];
  };
  "/beta/partner/v1/customers/create": {
    /** The `/partner/v1/customers/create` endpoint is used by reseller partners to create an end customer client. */
    post: operations["partnerCustomersCreate"];
  };
  "/link_delivery/create": {
    /** Use the `/link_delivery/create` endpoint to create a Link Delivery session. */
    post: operations["linkDeliveryCreate"];
  };
  "/link_delivery/get": {
    /** Use the `/link_delivery/get` endpoint to get the status of a Link Delivery session. */
    post: operations["linkDeliveryGet"];
  };
}

export interface components {
  schemas: {
    /** @description AuthGetRequest defines the request schema for `/auth/get` */
    AuthGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      options?: components["schemas"]["AuthGetRequestOptions"];
    };
    /** @description An optional object to filter `/auth/get` results. */
    AuthGetRequestOptions: {
      /**
       * @description A list of `account_ids` to retrieve for the Item.
       * Note: An error will be returned if a provided `account_id` is not associated with the Item.
       */
      account_ids?: string[];
    };
    /** @description AuthGetResponse defines the response schema for `/auth/get` */
    AuthGetResponse: {
      /** @description The `accounts` for which numbers are being retrieved. */
      accounts: components["schemas"]["AccountBase"][];
      numbers: components["schemas"]["AuthGetNumbers"];
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description An object containing identifying numbers used for making electronic transfers to and from the `accounts`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by any `accounts` for which data has been requested, the array for that type will be empty. */
    AuthGetNumbers: {
      /** @description An array of ACH numbers identifying accounts. */
      ach: components["schemas"]["NumbersACH"][];
      /** @description An array of EFT numbers identifying accounts. */
      eft: components["schemas"]["NumbersEFT"][];
      /** @description An array of IBAN numbers identifying accounts. */
      international: components["schemas"]["NumbersInternational"][];
      /** @description An array of BACS numbers identifying accounts. */
      bacs: components["schemas"]["NumbersBACS"][];
    } & { [key: string]: unknown };
    /** @description TransactionsGetRequest defines the request schema for `/transactions/get` */
    TransactionsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      options?: components["schemas"]["TransactionsGetRequestOptions"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date
       * @description The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
       */
      start_date: string;
      /**
       * Format: date
       * @description The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
       */
      end_date: string;
    };
    /** @description An optional object to be used with the request. If specified, `options` must not be `null`. */
    TransactionsGetRequestOptions: {
      /**
       * @description A list of `account_ids` to retrieve for the Item
       *
       * Note: An error will be returned if a provided `account_id` is not associated with the Item.
       */
      account_ids?: string[];
      /**
       * @description The number of transactions to fetch.
       * @default 100
       */
      count?: number;
      /**
       * @description The number of transactions to skip. The default value is 0.
       * @default 0
       */
      offset?: number;
      /**
       * @description Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager.
       * @default false
       */
      include_original_description?: boolean | null;
      /**
       * @deprecated
       * @description Please use [`include_personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-get-request-options-include-personal-finance-category) instead.
       * @default false
       */
      include_personal_finance_category_beta?: boolean;
      /**
       * @description Include the [`personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-personal-finance-category) object in the response.
       *
       * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
       *
       * We’re introducing Category Rules - a new beta endpoint that will enable you to change the `personal_finance_category` for a transaction based on your users’ needs. When rules are set, the selected category will override the Plaid provided category. To learn more, send a note to transactions-feedback@plaid.com.
       * @default false
       */
      include_personal_finance_category?: boolean;
    };
    /** @description TransactionsGetResponse defines the response schema for `/transactions/get` */
    TransactionsGetResponse: {
      /** @description An array containing the `accounts` associated with the Item for which transactions are being returned. Each transaction can be mapped to its corresponding account via the `account_id` field. */
      accounts: components["schemas"]["AccountBase"][];
      /** @description An array containing transactions from the account. Transactions are returned in reverse chronological order, with the most recent at the beginning of the array. The maximum number of transactions returned is determined by the `count` parameter. */
      transactions: components["schemas"]["Transaction"][];
      /** @description The total number of transactions available within the date range specified. If `total_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter. */
      total_transactions: number;
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description TransactionsRefreshRequest defines the request schema for `/transactions/refresh` */
    TransactionsRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description TransactionsRefreshResponse defines the response schema for `/transactions/refresh` */
    TransactionsRefreshResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description TransactionsRecurringGetRequest defines the request schema for `/transactions/recurring/get` */
    TransactionsRecurringGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
      options?: components["schemas"]["TransactionsRecurringGetRequestOptions"];
      /**
       * @description A list of `account_ids` to retrieve for the Item
       *
       * Note: An error will be returned if a provided `account_id` is not associated with the Item.
       */
      account_ids: string[];
    };
    /** @description An optional object to be used with the request. If specified, `options` must not be `null`. */
    TransactionsRecurringGetRequestOptions: {
      /**
       * @description Include the [`personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-personal-finance-category) object for each transaction stream in the response.
       *
       * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
       * @default false
       */
      include_personal_finance_category?: boolean;
    };
    /** @description TransactionsRecurringGetResponse defines the response schema for `/transactions/recurring/get` */
    TransactionsRecurringGetResponse: {
      /** @description An array of depository transaction streams. */
      inflow_streams: components["schemas"]["TransactionStream"][];
      /** @description An array of expense transaction streams. */
      outflow_streams: components["schemas"]["TransactionStream"][];
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time transaction streams for the given account were updated on
       */
      updated_datetime: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description TransactionsRulesCreateRequest defines the request schema for `beta/transactions/rules/v1/create` */
    TransactionsRulesCreateRequest: {
      client_id: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret: components["schemas"]["APISecret"];
      /**
       * @description Personal finance detailed category.
       *
       * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
       */
      personal_finance_category: string;
      rule_details: components["schemas"]["TransactionsRuleDetails"];
    };
    /** @description TransactionsRulesCreateResponse defines the response schema for `/beta/transactions/rules/v1/create` */
    TransactionsRulesCreateResponse: {
      rule: components["schemas"]["TransactionsCategoryRule"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description TransactionsRulesListRequest defines the request schema for `/beta/transactions/rules/v1/list` */
    TransactionsRulesListRequest: {
      client_id: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret: components["schemas"]["APISecret"];
    };
    /** @description TransactionsRulesListResponse defines the response schema for `/beta/transactions/rules/v1/list` */
    TransactionsRulesListResponse: {
      /** @description A list of the Item's transaction rules */
      rules: components["schemas"]["TransactionsCategoryRule"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description TransactionsRulesRemoveRequest defines the request schema for `/beta/transactions/rules/v1/remove` */
    TransactionsRulesRemoveRequest: {
      client_id: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret: components["schemas"]["APISecret"];
      /** @description A rule's unique identifier */
      rule_id: string;
    };
    /** @description TransactionsRulesRemoveResponse defines the response schema for `/beta/transactions/rules/v1/remove` */
    TransactionsRulesRemoveResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description TransactionsSyncRequest defines the request schema for `/transactions/sync` */
    TransactionsSyncRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @description The cursor value represents the last update requested. Providing it will cause the response to only return changes after this update.
       * If omitted, the entire history of updates will be returned, starting with the first-added transactions on the item.
       * Note: The upper-bound length of this cursor is 256 characters of base64.
       */
      cursor?: string;
      /**
       * @description The number of transaction updates to fetch.
       * @default 100
       */
      count?: number;
      options?: components["schemas"]["TransactionsSyncRequestOptions"];
    };
    /** @description An optional object to be used with the request. If specified, `options` must not be `null`. */
    TransactionsSyncRequestOptions: {
      /**
       * @description Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager.
       * @default false
       */
      include_original_description?: boolean | null;
      /**
       * @description Include the [`personal_finance_category`](https://plaid.com/docs/api/products/transactions/#transactions-sync-response-added-personal-finance-category) object in the response.
       *
       * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
       *
       * We’re introducing Category Rules - a new beta endpoint that will enable you to change the `personal_finance_category` for a transaction based on your users’ needs. When rules are set, the selected category will override the Plaid provided category. To learn more, send a note to transactions-feedback@plaid.com.
       * @default false
       */
      include_personal_finance_category?: boolean;
    };
    /** @description TransactionsSyncResponse defines the response schema for `/transactions/sync` */
    TransactionsSyncResponse: {
      /** @description Transactions that have been added to the item since `cursor` ordered by ascending last modified time. */
      added: components["schemas"]["Transaction"][];
      /** @description Transactions that have been modified on the item since `cursor` ordered by ascending last modified time. */
      modified: components["schemas"]["Transaction"][];
      /** @description Transactions that have been removed from the item since `cursor` ordered by ascending last modified time. */
      removed: components["schemas"]["RemovedTransaction"][];
      /** @description Cursor used for fetching any future updates after the latest update provided in this response. */
      next_cursor: string;
      /** @description Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with `cursor` set to `next_cursor`. */
      has_more: boolean;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description InstitutionsGetRequest defines the request schema for `/institutions/get` */
    InstitutionsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The total number of Institutions to return. */
      count: number;
      /** @description The number of Institutions to skip. */
      offset: number;
      /**
       * @description Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard.
       *
       * In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied.
       */
      country_codes: components["schemas"]["CountryCode"][];
      options?: components["schemas"]["InstitutionsGetRequestOptions"];
    };
    /** @description An optional object to filter `/institutions/get` results. */
    InstitutionsGetRequestOptions: {
      /** @description Filter the Institutions based on which products they support. */
      products?: components["schemas"]["Products"][] | null;
      /** @description Specify an array of routing numbers to filter institutions. The response will only return institutions that match all of the routing numbers in the array. Routing number records used for this matching are not comprehensive; failure to match a given routing number to an institution does not mean that the institution is unsupported by Plaid. */
      routing_numbers?: string[] | null;
      /** @description Limit results to institutions with or without OAuth login flows. */
      oauth?: boolean | null;
      /**
       * @description When `true`, return the institution's homepage URL, logo and primary brand color.
       *
       * Note that Plaid does not own any of the logos shared by the API, and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.
       */
      include_optional_metadata?: boolean;
      /**
       * @description When `true`, returns metadata related to the Auth product indicating which auth methods are supported.
       * @default false
       */
      include_auth_metadata?: boolean;
      /**
       * @description When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.
       * @default false
       */
      include_payment_initiation_metadata?: boolean;
    };
    /** @description InstitutionsGetResponse defines the response schema for `/institutions/get` */
    InstitutionsGetResponse: {
      /** @description A list of Plaid institutions */
      institutions: components["schemas"]["Institution"][];
      /** @description The total number of institutions available via this endpoint */
      total: number;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description InstitutionsSearchRequest defines the request schema for `/institutions/search` */
    InstitutionsSearchRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The search query. Institutions with names matching the query are returned */
      query: string;
      /** @description Filter the Institutions based on whether they support all products listed in `products`. Provide `null` to get institutions regardless of supported products. Note that when `auth` is specified as a product, if you are enabled for Instant Match or Automated Micro-deposits, institutions that support those products will be returned even if `auth` is not present in their product array. */
      products: components["schemas"]["Products"][] | null;
      /** @description Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. */
      country_codes: components["schemas"]["CountryCode"][];
      options?: components["schemas"]["InstitutionsSearchRequestOptions"];
    };
    /** @description An optional object to filter `/institutions/search` results. */
    InstitutionsSearchRequestOptions: {
      /** @description Limit results to institutions with or without OAuth login flows. */
      oauth?: boolean | null;
      /** @description When true, return the institution's homepage URL, logo and primary brand color. */
      include_optional_metadata?: boolean;
      /**
       * @description When `true`, returns metadata related to the Auth product indicating which auth methods are supported.
       * @default false
       */
      include_auth_metadata?: boolean | null;
      /**
       * @description When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.
       * @default false
       */
      include_payment_initiation_metadata?: boolean | null;
      payment_initiation?: components["schemas"]["InstitutionsSearchPaymentInitiationOptions"];
    };
    /** @description Additional options that will be used to filter institutions by various Payment Initiation configurations. */
    InstitutionsSearchPaymentInitiationOptions:
      | ({
          /** @description A unique ID identifying the payment */
          payment_id?: string | null;
          /** @description A unique ID identifying the payment consent */
          consent_id?: string | null;
        } & { [key: string]: unknown })
      | null;
    /** @description InstitutionsSearchResponse defines the response schema for `/institutions/search` */
    InstitutionsSearchResponse: {
      /** @description An array of institutions matching the search criteria */
      institutions: components["schemas"]["Institution"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description InstitutionsGetByIdRequest defines the request schema for `/institutions/get_by_id` */
    InstitutionsGetByIdRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the institution to get details about */
      institution_id: string;
      /** @description Specify an array of Plaid-supported country codes this institution supports, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. */
      country_codes: components["schemas"]["CountryCode"][];
      options?: components["schemas"]["InstitutionsGetByIdRequestOptions"];
    };
    /** @description Specifies optional parameters for `/institutions/get_by_id`. If provided, must not be `null`. */
    InstitutionsGetByIdRequestOptions: {
      /**
       * @description When `true`, return an institution's logo, brand color, and URL. When available, the bank's logo is returned as a base64 encoded 152x152 PNG, the brand color is in hexadecimal format. The default value is `false`.
       *
       * Note that Plaid does not own any of the logos shared by the API and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.
       * @default false
       */
      include_optional_metadata?: boolean;
      /**
       * @description If `true`, the response will include status information about the institution. Default value is `false`.
       * @default false
       */
      include_status?: boolean;
      /**
       * @description When `true`, returns metadata related to the Auth product indicating which auth methods are supported.
       * @default false
       */
      include_auth_metadata?: boolean;
      /**
       * @description When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.
       * @default false
       */
      include_payment_initiation_metadata?: boolean;
    };
    /** @description InstitutionsGetByIdResponse defines the response schema for `/institutions/get_by_id` */
    InstitutionsGetByIdResponse: {
      institution: components["schemas"]["Institution"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description AccountsGetRequest defines the request schema for `/accounts/get` */
    AccountsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      options?: components["schemas"]["AccountsGetRequestOptions"];
    };
    /** @description An optional object to filter `/accounts/get` results. */
    AccountsGetRequestOptions: {
      /** @description An array of `account_ids` to retrieve for the Account. */
      account_ids?: string[];
    };
    /** @description AccountsGetResponse defines the response schema for `/accounts/get` and `/accounts/balance/get`. */
    AccountsGetResponse: {
      /**
       * @description An array of financial institution accounts associated with the Item.
       * If `/accounts/balance/get` was called, each account will include real-time balance information.
       */
      accounts: components["schemas"]["AccountBase"][];
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description CategoriesGetRequest defines the request schema for `/categories/get` */
    CategoriesGetRequest: { [key: string]: unknown };
    /** @description CategoriesGetResponse defines the response schema for `/categories/get` */
    CategoriesGetResponse: {
      /** @description An array of all of the transaction categories used by Plaid. */
      categories: components["schemas"]["Category"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * @description Test password to use for the creation of the Sandbox Item. Default value is `pass_good`.
     * @default pass_good
     */
    SandboxOverridePassword: string | null;
    /**
     * @description Test username to use for the creation of the Sandbox Item. Default value is `user_good`.
     * @default user_good
     */
    SandboxOverrideUsername: string | null;
    /** @description SandboxProcessorTokenCreateRequest defines the request schema for `/sandbox/processor_token/create` */
    SandboxProcessorTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the institution the Item will be associated with */
      institution_id: string;
      options?: components["schemas"]["SandboxProcessorTokenCreateRequestOptions"];
    };
    /** @description An optional set of options to be used when configuring the Item. If specified, must not be `null`. */
    SandboxProcessorTokenCreateRequestOptions: {
      override_username?: components["schemas"]["SandboxOverrideUsername"];
      override_password?: components["schemas"]["SandboxOverridePassword"];
    };
    /** @description SandboxProcessorTokenCreateResponse defines the response schema for `/sandbox/processor_token/create` */
    SandboxProcessorTokenCreateResponse: {
      /** @description A processor token that can be used to call the `/processor/` endpoints. */
      processor_token: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description SandboxPublicTokenCreateRequest defines the request schema for `/sandbox/public_token/create` */
    SandboxPublicTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the institution the Item will be associated with */
      institution_id: string;
      /** @description The products to initially pull for the Item. May be any products that the specified `institution_id`  supports. This array may not be empty. */
      initial_products: components["schemas"]["Products"][];
      options?: components["schemas"]["SandboxPublicTokenCreateRequestOptions"];
      user_token?: components["schemas"]["UserToken"];
    };
    /** @description An optional set of options to be used when configuring the Item. If specified, must not be `null`. */
    SandboxPublicTokenCreateRequestOptions: {
      /** @description Specify a webhook to associate with the new Item. */
      webhook?: string;
      override_username?: components["schemas"]["SandboxOverrideUsername"];
      override_password?: components["schemas"]["SandboxOverridePassword"];
      transactions?: components["schemas"]["SandboxPublicTokenCreateRequestOptionsTransactions"];
    };
    /**
     * SandboxPublicTokenCreateRequestOptionsTransactions
     * @description An optional set of parameters corresponding to transactions options.
     */
    SandboxPublicTokenCreateRequestOptionsTransactions: {
      /**
       * Format: date
       * @description The earliest date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
       */
      start_date?: string;
      /**
       * Format: date
       * @description The most recent date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
       */
      end_date?: string;
    };
    /** @description SandboxPublicTokenCreateResponse defines the response schema for `/sandbox/public_token/create` */
    SandboxPublicTokenCreateResponse: {
      /** @description A public token that can be exchanged for an access token using `/item/public_token/exchange` */
      public_token: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description SandboxItemFireWebhookRequest defines the request schema for `/sandbox/item/fire_webhook` */
    SandboxItemFireWebhookRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      webhook_type?: components["schemas"]["WebhookType"];
      /**
       * @description The webhook codes that can be fired by this test endpoint.
       * @enum {string}
       */
      webhook_code:
        | "DEFAULT_UPDATE"
        | "NEW_ACCOUNTS_AVAILABLE"
        | "AUTH_DATA_UPDATE"
        | "RECURRING_TRANSACTIONS_UPDATE";
    };
    /**
     * @description The webhook types that can be fired by this test endpoint.
     * @enum {string}
     */
    WebhookType:
      | "AUTH"
      | "HOLDINGS"
      | "INVESTMENTS_TRANSACTIONS"
      | "ITEM"
      | "LIABILITIES"
      | "TRANSACTIONS";
    /** @description SandboxItemFireWebhookResponse defines the response schema for `/sandbox/item/fire_webhook` */
    SandboxItemFireWebhookResponse: {
      /** @description Value is `true`  if the test` webhook_code`  was successfully fired. */
      webhook_fired: boolean;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description AccountsBalanceGetRequest defines the request schema for `/accounts/balance/get` */
    AccountsBalanceGetRequest: {
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      options?: components["schemas"]["AccountsBalanceGetRequestOptions"];
    };
    /** @description An optional object to filter `/accounts/balance/get` results. */
    AccountsBalanceGetRequestOptions: {
      /**
       * @description A list of `account_ids` to retrieve for the Item. The default value is `null`.
       *
       * Note: An error will be returned if a provided `account_id` is not associated with the Item.
       */
      account_ids?: string[];
      min_last_updated_datetime?: components["schemas"]["MinLastUpdatedDatetime"];
    };
    /**
     * MinLastUpdatedDatetime
     * Format: date-time
     * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the oldest acceptable balance when making a request to `/accounts/balance/get`.
     *
     * If the balance that is pulled for `ins_128026` (Capital One) is older than the given timestamp, an `INVALID_REQUEST` error with the code of `LAST_UPDATED_DATETIME_OUT_OF_RANGE` will be returned with the most recent timestamp for the requested account contained in the response.
     *
     * This field is only used when the institution is `ins_128026` (Capital One), in which case a value must be provided or an `INVALID_REQUEST` error with the code of `INVALID_FIELD` will be returned. For all other institutions, this field is ignored.
     */
    MinLastUpdatedDatetime: string;
    /** @description IdentityGetRequest defines the request schema for `/identity/get` */
    IdentityGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      options?: components["schemas"]["IdentityGetRequestOptions"];
    };
    /** @description An optional object to filter `/identity/get` results. */
    IdentityGetRequestOptions: {
      /**
       * @description A list of `account_ids` to retrieve for the Item.
       * Note: An error will be returned if a provided `account_id` is not associated with the Item.
       */
      account_ids?: string[];
    };
    /** @description IdentityGetResponse defines the response schema for `/identity/get` */
    IdentityGetResponse: {
      /** @description The accounts for which Identity data has been requested */
      accounts: components["schemas"]["AccountIdentity"][];
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description IdentityMatchRequest defines the request schema for `/identity/match` */
    IdentityMatchRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      user?: components["schemas"]["IdentityMatchUser"];
      options?: components["schemas"]["IdentityMatchRequestOptions"];
    };
    /** @description An optional object to filter /identity/match results */
    IdentityMatchRequestOptions: {
      /** @description An array of `account_ids` to perform fuzzy match */
      account_ids?: string[];
    };
    /**
     * IdentityMatchUser
     * @description The user's legal name, phone number, email address and address used to perform fuzzy match.
     */
    IdentityMatchUser: {
      /** @description The user's full legal name. */
      legal_name?: string | null;
      /** @description The user's phone number, in E.164 format: +{countrycode}{number}. For example: "+14151234567". Phone numbers provided in other formats will be parsed on a best-effort basis. */
      phone_number?: string | null;
      /** @description The user's email address. */
      email_address?: string | null;
      address?: components["schemas"]["AddressDataNullable"];
    } & { [key: string]: unknown };
    /** @description IdentityMatchResponse defines the response schema for `/identity/match` */
    IdentityMatchResponse: {
      request_id?: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description ProcessorAuthGetRequest defines the request schema for `/processor/auth/get` */
    ProcessorAuthGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
    };
    /** @description ProcessorAuthGetResponse defines the response schema for `/processor/auth/get` */
    ProcessorAuthGetResponse: {
      request_id: components["schemas"]["RequestID"];
      numbers: components["schemas"]["ProcessorNumber"];
      account: components["schemas"]["AccountBase"];
    } & { [key: string]: unknown };
    /**
     * ProcessorBankTransferCreateRequest
     * @description Defines the request schema for `/processor/bank_transfer/create`
     */
    ProcessorBankTransferCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      idempotency_key: components["schemas"]["BankTransferIdempotencyKey"];
      processor_token: components["schemas"]["ProcessorToken"];
      type: components["schemas"]["BankTransferType"];
      network: components["schemas"]["BankTransferNetwork"];
      amount: components["schemas"]["BankTransferAmount"];
      /** @description The currency of the transfer amount – should be set to "USD". */
      iso_currency_code: string;
      /** @description The transfer description. Maximum of 10 characters. */
      description: string;
      ach_class?: components["schemas"]["ACHClass"];
      user: components["schemas"]["BankTransferUser"];
      /** @description An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters. */
      custom_tag?: string | null;
      metadata?: components["schemas"]["BankTransferMetadata"];
      /** @description Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. */
      origination_account_id?: string | null;
    };
    /**
     * ProcessorBankTransferCreateResponse
     * @description Defines the response schema for `/processor/bank_transfer/create`
     */
    ProcessorBankTransferCreateResponse: {
      bank_transfer: components["schemas"]["BankTransfer"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description An object containing identifying numbers used for making electronic transfers to and from the `account`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by the `account` for which auth data has been requested, a null value will be returned. */
    ProcessorNumber: {
      ach?: components["schemas"]["NumbersACHNullable"];
      eft?: components["schemas"]["NumbersEFTNullable"];
      international?: components["schemas"]["NumbersInternationalNullable"];
      bacs?: components["schemas"]["NumbersBACSNullable"];
    } & { [key: string]: unknown };
    /** @description ProcessorIdentityGetRequest defines the request schema for `/processor/identity/get` */
    ProcessorIdentityGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
    };
    /** @description ProcessorIdentityGetResponse defines the response schema for `/processor/identity/get` */
    ProcessorIdentityGetResponse: {
      account: components["schemas"]["AccountIdentity"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description ProcessorBalanceGetRequest defines the request schema for `/processor/balance/get` */
    ProcessorBalanceGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
      options?: components["schemas"]["ProcessorBalanceGetRequestOptions"];
    };
    /** @description An optional object to filter `/processor/balance/get` results. */
    ProcessorBalanceGetRequestOptions: {
      min_last_updated_datetime?: components["schemas"]["MinLastUpdatedDatetime"];
    };
    /** @description ProcessorBalanceGetResponse defines the response schema for `/processor/balance/get` */
    ProcessorBalanceGetResponse: {
      account: components["schemas"]["AccountBase"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description WebhookVerificationKeyGetRequest defines the request schema for `/webhook_verification_key/get` */
    WebhookVerificationKeyGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The key ID ( `kid` ) from the JWT header. */
      key_id: string;
    };
    /** @description WebhookVerificationKeyGetResponse defines the response schema for `/webhook_verification_key/get` */
    WebhookVerificationKeyGetResponse: {
      key: components["schemas"]["JWKPublicKey"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description A JSON Web Key (JWK) that can be used in conjunction with [JWT libraries](https://jwt.io/#libraries-io) to verify Plaid webhooks */
    JWKPublicKey: {
      /** @description The alg member identifies the cryptographic algorithm family used with the key. */
      alg: string;
      /** @description The crv member identifies the cryptographic curve used with the key. */
      crv: string;
      /** @description The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover. */
      kid: string;
      /** @description The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC. */
      kty: string;
      /** @description The use (public key use) parameter identifies the intended use of the public key. */
      use: string;
      /** @description The x member contains the x coordinate for the elliptic curve point. */
      x: string;
      /** @description The y member contains the y coordinate for the elliptic curve point. */
      y: string;
      /** @description The timestamp when the key was created, in Unix time. */
      created_at: number;
      /** @description The timestamp when the key expired, in Unix time. */
      expired_at: number | null;
    } & { [key: string]: unknown };
    /** @description LiabilitiesGetRequest defines the request schema for `/liabilities/get` */
    LiabilitiesGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      options?: components["schemas"]["LiabilitiesGetRequestOptions"];
    };
    /** @description An optional object to filter `/liabilities/get` results. If provided, `options` cannot be null. */
    LiabilitiesGetRequestOptions: {
      /**
       * @description A list of accounts to retrieve for the Item.
       *
       * An error will be returned if a provided `account_id` is not associated with the Item
       */
      account_ids?: string[];
    };
    /** @description LiabilitiesGetResponse defines the response schema for `/liabilities/get` */
    LiabilitiesGetResponse: {
      /** @description An array of accounts associated with the Item */
      accounts: components["schemas"]["AccountBase"][];
      item: components["schemas"]["Item"];
      liabilities: components["schemas"]["LiabilitiesObject"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description PaymentInitiationRecipientCreateRequest defines the request schema for `/payment_initiation/recipient/create` */
    PaymentInitiationRecipientCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The name of the recipient. We recommend using strings of length 18 or less and avoid special characters to ensure compatibility with all institutions. */
      name: string;
      /** @description The International Bank Account Number (IBAN) for the recipient. If BACS data is not provided, an IBAN is required. */
      iban?: string | null;
      bacs?: components["schemas"]["RecipientBACSNullable"];
      address?: components["schemas"]["PaymentInitiationAddress"];
    };
    /** @description PaymentInitiationRecipientCreateResponse defines the response schema for `/payment_initation/recipient/create` */
    PaymentInitiationRecipientCreateResponse: {
      /** @description A unique ID identifying the recipient */
      recipient_id: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * @description The status of the refund.
     *
     * `PROCESSING`: The refund is currently being processed. The refund will automatically exit this state when processing is complete.
     *
     * `INITIATED`: The refund has been successfully initiated.
     *
     * `EXECUTED`: Indicates that the refund has been successfully executed.
     *
     * `FAILED`: The refund has failed to be executed. This error is retryable once the root cause is resolved.
     * @enum {string}
     */
    PaymentInitiationRefundStatus:
      | "PROCESSING"
      | "EXECUTED"
      | "INITIATED"
      | "FAILED";
    /** @description PaymentInitiationPaymentReverseResponse defines the response schema for `/payment_initation/payment/reverse` */
    PaymentInitiationPaymentReverseResponse: {
      /** @description A unique ID identifying the refund */
      refund_id: string;
      status: components["schemas"]["PaymentInitiationRefundStatus"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description PaymentInitiationRecipientGetRequest defines the request schema for `/payment_initiation/recipient/get` */
    PaymentInitiationRecipientGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the recipient */
      recipient_id: string;
    };
    /** @description PaymentInitiationRecipientGetResponse defines the response schema for `/payment_initiation/recipient/get` */
    PaymentInitiationRecipientGetResponse: components["schemas"]["PaymentInitiationRecipient"] & {
      request_id?: components["schemas"]["RequestID"];
    } & {
      recipient_id: unknown;
      name: unknown;
      request_id: unknown;
    } & { [key: string]: unknown };
    /**
     * PaymentInitiationRecipient
     * @description PaymentInitiationRecipient defines a payment initiation recipient
     */
    PaymentInitiationRecipient: {
      /** @description The ID of the recipient. */
      recipient_id: string;
      /** @description The name of the recipient. */
      name: string;
      address?: components["schemas"]["PaymentInitiationAddress"];
      /** @description The International Bank Account Number (IBAN) for the recipient. */
      iban?: string | null;
      bacs?: components["schemas"]["RecipientBACSNullable"];
    } & { [key: string]: unknown };
    /** @description PaymentInitiationRecipientListRequest defines the request schema for `/payment_initiation/recipient/list` */
    PaymentInitiationRecipientListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description PaymentInitiationRecipientListResponse defines the response schema for `/payment_initiation/recipient/list` */
    PaymentInitiationRecipientListResponse: {
      /** @description An array of payment recipients created for Payment Initiation */
      recipients: components["schemas"]["PaymentInitiationRecipient"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description PaymentInitiationPaymentCreateRequest defines the request schema for `/payment_initiation/payment/create` */
    PaymentInitiationPaymentCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the recipient the payment is for. */
      recipient_id: string;
      /**
       * @description A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them).
       * In order to track settlement via Payment Confirmation, each payment must have a unique reference. If the reference provided through the API is not unique, Plaid will adjust it.
       * Both the originally provided and automatically adjusted references (if any) can be found in the `reference` and `adjusted_reference` fields, respectively.
       */
      reference: string;
      amount: components["schemas"]["PaymentAmount"];
      schedule?: components["schemas"]["ExternalPaymentScheduleRequest"];
      options?: components["schemas"]["ExternalPaymentOptions"];
    };
    /** @description PaymentInitiationPaymentReverseRequest defines the request schema for `/payment_initiation/payment/reverse` */
    PaymentInitiationPaymentReverseRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the payment to reverse */
      payment_id: string;
      idempotency_key: components["schemas"]["WalletTransactionIdempotencyKey"];
      /** @description A reference for the refund. This must be an alphanumeric string with at most 18 characters and must not contain any special characters or spaces. */
      reference: string;
    };
    /**
     * @description For a payment returned by this endpoint, there is only one possible value:
     *
     * `PAYMENT_STATUS_INPUT_NEEDED`: The initial phase of the payment
     * @enum {string}
     */
    PaymentInitiationPaymentCreateStatus: "PAYMENT_STATUS_INPUT_NEEDED";
    /** @description PaymentInitiationPaymentCreateResponse defines the response schema for `/payment_initiation/payment/create` */
    PaymentInitiationPaymentCreateResponse: {
      /** @description A unique ID identifying the payment */
      payment_id: string;
      status: components["schemas"]["PaymentInitiationPaymentCreateStatus"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description SandboxItemResetLoginRequest defines the request schema for `/sandbox/item/reset_login` */
    SandboxItemResetLoginRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /** @description SandboxItemResetLoginResponse defines the response schema for `/sandbox/item/reset_login` */
    SandboxItemResetLoginResponse: {
      /** @description `true` if the call succeeded */
      reset_login: boolean;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description SandboxItemSetVerificationStatusRequest defines the request schema for `/sandbox/item/set_verification_status` */
    SandboxItemSetVerificationStatusRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /** @description The `account_id` of the account whose verification status is to be modified */
      account_id: string;
      /**
       * @description The verification status to set the account to.
       * @enum {string}
       */
      verification_status: "automatically_verified" | "verification_expired";
    };
    /** @description SandboxItemSetVerificationStatusResponse defines the response schema for `/sandbox/item/set_verification_status` */
    SandboxItemSetVerificationStatusResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description UserCreateRequest defines the request schema for `/user/create` */
    UserCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description A unique ID representing the end user. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. */
      client_user_id: string;
    };
    /** @description UserCreateResponse defines the response schema for `/user/create` */
    UserCreateResponse: {
      user_token: components["schemas"]["UserToken"];
      user_id: components["schemas"]["UserId"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description PaymentInitiationPaymentGetRequest defines the request schema for `/payment_initiation/payment/get` */
    PaymentInitiationPaymentGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `payment_id` returned from `/payment_initiation/payment/create`. */
      payment_id: string;
    };
    /** @description PaymentInitiationPaymentGetResponse defines the response schema for `/payment_initation/payment/get` */
    PaymentInitiationPaymentGetResponse: components["schemas"]["PaymentInitiationPayment"] & {
      request_id?: components["schemas"]["RequestID"];
    } & {
      request_id: unknown;
      payment_id: unknown;
      amount: unknown;
      status: unknown;
      recipient_id: unknown;
      reference: unknown;
      last_status_update: unknown;
      bacs: unknown;
      iban: unknown;
    } & { [key: string]: unknown };
    /**
     * @description The status of the payment.
     *
     * `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.
     *
     * `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution but has not been executed.
     *
     * `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.
     *
     * `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error is retryable once the root cause is resolved.
     *
     * `PAYMENT_STATUS_BLOCKED`: The payment has been blocked. This is a retryable error.
     *
     * `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.
     *
     * `PAYMENT_STATUS_CANCELLED`: The payment was cancelled during authorisation.
     *
     * `PAYMENT_STATUS_EXECUTED`: The payment has been successfully executed and is considered complete.
     *
     * `PAYMENT_STATUS_SETTLED`: The payment has settled and funds are available for use. Payment settlement can only be guaranteed by using Plaid virtual accounts. A payment will typically settle within seconds to several days, depending on which payment rail is used.
     *
     * `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
     *
     * `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.
     *
     * Deprecated:
     * These statuses will be removed in a future release.
     *
     * `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.
     *
     * `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.
     *
     * `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
     * @enum {string}
     */
    PaymentInitiationPaymentStatus:
      | "PAYMENT_STATUS_INPUT_NEEDED"
      | "PAYMENT_STATUS_PROCESSING"
      | "PAYMENT_STATUS_INITIATED"
      | "PAYMENT_STATUS_COMPLETED"
      | "PAYMENT_STATUS_INSUFFICIENT_FUNDS"
      | "PAYMENT_STATUS_FAILED"
      | "PAYMENT_STATUS_BLOCKED"
      | "PAYMENT_STATUS_UNKNOWN"
      | "PAYMENT_STATUS_EXECUTED"
      | "PAYMENT_STATUS_SETTLED"
      | "PAYMENT_STATUS_AUTHORISING"
      | "PAYMENT_STATUS_CANCELLED"
      | "PAYMENT_STATUS_ESTABLISHED"
      | "PAYMENT_STATUS_REJECTED";
    /** @description PaymentInitiationPayment defines a payment initiation payment */
    PaymentInitiationPayment: {
      /** @description The ID of the payment. Like all Plaid identifiers, the `payment_id` is case sensitive. */
      payment_id: string;
      amount: components["schemas"]["PaymentAmount"];
      status: components["schemas"]["PaymentInitiationPaymentStatus"];
      /** @description The ID of the recipient */
      recipient_id: string;
      /** @description A reference for the payment. */
      reference: string;
      /** @description The value of the reference sent to the bank after adjustment to pass bank validation rules. */
      adjusted_reference?: string | null;
      /**
       * Format: date-time
       * @description The date and time of the last time the `status` was updated, in IS0 8601 format
       */
      last_status_update: string;
      schedule?: components["schemas"]["ExternalPaymentScheduleGet"];
      refund_details?: components["schemas"]["ExternalPaymentRefundDetails"];
      bacs: components["schemas"]["SenderBACSNullable"];
      /** @description The International Bank Account Number (IBAN) for the sender, if specified in the `/payment_initiation/payment/create` call. */
      iban: string | null;
      /** @description Refund IDs associated with the payment. */
      refund_ids?: string[];
      /** @description The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests. */
      wallet_id?: string | null;
      scheme?: components["schemas"]["PaymentScheme"];
      adjusted_scheme?: components["schemas"]["PaymentScheme"];
      /** @description The payment consent ID that this payment was initiated with. Is present only when payment was initiated using the payment consent. */
      consent_id?: string | null;
    } & { [key: string]: unknown };
    /** @description PaymentInitiationPaymentTokenCreateRequest defines the request schema for `/payment_initiation/payment/token/create` */
    PaymentInitiationPaymentTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `payment_id` returned from `/payment_initiation/payment/create`. */
      payment_id: string;
    };
    /** @description PaymentInitiationPaymentTokenCreateResponse defines the response schema for `/payment_initiation/payment/token/create` */
    PaymentInitiationPaymentTokenCreateResponse: {
      /** @description A `payment_token` that can be provided to Link initialization to enter the payment initiation flow */
      payment_token: string;
      /**
       * Format: date-time
       * @description The date and time at which the token will expire, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `payment_token` expires after 15 minutes.
       */
      payment_token_expiration_time: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description PaymentInitiationConsentCreateRequest defines the request schema for `/payment_initiation/consent/create` */
    PaymentInitiationConsentCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the recipient the payment consent is for. The created consent can be used to transfer funds to this recipient only. */
      recipient_id: string;
      /** @description A reference for the payment consent. This must be an alphanumeric string with at most 18 characters and must not contain any special characters. */
      reference: string;
      /** @description An array of payment consent scopes. */
      scopes: components["schemas"]["PaymentInitiationConsentScope"][];
      constraints: components["schemas"]["PaymentInitiationConsentConstraints"];
      options?: components["schemas"]["ExternalPaymentInitiationConsentOptions"];
    };
    /** @description PaymentInitiationConsentCreateResponse defines the response schema for `/payment_initiation/consent/create` */
    PaymentInitiationConsentCreateResponse: {
      /** @description A unique ID identifying the payment consent. */
      consent_id: string;
      status: components["schemas"]["PaymentInitiationConsentStatus"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description PaymentInitiationConsentGetRequest defines the request schema for `/payment_initiation/consent/get` */
    PaymentInitiationConsentGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `consent_id` returned from `/payment_initiation/consent/create`. */
      consent_id: string;
    };
    /** @description PaymentInitiationConsentGetResponse defines the response schema for `/payment_initation/consent/get` */
    PaymentInitiationConsentGetResponse: components["schemas"]["PaymentInitiationConsent"] & {
      request_id?: components["schemas"]["RequestID"];
    } & {
      request_id: unknown;
    } & { [key: string]: unknown };
    /** @description PaymentInitiationConsent defines a payment initiation consent. */
    PaymentInitiationConsent: {
      /** @description The consent ID. */
      consent_id: string;
      status: components["schemas"]["PaymentInitiationConsentStatus"];
      /**
       * Format: date-time
       * @description Consent creation timestamp, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      created_at: string;
      /** @description The ID of the recipient the payment consent is for. */
      recipient_id: string;
      /** @description A reference for the payment consent. */
      reference: string;
      constraints: components["schemas"]["PaymentInitiationConsentConstraints"];
      /** @description An array of payment consent scopes. */
      scopes: components["schemas"]["PaymentInitiationConsentScope"][];
    } & { [key: string]: unknown };
    /**
     * @description The status of the payment consent.
     *
     * `UNAUTHORISED`: Consent created, but requires user authorisation.
     *
     * `REJECTED`: Consent authorisation was rejected by the user and/or the bank.
     *
     * `AUTHORISED`: Consent is active and ready to be used.
     *
     * `REVOKED`: Consent has been revoked and can no longer be used.
     *
     * `EXPIRED`: Consent is no longer valid.
     * @enum {string}
     */
    PaymentInitiationConsentStatus:
      | "UNAUTHORISED"
      | "AUTHORISED"
      | "REVOKED"
      | "REJECTED"
      | "EXPIRED";
    /** @description PaymentInitiationConsentRevokeRequest defines the request schema for `/payment_initiation/consent/revoke` */
    PaymentInitiationConsentRevokeRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The consent ID. */
      consent_id: string;
    };
    /** @description PaymentInitiationConsentRevokeResponse defines the response schema for `/payment_initation/consent/revoke` */
    PaymentInitiationConsentRevokeResponse: {
      request_id?: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description PaymentInitiationConsentPaymentExecuteRequest defines the request schema for `/payment_initiation/consent/payment/execute` */
    PaymentInitiationConsentPaymentExecuteRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The consent ID. */
      consent_id: string;
      amount: components["schemas"]["PaymentAmount"];
      idempotency_key: components["schemas"]["ConsentPaymentIdempotencyKey"];
    };
    /** @description PaymentInitiationConsentPaymentExecuteResponse defines the response schema for `/payment_initiation/consent/payment/execute` */
    PaymentInitiationConsentPaymentExecuteResponse: {
      /** @description A unique ID identifying the payment */
      payment_id: string;
      status: components["schemas"]["PaymentInitiationPaymentStatus"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description PaymentInitiationPaymentListRequest defines the request schema for `/payment_initiation/payment/list` */
    PaymentInitiationPaymentListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @description The maximum number of payments to return. If `count` is not specified, a maximum of 10 payments will be returned, beginning with the most recent payment before the cursor (if specified).
       * @default 10
       */
      count?: number | null;
      /**
       * Format: date-time
       * @description A string in RFC 3339 format (i.e. "2019-12-06T22:35:49Z"). Only payments created before the cursor will be returned.
       */
      cursor?: string | null;
      /** @description The consent ID. If specified, only payments, executed using this consent, will be returned. */
      consent_id?: string | null;
    };
    /** @description PaymentInitiationPaymentListResponse defines the response schema for `/payment_initiation/payment/list` */
    PaymentInitiationPaymentListResponse: {
      /** @description An array of payments that have been created, associated with the given `client_id`. */
      payments: components["schemas"]["PaymentInitiationPayment"][];
      /**
       * Format: date-time
       * @description The value that, when used as the optional `cursor` parameter to `/payment_initiation/payment/list`, will return the next unreturned payment as its first payment.
       */
      next_cursor: string | null;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description AssetReportCreateRequest defines the request schema for `/asset_report/create` */
    AssetReportCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description An array of access tokens corresponding to the Items that will be included in the report. The `assets` product must have been initialized for the Items during link; the Assets product cannot be added after initialization. */
      access_tokens: components["schemas"]["AccessToken"][];
      /**
       * @description The maximum integer number of days of history to include in the Asset Report. If using Fannie Mae Day 1 Certainty, `days_requested` must be at least 61 for new originations or at least 31 for refinancings.
       *
       * An Asset Report requested with "Additional History" (that is, with more than 61 days of transaction history) will incur an Additional History fee.
       */
      days_requested: number;
      options?: components["schemas"]["AssetReportCreateRequestOptions"];
    };
    /** @description An optional object to filter `/asset_report/create` results. If provided, must be non-`null`. The optional `user` object is required for the report to be eligible for Fannie Mae's Day 1 Certainty program. */
    AssetReportCreateRequestOptions: {
      /** @description Client-generated identifier, which can be used by lenders to track loan applications. */
      client_report_id?: string | null;
      /** @description URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready. */
      webhook?: string | null;
      /** @description true to return balance and identity earlier as a fast report. Defaults to false if omitted. */
      include_fast_report?: boolean | null;
      /** @description Additional information that can be included in the asset report. Possible values: `"investments"` */
      products?: string[];
      user?: components["schemas"]["AssetReportUser"];
    };
    /** @description AssetReportCreateResponse defines the response schema for `/asset_report/create` */
    AssetReportCreateResponse: {
      asset_report_token: components["schemas"]["AssetReportToken"];
      asset_report_id: components["schemas"]["AssetReportId"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description AssetReportRefreshRequest defines the request schema for `/asset_report/refresh` */
    AssetReportRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_report_token: components["schemas"]["AssetReportRefreshAssetReportToken"];
      /** @description The maximum number of days of history to include in the Asset Report. Must be an integer. If not specified, the value from the original call to `/asset_report/create` will be used. */
      days_requested?: number | null;
      options?: components["schemas"]["AssetReportRefreshRequestOptions"];
    };
    /** @description An optional object to filter `/asset_report/refresh` results. If provided, cannot be `null`. If not specified, the `options` from the original call to `/asset_report/create` will be used. */
    AssetReportRefreshRequestOptions: {
      /** @description Client-generated identifier, which can be used by lenders to track loan applications. */
      client_report_id?: string | null;
      /** @description URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready. */
      webhook?: string | null;
      user?: components["schemas"]["AssetReportUser"];
    };
    /** @description AssetReportRefreshResponse defines the response schema for `/asset_report/refresh` */
    AssetReportRefreshResponse: {
      asset_report_id: components["schemas"]["AssetReportId"];
      asset_report_token: components["schemas"]["AssetReportToken"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description AssetReportRelayRefreshRequest defines the request schema for `/asset_report/relay/refresh` */
    AssetReportRelayRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_relay_token: string;
      /** @description The URL registered to receive webhooks when the Asset Report of a Relay Token has been refreshed. */
      webhook?: string | null;
    };
    /** @description AssetReportRelayRefreshResponse defines the response schema for `/asset_report/relay/refresh` */
    AssetReportRelayRefreshResponse: {
      asset_relay_token: string;
      asset_report_id: components["schemas"]["AssetReportId"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description AssetReportRemoveRequest defines the request schema for `/asset_report/remove` */
    AssetReportRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_report_token: components["schemas"]["AssetReportToken"];
    };
    /** @description AssetReportRemoveResponse defines the response schema for `/asset_report/remove` */
    AssetReportRemoveResponse: {
      /** @description `true` if the Asset Report was successfully removed. */
      removed: boolean;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description AssetReportFilterRequest defines the request schema for `/asset_report/filter` */
    AssetReportFilterRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_report_token: components["schemas"]["AssetReportToken"];
      /** @description The accounts to exclude from the Asset Report, identified by `account_id`. */
      account_ids_to_exclude: string[];
    };
    /** @description AssetReportFilterResponse defines the response schema for `/asset_report/filter` */
    AssetReportFilterResponse: {
      asset_report_token: components["schemas"]["AssetReportToken"];
      asset_report_id: components["schemas"]["AssetReportId"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description AssetReportGetRequest defines the request schema for `/asset_report/get` */
    AssetReportGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_report_token: components["schemas"]["AssetReportToken"];
      /**
       * @description `true` if you would like to retrieve the Asset Report with Insights, `false` otherwise. This field defaults to `false` if omitted.
       * @default false
       */
      include_insights?: boolean;
      /**
       * @description `true` to fetch "fast" version of asset report. Defaults to false if omitted.
       * @default false
       */
      fast_report?: boolean;
    };
    /** @description AssetReportGetResponse defines the response schema for `/asset_report/get` */
    AssetReportGetResponse: {
      report: components["schemas"]["AssetReport"];
      /** @description If the Asset Report generation was successful but identity information cannot be returned, this array will contain information about the errors causing identity information to be missing */
      warnings: components["schemas"]["Warning"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description AssetReportPDFGetRequest defines the request schema for `/asset_report/pdf/get` */
    AssetReportPDFGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_report_token: components["schemas"]["AssetReportToken"];
    };
    /**
     * Format: binary
     * @description AssetReportPDFGetResponse defines the response schema for `/asset_report/pdf/get`
     */
    AssetReportPDFGetResponse: string;
    /** @description AssetReportAuditCopyCreateRequest defines the request schema for `/asset_report/audit_copy/get` */
    AssetReportAuditCopyCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_report_token: components["schemas"]["AssetReportToken"];
      /** @description The `auditor_id` of the third party with whom you would like to share the Asset Report. */
      auditor_id: string;
    };
    /** @description AssetReportAuditCopyCreateResponse defines the response schema for `/asset_report/audit_copy/get` */
    AssetReportAuditCopyCreateResponse: {
      /** @description A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely. */
      audit_copy_token: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description AssetReportAuditCopyRemoveRequest defines the request schema for `/asset_report/audit_copy/remove` */
    AssetReportAuditCopyRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `audit_copy_token` granting access to the Audit Copy you would like to revoke. */
      audit_copy_token: string;
    };
    /** @description AssetReportAuditCopyRemoveResponse defines the response schema for `/asset_report/audit_copy/remove` */
    AssetReportAuditCopyRemoveResponse: {
      /** @description `true` if the Audit Copy was successfully removed. */
      removed: boolean;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description AssetReportRelayCreateRequest defines the request schema for `/asset_report/relay/create` */
    AssetReportRelayCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_report_token: components["schemas"]["AssetReportToken"];
      /** @description The `secondary_client_id` is the client id of the third party with whom you would like to share the Asset Report. */
      secondary_client_id: string;
      /** @description URL to which Plaid will send webhooks when the Secondary Client successfully retrieves an Asset Report by calling `asset_report/relay/get`. */
      webhook?: string | null;
    };
    /** @description AssetReportRelayCreateResponse defines the response schema for `/asset_report/relay/create` */
    AssetReportRelayCreateResponse: {
      /** @description A token that can be shared with a third party to allow them to access the Asset Report. This token should be stored securely. */
      asset_relay_token: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * AssetReportRelayGetRequest
     * @description AssetReportRelayGetRequest defines the request schema for `/asset_report/relay/get`
     */
    AssetReportRelayGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `asset_relay_token` granting access to the Asset Report you would like to get. */
      asset_relay_token: string;
    };
    /** @description AssetReportRelayRemoveRequest defines the request schema for `/asset_report/relay/remove` */
    AssetReportRelayRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `asset_relay_token` you would like to revoke. */
      asset_relay_token: string;
    };
    /** @description AssetReportRelayRemoveResponse defines the response schema for `/asset_report/relay/remove` */
    AssetReportRelayRemoveResponse: {
      /** @description `true` if the Asset Relay token was successfully removed. */
      removed: boolean;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description InvestmentsHoldingsGetRequest defines the request schema for `/investments/holdings/get` */
    InvestmentsHoldingsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      options?: components["schemas"]["InvestmentHoldingsGetRequestOptions"];
    };
    /** @description An optional object to filter `/investments/holdings/get` results. If provided, must not be `null`. */
    InvestmentHoldingsGetRequestOptions: {
      /** @description An array of `account_id`s to retrieve for the Item. An error will be returned if a provided `account_id` is not associated with the Item. */
      account_ids?: string[];
    };
    /** @description InvestmentsHoldingsGetResponse defines the response schema for `/investments/holdings/get` */
    InvestmentsHoldingsGetResponse: {
      /** @description The accounts associated with the Item */
      accounts: components["schemas"]["AccountBase"][];
      /** @description The holdings belonging to investment accounts associated with the Item. Details of the securities in the holdings are provided in the `securities` field. */
      holdings: components["schemas"]["Holding"][];
      /** @description Objects describing the securities held in the accounts associated with the Item. */
      securities: components["schemas"]["Security"][];
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description InvestmentsTransactionsGetRequest defines the request schema for `/investments/transactions/get` */
    InvestmentsTransactionsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /**
       * Format: date
       * @description The earliest date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
       */
      start_date: string;
      /**
       * Format: date
       * @description The most recent date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
       */
      end_date: string;
      options?: components["schemas"]["InvestmentsTransactionsGetRequestOptions"];
    };
    /** @description An optional object to filter `/investments/transactions/get` results. If provided, must be non-`null`. */
    InvestmentsTransactionsGetRequestOptions: {
      /** @description An array of `account_ids` to retrieve for the Item. */
      account_ids?: string[];
      /**
       * @description The number of transactions to fetch.
       *
       * @default 100
       */
      count?: number;
      /**
       * @description The number of transactions to skip when fetching transaction history
       * @default 0
       */
      offset?: number;
    };
    /** @description InvestmentsTransactionsGetResponse defines the response schema for `/investments/transactions/get` */
    InvestmentsTransactionsGetResponse: {
      item: components["schemas"]["Item"];
      /** @description The accounts for which transaction history is being fetched. */
      accounts: components["schemas"]["AccountBase"][];
      /** @description All securities for which there is a corresponding transaction being fetched. */
      securities: components["schemas"]["Security"][];
      /** @description The transactions being fetched */
      investment_transactions: components["schemas"]["InvestmentTransaction"][];
      /** @description The total number of transactions available within the date range specified. If `total_investment_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter.' */
      total_investment_transactions: number;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description ProcessorTokenCreateRequest defines the request schema for `/processor/token/create` */
    ProcessorTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /** @description The `account_id` value obtained from the `onSuccess` callback in Link */
      account_id: string;
      /**
       * @description The processor you are integrating with.
       * @enum {string}
       */
      processor:
        | "dwolla"
        | "galileo"
        | "modern_treasury"
        | "ocrolus"
        | "prime_trust"
        | "vesta"
        | "drivewealth"
        | "vopay"
        | "achq"
        | "check"
        | "checkbook"
        | "circle"
        | "sila_money"
        | "rize"
        | "svb_api"
        | "unit"
        | "wyre"
        | "lithic"
        | "alpaca"
        | "astra"
        | "moov"
        | "treasury_prime"
        | "marqeta"
        | "checkout"
        | "solid"
        | "highnote"
        | "apex_clearing"
        | "gusto";
    };
    /** @description ProcessorTokenCreateResponse defines the response schema for `/processor/token/create` and `/processor/apex/processor_token/create` */
    ProcessorTokenCreateResponse: {
      /** @description The `processor_token` that can then be used by the Plaid partner to make API requests */
      processor_token: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description ProcessorStripeBankAccountTokenCreateRequest defines the request schema for `/processor/stripe/bank_account/create` */
    ProcessorStripeBankAccountTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /** @description The `account_id` value obtained from the `onSuccess` callback in Link */
      account_id: string;
    };
    /** @description ProcessorStripeBankAccountTokenCreateResponse defines the response schema for `/processor/stripe/bank_account/create` */
    ProcessorStripeBankAccountTokenCreateResponse: {
      /** @description A token that can be sent to Stripe for use in making API calls to Plaid */
      stripe_bank_account_token: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description ProcessorApexProcessorTokenCreateRequest defines the request schema for `/processor/apex/processor_token/create` */
    ProcessorApexProcessorTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /** @description The `account_id` value obtained from the `onSuccess` callback in Link */
      account_id: string;
    };
    /** @description DepositSwitchCreateRequest defines the request schema for `/deposit_switch/create` */
    DepositSwitchCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Access token for the target Item, typically provided in the Import Item response. */
      target_access_token: string;
      /** @description Plaid Account ID that specifies the target bank account. This account will become the recipient for a user's direct deposit. */
      target_account_id: string;
      /**
       * CountryCode
       * @description ISO-3166-1 alpha-2 country code standard.
       * @enum {string|null}
       */
      country_code?: ("US" | "CA") | null;
      options?: components["schemas"]["DepositSwitchCreateRequestOptions"];
    };
    /**
     * DepositSwitchCreateRequestOptions
     * @description Options to configure the `/deposit_switch/create` request. If provided, cannot be `null`.
     */
    DepositSwitchCreateRequestOptions: {
      /** @description The URL registered to receive webhooks when the status of a deposit switch request has changed. */
      webhook?: string | null;
      /** @description An array of access tokens corresponding to transaction items to use when attempting to match the user to their Payroll Provider. These tokens must be created by the same client id as the one creating the switch, and have access to the transactions product. */
      transaction_item_access_tokens?: components["schemas"]["AccessToken"][];
    };
    /** @description DepositSwitchCreateResponse defines the response schema for `/deposit_switch/create` */
    DepositSwitchCreateResponse: {
      /** @description ID of the deposit switch. This ID is persisted throughout the lifetime of the deposit switch. */
      deposit_switch_id: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description DepositSwitchTokenCreateRequest defines the request schema for `/deposit_switch/token/create` */
    DepositSwitchTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the deposit switch */
      deposit_switch_id: string;
    };
    /** @description DepositSwitchTokenCreateResponse defines the response schema for `/deposit_switch/token/create` */
    DepositSwitchTokenCreateResponse: {
      /** @description Deposit switch token, used to initialize Link for the Deposit Switch product */
      deposit_switch_token: string;
      /** @description Expiration time of the token, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format */
      deposit_switch_token_expiration_time: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description LinkTokenGetRequest defines the request schema for `/link/token/get` */
    LinkTokenGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description A `link_token` from a previous invocation of `/link/token/create` */
      link_token: string;
    };
    /** @description LinkTokenCreateRequest defines the request schema for `/link/token/create` */
    LinkTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display "This Application" instead. */
      client_name: string;
      /**
       * @description The language that Link should be displayed in.
       *
       * Supported languages are:
       * - English (`'en'`)
       * - French (`'fr'`)
       * - Spanish (`'es'`)
       * - Dutch (`'nl'`)
       * - German(`'de'`)
       *
       * When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied.
       */
      language: string;
      /**
       * @description Specify an array of Plaid-supported country codes using the ISO-3166-1 alpha-2 country code standard. Institutions from all listed countries will be shown.  Supported country codes are: `US`, `CA`, `DE`, `ES`, `FR`, `GB`, `IE`, `IT`, `NL`. For a complete mapping of supported products by country, see https://plaid.com/global/.
       *
       * If Link is launched with multiple country codes, only products that you are enabled for in all countries will be used by Link. Note that while all countries are enabled by default in Sandbox and Development, in Production only US and Canada are enabled by default. To gain access to European institutions in the Production environment, [file a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access) via the Plaid dashboard. If you initialize with a European country code, your users will see the European consent panel during the Link flow.
       *
       * If using a Link customization, make sure the country codes in the customization match those specified in `country_codes`. If both `country_codes` and a Link customization are used, the value in `country_codes` may override the value in the customization.
       *
       * If using the Auth features Instant Match, Same-day Micro-deposits, or Automated Micro-deposits, `country_codes` must be set to `['US']`.
       */
      country_codes: components["schemas"]["CountryCode"][];
      user: components["schemas"]["LinkTokenCreateRequestUser"];
      /**
       * @description List of Plaid product(s) you wish to use. If launching Link in update mode, should be omitted; required otherwise.
       *
       * `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically be initialized when any other product is initialized.
       *
       * The products specified here will determine which institutions will be available to your users in Link. Only institutions that support *all* requested products can be selected; a if a user attempts to select an institution that does not support a listed product, a "Connectivity not supported" error message will appear in Link. To maximize the number of institutions available, initialize Link with the minimal product set required for your use case. Additional products can be added after Link initialization by calling the relevant endpoints. For details and exceptions, see [Choosing when to initialize products](https://plaid.com/docs/link/best-practices/#choosing-when-to-initialize-products).
       *
       * Note that, unless you have opted to disable Instant Match support, institutions that support Instant Match will also be shown in Link if `auth` is specified as a product, even though these institutions do not contain `auth` in their product array.
       *
       * In Production, you will be billed for each product that you specify when initializing Link. Note that a product cannot be removed from an Item once the Item has been initialized with that product. To stop billing on an Item for subscription-based products, such as Liabilities, Investments, and Transactions, remove the Item via `/item/remove`.
       */
      products?: components["schemas"]["Products"][];
      /**
       * @description (Beta) This field has no effect unless you are participating in the Product Scope Transparency beta program.
       * List of additional Plaid product(s) you wish to collect consent for. These products will not be billed until you start using them by calling the relevant endpoints.
       *
       * `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically have consent collected.
       *
       * Institutions that do not support these products will still be shown in Link
       */
      additional_consented_products?: components["schemas"]["Products"][];
      /** @description The destination URL to which any webhooks should be sent. */
      webhook?: string;
      /** @description The `access_token` associated with the Item to update, used when updating or modifying an existing `access_token`. Used when launching Link in update mode, when completing the Same-day (manual) Micro-deposit flow, or (optionally) when initializing Link as part of the Payment Initiation (UK and Europe) flow. */
      access_token?: string;
      /** @description The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the `default` customization will be used. When using a Link customization, the language in the customization must match the language selected via the `language` parameter, and the countries in the customization should match the country codes selected via `country_codes`. */
      link_customization_name?: string;
      /** @description A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. The `redirect_uri` should not contain any query parameters. When used in Production or Development, must be an https URI. To specify any subdomain, use `*` as a wildcard character, e.g. `https://*.example.com/oauth.html`. If `android_package_name` is specified, this field should be left blank.  Note that any redirect URI must also be added to the Allowed redirect URIs list in the [developer dashboard](https://dashboard.plaid.com/team/api). */
      redirect_uri?: string;
      /** @description The name of your app's Android package. Required if using the `link_token` to initialize Link on Android. When creating a `link_token` for initializing Link on other platforms, this field must be left blank. Any package name specified here must also be added to the Allowed Android package names setting on the [developer dashboard](https://dashboard.plaid.com/team/api). */
      android_package_name?: string;
      institution_data?: components["schemas"]["LinkTokenCreateInstitutionData"];
      account_filters?: components["schemas"]["LinkTokenAccountFilters"];
      eu_config?: components["schemas"]["LinkTokenEUConfig"];
      /** @description Used for certain Europe-only configurations, as well as certain legacy use cases in other regions. */
      institution_id?: string;
      payment_initiation?: components["schemas"]["LinkTokenCreateRequestPaymentInitiation"];
      deposit_switch?: components["schemas"]["LinkTokenCreateRequestDepositSwitch"];
      income_verification?: components["schemas"]["LinkTokenCreateRequestIncomeVerification"];
      auth?: components["schemas"]["LinkTokenCreateRequestAuth"];
      transfer?: components["schemas"]["LinkTokenCreateRequestTransfer"];
      update?: components["schemas"]["LinkTokenCreateRequestUpdate"];
      identity_verification?: components["schemas"]["LinkTokenCreateRequestIdentityVerification"];
      /** @description A user token generated using `/user/create`. Any item created during the link session will be associated with the user. */
      user_token?: string;
    };
    /**
     * @description By default, Link will provide limited account filtering: it will only display Institutions that are compatible with all products supplied in the `products` parameter of `/link/token/create`, and, if `auth` is specified in the `products` array, will also filter out accounts other than `checking` and `savings` accounts on the Account Select pane. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `"all"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     *
     * For institutions using OAuth, the filter will not affect the list of accounts shown by the bank in the OAuth window.
     */
    LinkTokenAccountFilters: {
      depository?: components["schemas"]["DepositoryFilter"];
      credit?: components["schemas"]["CreditFilter"];
      loan?: components["schemas"]["LoanFilter"];
      investment?: components["schemas"]["InvestmentFilter"];
    } & { [key: string]: unknown };
    /** @description Configuration parameters for EU flows */
    LinkTokenEUConfig: {
      /** @description If `true`, open Link without an initial UI. Defaults to `false`. */
      headless?: boolean;
    };
    /** @description Specifies options for initializing Link for use with the Payment Initiation (Europe) product. This field is required if `payment_initiation` is included in the `products` array. */
    LinkTokenCreateRequestPaymentInitiation: {
      /** @description The `payment_id` provided by the `/payment_initiation/payment/create` endpoint. */
      payment_id: string;
      /** @description The `consent_id` provided by the `/payment_initiation/consent/create` endpoint. */
      consent_id?: string;
    };
    /** @description Specifies options for initializing Link for use with the Deposit Switch (beta) product. This field is required if `deposit_switch` is included in the `products` array. */
    LinkTokenCreateRequestDepositSwitch: {
      /** @description The `deposit_switch_id` provided by the `/deposit_switch/create` endpoint. */
      deposit_switch_id: string;
    };
    /** @description Specifies options for initializing Link for use with the Transfer product. */
    LinkTokenCreateRequestTransfer: {
      /** @description The `id` returned by the `/transfer/intent/create` endpoint. */
      intent_id?: string;
      /** @description The `payment_profile_id` returned by the `/payment_profile/create` endpoint. */
      payment_profile_id?: string;
    };
    /** @description Specifies user stated income sources for the Income product */
    LinkTokenCreateRequestUserStatedIncomeSource: {
      /** @description The employer corresponding to an income source specified by the user */
      employer?: string;
      category?: components["schemas"]["UserStatedIncomeSourceCategory"];
      /**
       * Format: double
       * @description The income amount paid per cycle for a specified income source
       */
      pay_per_cycle?: number;
      /**
       * Format: double
       * @description The income amount paid annually for a specified income source
       */
      pay_annual?: number;
      pay_type?: components["schemas"]["UserStatedIncomeSourcePayType"];
      pay_frequency?: components["schemas"]["UserStatedIncomeSourceFrequency"];
    };
    /**
     * @description The income category for a specified income source
     * @enum {string}
     */
    UserStatedIncomeSourceCategory:
      | "OTHER"
      | "SALARY"
      | "UNEMPLOYMENT"
      | "CASH"
      | "GIG_ECONOMY"
      | "RENTAL"
      | "CHILD_SUPPORT"
      | "MILITARY"
      | "RETIREMENT"
      | "LONG_TERM_DISABILITY"
      | "BANK_INTEREST";
    /**
     * @description The pay frequency of a specified income source
     * @enum {string}
     */
    UserStatedIncomeSourceFrequency:
      | "UNKNOWN"
      | "WEEKLY"
      | "BIWEEKLY"
      | "SEMI_MONTHLY"
      | "MONTHLY";
    /**
     * @description The pay type - `GROSS`, `NET`, or `UNKNOWN` for a specified income source
     * @enum {string}
     */
    UserStatedIncomeSourcePayType: "UNKNOWN" | "GROSS" | "NET";
    /** @description Specifies options for initializing Link for use with the Auth product. This field can be used to enable or disable extended Auth flows for the resulting Link session. Omitting any field will result in a default that can be configured by your account manager. */
    LinkTokenCreateRequestAuth: {
      /**
       * @description Specifies whether Auth Type Select is enabled for the Link session, allowing the end user to choose between linking instantly or manually prior to selecting their financial institution. Note that this can only be true if `same_day_microdeposits_enabled` is set to true.
       * @default false
       */
      auth_type_select_enabled?: boolean;
      /** @description Specifies whether the Link session is enabled for the Automated Micro-deposits flow. */
      automated_microdeposits_enabled?: boolean;
      /** @description Specifies whether the Link session is enabled for the Instant Match flow. */
      instant_match_enabled?: boolean;
      /** @description Specifies whether the Link session is enabled for the Same Day Micro-deposits flow. */
      same_day_microdeposits_enabled?: boolean;
      /**
       * @deprecated
       * @description This field has been deprecated in favor of `auth_type_select_enabled`.
       * @enum {string}
       */
      flow_type?: "FLEXIBLE_AUTH";
    };
    /** @description Specifies option for initializing Link for use with the Identity Verification product. */
    LinkTokenCreateRequestIdentityVerification: {
      template_id: components["schemas"]["IdentityVerificationTemplateID"];
      consent?: components["schemas"]["IdentityVerificationConsent"];
      gave_consent?: components["schemas"]["IdentityVerificationConsent"];
    };
    /** @description A map containing data used to highlight institutions in Link. */
    LinkTokenCreateInstitutionData: {
      /** @description The routing number of the bank to highlight. */
      routing_number?: string;
    };
    /** @description An object specifying information about the end user who will be linking their account. */
    LinkTokenCreateRequestUser: {
      /** @description A unique ID representing the end user. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. It is currently used as a means of searching logs for the given user in the Plaid Dashboard. */
      client_user_id: string;
      /**
       * @deprecated
       * @description The user's full legal name. Currently used only to support certain legacy flows.
       */
      legal_name?: string;
      /** @description The user's full name. Optional if using the [Identity Verification](https://plaid.com/docs/api/products/identity-verification) product; if not using Identity Verification, this field is not allowed. Users will not be asked for their name when this field is provided. */
      name?: components["schemas"]["UserName"];
      /** @description The user's phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. This field is optional, but required to enable the [returning user experience](https://plaid.com/docs/link/returning-user). */
      phone_number?: string;
      /**
       * Format: date-time
       * @description The date and time the phone number was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This field is optional, but required to enable any [returning user experience](https://plaid.com/docs/link/returning-user).
       *
       *  Only pass a verification time for a phone number that you have verified. If you have performed verification but don’t have the time, you may supply a signal value of the start of the UNIX epoch.
       *
       *  Example: `2020-01-01T00:00:00Z`
       */
      phone_number_verified_time?: string;
      /** @description The user's email address. This field is optional, but required to enable the [pre-authenticated returning user flow](https://plaid.com/docs/link/returning-user/#enabling-the-returning-user-experience). */
      email_address?: string;
      /**
       * Format: date-time
       * @description The date and time the email address was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This is an optional field used in the [returning user experience](https://plaid.com/docs/link/returning-user).
       *
       *  Only pass a verification time for an email address that you have verified. If you have performed verification but don’t have the time, you may supply a signal value of the start of the UNIX epoch.
       *
       *  Example: `2020-01-01T00:00:00Z`
       */
      email_address_verified_time?: string;
      /**
       * @deprecated
       * @description To be provided in the format "ddd-dd-dddd". Not currently used.
       */
      ssn?: string;
      /**
       * Format: date
       * @deprecated
       * @description To be provided in the format "yyyy-mm-dd". Not currently used.
       */
      date_of_birth?: string;
      address?: components["schemas"]["UserAddress"];
      id_number?: components["schemas"]["UserIDNumber"];
    };
    /** @description Specifies options for initializing Link for [update mode](https://plaid.com/docs/link/update-mode). */
    LinkTokenCreateRequestUpdate: {
      /**
       * @description If `true`, enables [update mode with Account Select](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts).
       * @default false
       */
      account_selection_enabled?: boolean;
    };
    /**
     * @description By default, Link will only display account types that are compatible with all products supplied in the `products` parameter of `/link/token/create`. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `"all"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link.
     *
     * For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     *
     * For institutions using OAuth, the filter will not affect the list of institutions or accounts shown by the bank in the OAuth window.
     */
    LinkTokenCreateRequestAccountSubtypes: {
      depository?: components["schemas"]["LinkTokenCreateDepositoryFilter"];
      credit?: components["schemas"]["LinkTokenCreateCreditFilter"];
      loan?: components["schemas"]["LinkTokenCreateLoanFilter"];
      investment?: components["schemas"]["LinkTokenCreateInvestmentFilter"];
    };
    /** @description A filter to apply to `depository`-type accounts */
    LinkTokenCreateDepositoryFilter: {
      account_subtypes?: components["schemas"]["DepositoryAccountSubtypes"];
    } & { [key: string]: unknown };
    /** @description A filter to apply to `credit`-type accounts */
    LinkTokenCreateCreditFilter: {
      account_subtypes?: components["schemas"]["CreditAccountSubtypes"];
    } & { [key: string]: unknown };
    /** @description A filter to apply to `loan`-type accounts */
    LinkTokenCreateLoanFilter: {
      account_subtypes?: components["schemas"]["LoanAccountSubtypes"];
    } & { [key: string]: unknown };
    /** @description A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier). */
    LinkTokenCreateInvestmentFilter: {
      account_subtypes?: components["schemas"]["InvestmentAccountSubtypes"];
    } & { [key: string]: unknown };
    /** @description LinkTokenGetResponse defines the response schema for `/link/token/get` */
    LinkTokenGetResponse: {
      /** @description A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`. */
      link_token: string;
      /**
       * Format: date-time
       * @description The creation timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      created_at: string | null;
      /**
       * Format: date-time
       * @description The expiration timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      expiration: string | null;
      metadata: components["schemas"]["LinkTokenGetMetadataResponse"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description An object specifying the arguments originally provided to the `/link/token/create` call. */
    LinkTokenGetMetadataResponse: {
      /** @description The `products` specified in the `/link/token/create` call. */
      initial_products: components["schemas"]["Products"][];
      /** @description The `webhook` specified in the `/link/token/create` call. */
      webhook: string | null;
      /** @description The `country_codes` specified in the `/link/token/create` call. */
      country_codes: components["schemas"]["CountryCode"][];
      /** @description The `language` specified in the `/link/token/create` call. */
      language: string | null;
      institution_data?: components["schemas"]["LinkTokenCreateInstitutionData"];
      account_filters?: components["schemas"]["AccountFiltersResponse"];
      /** @description The `redirect_uri` specified in the `/link/token/create` call. */
      redirect_uri: string | null;
      /** @description The `client_name` specified in the `/link/token/create` call. */
      client_name: string | null;
    } & { [key: string]: unknown };
    /** @description LinkTokenCreateResponse defines the response schema for `/link/token/create` */
    LinkTokenCreateResponse: {
      /** @description A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`. */
      link_token: string;
      /**
       * Format: date-time
       * @description The expiration date for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `link_token` created to generate a `public_token` that will be exchanged for a new `access_token` expires after 4 hours. A `link_token` created for an existing Item (such as when updating an existing `access_token` by launching Link in update mode) expires after 30 minutes.
       */
      expiration: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues.  Error fields will be `null` if no error has occurred. */
    PlaidError:
      | (components["schemas"]["Error"] & { [key: string]: unknown })
      | null;
    /**
     * Error
     * @description We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues.  Error fields will be `null` if no error has occurred.
     */
    Error:
      | ({
          /**
           * @description A broad categorization of the error. Safe for programmatic use.
           * @enum {string}
           */
          error_type:
            | "INVALID_REQUEST"
            | "INVALID_RESULT"
            | "INVALID_INPUT"
            | "INSTITUTION_ERROR"
            | "RATE_LIMIT_EXCEEDED"
            | "API_ERROR"
            | "ITEM_ERROR"
            | "ASSET_REPORT_ERROR"
            | "RECAPTCHA_ERROR"
            | "OAUTH_ERROR"
            | "PAYMENT_ERROR"
            | "BANK_TRANSFER_ERROR"
            | "INCOME_VERIFICATION_ERROR";
          /** @description The particular error code. Safe for programmatic use. */
          error_code: string;
          /** @description A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use. */
          error_message: string;
          /**
           * @description A user-friendly representation of the error code. `null` if the error is not related to user action.
           *
           * This may change over time and is not safe for programmatic use.
           */
          display_message: string | null;
          /** @description A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks. */
          request_id?: string;
          /**
           * @description In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.
           *
           * `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object.
           */
          causes?: unknown[];
          /** @description The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook. */
          status?: number | null;
          /** @description The URL of a Plaid documentation page with more information about the error */
          documentation_url?: string;
          /** @description Suggested steps for resolving the error */
          suggested_action?: string | null;
        } & { [key: string]: unknown })
      | null;
    /**
     * AccountType
     * @description `investment:` Investment account. In API versions 2018-05-22 and earlier, this type is called `brokerage` instead.
     *
     * `credit:` Credit card
     *
     * `depository:` Depository account
     *
     * `loan:` Loan account
     *
     * `other:` Non-specified account type
     *
     * See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
     * @enum {string}
     */
    AccountType:
      | "investment"
      | "credit"
      | "depository"
      | "loan"
      | "brokerage"
      | "other";
    /**
     * OverrideAccountType
     * @description `investment:` Investment account.
     *
     * `credit:` Credit card
     *
     * `depository:` Depository account
     *
     * `loan:` Loan account
     *
     * `payroll:` Payroll account
     *
     * `other:` Non-specified account type
     *
     * See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
     * @enum {string}
     */
    OverrideAccountType:
      | "investment"
      | "credit"
      | "depository"
      | "loan"
      | "payroll"
      | "other";
    /**
     * Account
     * @description A single account at a financial institution.
     */
    AccountBase: {
      /**
       * @description Plaid’s unique identifier for the account. This value will not change unless Plaid can't reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.
       *
       * The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.
       *
       * If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.
       *
       * Like all Plaid identifiers, the `account_id` is case sensitive.
       */
      account_id: string;
      balances: components["schemas"]["AccountBalance"];
      /** @description The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user. */
      mask: string | null;
      /** @description The name of the account, either assigned by the user or by the financial institution itself */
      name: string;
      /** @description The official name of the account as given by the financial institution */
      official_name: string | null;
      type: components["schemas"]["AccountType"];
      subtype: components["schemas"]["AccountSubtype"];
      /**
       * @description The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.
       *
       * `pending_automatic_verification`: The Item is pending automatic verification
       *
       * `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.
       *
       * `automatically_verified`: The Item has successfully been automatically verified
       *
       * `manually_verified`: The Item has successfully been manually verified
       *
       * `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.
       *
       * `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.
       *
       * @enum {string}
       */
      verification_status?:
        | "automatically_verified"
        | "pending_automatic_verification"
        | "pending_manual_verification"
        | "manually_verified"
        | "verification_expired"
        | "verification_failed";
    } & { [key: string]: unknown };
    /**
     * AccountBalance
     * @description A set of fields describing the balance for an account. Balance information may be cached unless the balance object was returned by `/accounts/balance/get`.
     */
    AccountBalance: {
      /**
       * Format: double
       * @description The amount of funds available to be withdrawn from the account, as determined by the financial institution.
       *
       * For `credit`-type accounts, the `available` balance typically equals the `limit` less the `current` balance, less any pending outflows plus any pending inflows.
       *
       * For `depository`-type accounts, the `available` balance typically equals the `current` balance less any pending outflows plus any pending inflows. For `depository`-type accounts, the `available` balance does not include the overdraft limit.
       *
       * For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the `available` balance is the total cash available to withdraw as presented by the institution.
       *
       * Note that not all institutions calculate the `available`  balance. In the event that `available` balance is unavailable, Plaid will return an `available` balance value of `null`.
       *
       * Available balance may be cached and is not guaranteed to be up-to-date in realtime unless the value was returned by `/accounts/balance/get`.
       *
       * If `current` is `null` this field is guaranteed not to be `null`.
       */
      available: number | null;
      /**
       * Format: double
       * @description The total amount of funds in or owed by the account.
       *
       * For `credit`-type accounts, a positive balance indicates the amount owed; a negative amount indicates the lender owing the account holder.
       *
       * For `loan`-type accounts, the current balance is the principal remaining on the loan, except in the case of student loan accounts at Sallie Mae (`ins_116944`). For Sallie Mae student loans, the account's balance includes both principal and any outstanding interest.
       *
       * For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the current balance is the total value of assets as presented by the institution.
       *
       * Note that balance information may be cached unless the value was returned by `/accounts/balance/get`; if the Item is enabled for Transactions, the balance will be at least as recent as the most recent Transaction update. If you require realtime balance information, use the `available` balance as provided by `/accounts/balance/get`.
       *
       * When returned by `/accounts/balance/get`, this field may be `null`. When this happens, `available` is guaranteed not to be `null`.
       */
      current: number | null;
      /**
       * Format: double
       * @description For `credit`-type accounts, this represents the credit limit.
       *
       * For `depository`-type accounts, this represents the pre-arranged overdraft limit, which is common for current (checking) accounts in Europe.
       *
       * In North America, this field is typically only available for `credit`-type accounts.
       */
      limit: number | null;
      /** @description The ISO-4217 currency code of the balance. Always null if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the balance. Always null if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time that the balance for the given account has been updated
       *
       * This is currently only provided when the `min_last_updated_datetime` is passed when calling `/accounts/balance/get` for `ins_128026` (Capital One).
       */
      last_updated_datetime?: string | null;
    } & { [key: string]: unknown };
    /**
     * AccountSubtype
     * @description See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes.
     * @enum {string|null}
     */
    AccountSubtype:
      | (
          | "401a"
          | "401k"
          | "403B"
          | "457b"
          | "529"
          | "brokerage"
          | "cash isa"
          | "crypto exchange"
          | "education savings account"
          | "ebt"
          | "fixed annuity"
          | "gic"
          | "health reimbursement arrangement"
          | "hsa"
          | "isa"
          | "ira"
          | "lif"
          | "life insurance"
          | "lira"
          | "lrif"
          | "lrsp"
          | "non-taxable brokerage account"
          | "other"
          | "other insurance"
          | "other annuity"
          | "prif"
          | "rdsp"
          | "resp"
          | "rlif"
          | "rrif"
          | "pension"
          | "profit sharing plan"
          | "retirement"
          | "roth"
          | "roth 401k"
          | "rrsp"
          | "sep ira"
          | "simple ira"
          | "sipp"
          | "stock plan"
          | "thrift savings plan"
          | "tfsa"
          | "trust"
          | "ugma"
          | "utma"
          | "variable annuity"
          | "credit card"
          | "paypal"
          | "cd"
          | "checking"
          | "savings"
          | "money market"
          | "prepaid"
          | "auto"
          | "business"
          | "commercial"
          | "construction"
          | "consumer"
          | "home equity"
          | "loan"
          | "mortgage"
          | "overdraft"
          | "line of credit"
          | "student"
          | "cash management"
          | "keogh"
          | "mutual fund"
          | "recurring"
          | "rewards"
          | "safe deposit"
          | "sarsep"
          | "payroll"
          | null
        )
      | null;
    /**
     * NumbersACH
     * @description Identifying information for transferring money to or from a US account via ACH or wire transfer.
     */
    NumbersACH: {
      /** @description The Plaid account ID associated with the account numbers */
      account_id: string;
      /**
       * @description The ACH account number for the account.
       *
       * Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue "tokenized" routing and account numbers, which are not the user's actual account and routing numbers. These tokenized numbers should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will continue to work for ACH deposits, but not withdrawals.
       */
      account: string;
      /** @description The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field. */
      routing: string;
      /** @description The wire transfer routing number for the account, if available */
      wire_routing: string | null;
    } & { [key: string]: unknown };
    /** @description Identifying information for transferring money to or from a US account via ACH or wire transfer. */
    NumbersACHNullable:
      | (components["schemas"]["NumbersACH"] & { [key: string]: unknown })
      | null;
    /**
     * NumbersEFT
     * @description Identifying information for transferring money to or from a Canadian bank account via EFT.
     */
    NumbersEFT: {
      /** @description The Plaid account ID associated with the account numbers */
      account_id: string;
      /** @description The EFT account number for the account */
      account: string;
      /** @description The EFT institution number for the account */
      institution: string;
      /** @description The EFT branch number for the account */
      branch: string;
    } & { [key: string]: unknown };
    /** @description Identifying information for transferring money to or from a Canadian bank account via EFT. */
    NumbersEFTNullable:
      | (components["schemas"]["NumbersEFT"] & { [key: string]: unknown })
      | null;
    /**
     * NumbersInternational
     * @description Identifying information for transferring money to or from an international bank account via wire transfer.
     */
    NumbersInternational: {
      /** @description The Plaid account ID associated with the account numbers */
      account_id: string;
      /** @description The International Bank Account Number (IBAN) for the account */
      iban: string;
      /** @description The Bank Identifier Code (BIC) for the account */
      bic: string;
    } & { [key: string]: unknown };
    /** @description Identifying information for transferring money to or from an international bank account via wire transfer. */
    NumbersInternationalNullable:
      | (components["schemas"]["NumbersInternational"] & {
          [key: string]: unknown;
        })
      | null;
    /**
     * NumbersBACS
     * @description Identifying information for transferring money to or from a UK bank account via BACS.
     */
    NumbersBACS: {
      /** @description The Plaid account ID associated with the account numbers */
      account_id: string;
      /** @description The BACS account number for the account */
      account: string;
      /** @description The BACS sort code for the account */
      sort_code: string;
    } & { [key: string]: unknown };
    /** @description Identifying information for transferring money to or from a UK bank account via BACS. */
    NumbersBACSNullable:
      | (components["schemas"]["NumbersBACS"] & { [key: string]: unknown })
      | null;
    /** @description Account numbers using the International Bank Account Number and BIC/SWIFT code format. */
    NumbersInternationalIBAN:
      | ({
          iban: components["schemas"]["NumbersIBAN"];
          /** @description The Business Identifier Code, also known as SWIFT code, for this bank account. */
          bic: string;
        } & { [key: string]: unknown })
      | null;
    /** @description International Bank Account Number (IBAN). */
    NumbersIBAN: string;
    /** @description International Bank Account Number (IBAN). */
    NumbersIBANNullable: string | null;
    /**
     * RecipientBACS
     * @description An object containing a BACS account number and sort code. If an IBAN is not provided or if you need to accept domestic GBP-denominated payments, BACS data is required.
     */
    RecipientBACS:
      | ({
          /** @description The account number of the account. Maximum of 10 characters. */
          account?: string;
          /** @description The 6-character sort code of the account. */
          sort_code?: string;
        } & { [key: string]: unknown })
      | null;
    /** @description An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required. */
    RecipientBACSNullable:
      | (components["schemas"]["RecipientBACS"] & { [key: string]: unknown })
      | null;
    /** @description An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required. */
    SenderBACSNullable:
      | (components["schemas"]["RecipientBACS"] & { [key: string]: unknown })
      | null;
    /** @description An optional object used to restrict the accounts used for payments. If provided, the end user will be able to send payments only from the specified bank account. */
    PaymentInitiationOptionalRestrictionBacs:
      | (components["schemas"]["RecipientBACS"] & { [key: string]: unknown })
      | null;
    /**
     * RemovedTransaction
     * @description A representation of a removed transaction
     */
    RemovedTransaction: {
      /** @description The ID of the removed transaction. */
      transaction_id?: string;
    };
    /**
     * RequestID
     * @description A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     */
    RequestID: string;
    /**
     * TransactionsRuleDetails
     * @description A representation of transactions rule details.
     */
    TransactionsRuleDetails: {
      field: components["schemas"]["TransactionsRuleField"];
      type: components["schemas"]["TransactionsRuleType"];
      /** @description For TRANSACTION_ID field, provide transaction_id. For NAME field, provide a string pattern. */
      query: string;
    };
    /**
     * TransactionsRuleField
     * @description Transaction field for which the rule is defined.
     * @enum {string}
     */
    TransactionsRuleField: "TRANSACTION_ID" | "NAME";
    /**
     * TransactionsRuleType
     * @description Transaction rule's match type. For TRANSACTION_ID field, EXACT_MATCH is available.
     * Matches are case sensitive.
     *
     * @enum {string}
     */
    TransactionsRuleType: "EXACT_MATCH" | "SUBSTRING_MATCH";
    /**
     * TransactionsCategoryRule
     * @description A representation of a transactions category rule.
     */
    TransactionsCategoryRule: {
      /** @description A unique identifier of the rule created */
      id?: string;
      /** @description A unique identifier of the item the rule was created for */
      item_id?: string;
      /**
       * Format: date-time
       * @description Date and time when a rule was created in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).
       */
      created_at?: string;
      /**
       * @description Personal finance category unique identifier.
       *
       * In the personal finance category taxonomy, this field is represented by the detailed category field.
       */
      personal_finance_category?: string;
      rule_details?: components["schemas"]["TransactionsRuleDetails"];
    };
    /**
     * TransactionBase
     * @description A representation of a transaction
     */
    TransactionBase: {
      /**
       * @deprecated
       * @description Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.
       *
       * `digital:` transactions that took place online.
       *
       * `place:` transactions that were made at a physical location.
       *
       * `special:` transactions that relate to banks, e.g. fees or deposits.
       *
       * `unresolved:` transactions that do not fit into the other three types.
       *
       * @enum {string}
       */
      transaction_type?: "digital" | "place" | "special" | "unresolved";
      /** @description The ID of a posted transaction's associated pending transaction, where applicable. */
      pending_transaction_id?: string | null;
      /**
       * @description The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
       *
       * If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
       */
      category_id?: string | null;
      /**
       * @description A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
       *
       * If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
       */
      category?: string[] | null;
      location?: components["schemas"]["Location"];
      payment_meta?: components["schemas"]["PaymentMeta"];
      /** @description The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts. */
      account_owner?: string | null;
      /**
       * @description The merchant name or transaction description.
       *
       * If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
       */
      name?: string;
      /** @description The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`. */
      original_description?: string | null;
      /** @description The ID of the account in which this transaction occurred. */
      account_id: string;
      /**
       * Format: double
       * @description The settled value of the transaction, denominated in the transactions's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
       */
      amount: number;
      /** @description The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * Format: date
       * @description For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
       */
      date: string;
      /** @description When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled. */
      pending: boolean;
      /** @description The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive. */
      transaction_id: string;
      /** @description The merchant name, as extracted by Plaid from the `name` field. */
      merchant_name?: string | null;
      /** @description The check number of the transaction. This field is only populated for check transactions. */
      check_number?: string | null;
    } & { [key: string]: unknown };
    /**
     * Transaction
     * @description A representation of a transaction
     */
    Transaction: components["schemas"]["TransactionBase"] &
      ({
        /**
         * @description The channel used to make a payment.
         * `online:` transactions that took place online.
         *
         * `in store:` transactions that were made at a physical location.
         *
         * `other:` transactions that relate to banks, e.g. fees or deposits.
         *
         * This field replaces the `transaction_type` field.
         *
         * @enum {string}
         */
        payment_channel: "online" | "in store" | "other";
        /**
         * Format: date
         * @description The date that the transaction was authorized. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ). The `authorized_date` field uses machine learning to determine a transaction date for transactions where the `date_transacted` is not available. If the `date_transacted` field is present and not `null`, the `authorized_date` field will have the same value as the `date_transacted` field.
         */
        authorized_date: string | null;
        /**
         * Format: date-time
         * @description Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).
         *
         * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).
         */
        authorized_datetime: string | null;
        /**
         * Format: date-time
         * @description Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).
         *
         * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).
         */
        datetime: string | null;
        transaction_code: components["schemas"]["TransactionCode"];
        personal_finance_category?: components["schemas"]["PersonalFinanceCategory"];
      } & {
        account_owner: unknown;
        pending_transaction_id: unknown;
        payment_meta: unknown;
        name: unknown;
        location: unknown;
        category_id: unknown;
        category: unknown;
      } & { [key: string]: unknown });
    /**
     * Transaction Location
     * @description A representation of where a transaction took place
     */
    Location: {
      /** @description The street address where the transaction occurred. */
      address: string | null;
      /** @description The city where the transaction occurred. */
      city: string | null;
      /** @description The region or state where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `state`. */
      region: string | null;
      /** @description The postal code where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `zip`. */
      postal_code: string | null;
      /** @description The ISO 3166-1 alpha-2 country code where the transaction occurred. */
      country: string | null;
      /**
       * Format: double
       * @description The latitude where the transaction occurred.
       */
      lat: number | null;
      /**
       * Format: double
       * @description The longitude where the transaction occurred.
       */
      lon: number | null;
      /** @description The merchant defined store number where the transaction occurred. */
      store_number: string | null;
    } & { [key: string]: unknown };
    /**
     * TransactionStream
     * @description A grouping of related transactions
     */
    TransactionStream: {
      /** @description The ID of the account to which the stream belongs */
      account_id: string;
      /** @description A unique id for the stream */
      stream_id: string;
      /** @description The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/#category-overview). */
      category_id: string;
      /** @description A hierarchical array of the categories to which this transaction belongs. See [Categories](https://plaid.com/docs/#category-overview). */
      category: string[];
      /** @description A description of the transaction stream. */
      description: string;
      /** @description The merchant associated with the transaction stream. */
      merchant_name: string | null;
      /**
       * Format: date
       * @description The posted date of the earliest transaction in the stream.
       */
      first_date: string;
      /**
       * Format: date
       * @description The posted date of the latest transaction in the stream.
       */
      last_date: string;
      frequency: components["schemas"]["RecurringTransactionFrequency"];
      /** @description An array of Plaid transaction IDs belonging to the stream, sorted by posted date. */
      transaction_ids: string[];
      average_amount: components["schemas"]["TransactionStreamAmount"];
      last_amount: components["schemas"]["TransactionStreamAmount"];
      /** @description Indicates whether the transaction stream is still live. */
      is_active: boolean;
      status: components["schemas"]["TransactionStreamStatus"];
      personal_finance_category?: components["schemas"]["PersonalFinanceCategory"];
    } & { [key: string]: unknown };
    /**
     * TransactionStreamAmount
     * @description Object with data pertaining to an amount on the transaction stream.
     */
    TransactionStreamAmount: {
      /**
       * Format: double
       * @description Represents the numerical value of an amount.
       */
      amount?: number;
      /**
       * @description The ISO-4217 currency code of the amount. Always `null` if `unofficial_currency_code` is non-`null`.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      iso_currency_code?: string | null;
      /** @description The unofficial currency code of the amount. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries. */
      unofficial_currency_code?: string | null;
    } & { [key: string]: unknown };
    /**
     * RecurringTransactionFrequency
     * @description Describes the frequency of the transaction stream.
     *
     * `WEEKLY`: Assigned to a transaction stream that occurs approximately every week.
     *
     * `BIWEEKLY`: Assigned to a transaction stream that occurs approximately every 2 weeks.
     *
     * `SEMI_MONTHLY`: Assigned to a transaction stream that occurs approximately twice per month. This frequency is typically seen for inflow transaction streams.
     *
     * `MONTHLY`: Assigned to a transaction stream that occurs approximately every month.
     *
     * `UNKNOWN`: Assigned to a transaction stream that does not fit any of the pre-defined frequencies.
     * @enum {string}
     */
    RecurringTransactionFrequency:
      | "UNKNOWN"
      | "WEEKLY"
      | "BIWEEKLY"
      | "SEMI_MONTHLY"
      | "MONTHLY";
    /**
     * TransactionStreamStatus
     * @description The current status of the transaction stream.
     *
     * `MATURE`: A `MATURE` recurring stream should have at least 3 transactions and happen on a regular cadence.
     *
     * `EARLY_DETECTION`: When a recurring transaction first appears in the transaction history and before it fulfills the requirement of a mature stream, the status will be `EARLY_DETECTION`.
     *
     * `TOMBSTONED`: A stream that was previously in the `EARLY_DETECTION` status will move to the `TOMBSTONED` status when no further transactions were found at the next expected date.
     *
     * `UNKNOWN`: A stream is assigned an `UNKNOWN` status when none of the other statuses are applicable.
     * @enum {string}
     */
    TransactionStreamStatus:
      | "UNKNOWN"
      | "MATURE"
      | "EARLY_DETECTION"
      | "TOMBSTONED";
    /**
     * Institution
     * @description Details relating to a specific financial institution
     */
    Institution: {
      /** @description Unique identifier for the institution */
      institution_id: string;
      /** @description The official name of the institution */
      name: string;
      /** @description A list of the Plaid products supported by the institution. Note that only institutions that support Instant Auth will return `auth` in the product array; institutions that do not list `auth` may still support other Auth methods such as Instant Match or Automated Micro-deposit Verification. To identify institutions that support those methods, use the `auth_metadata` object. For more details, see [Full Auth coverage](https://plaid.com/docs/auth/coverage/). */
      products: components["schemas"]["Products"][];
      /** @description A list of the country codes supported by the institution. */
      country_codes: components["schemas"]["CountryCode"][];
      /** @description The URL for the institution's website */
      url?: string | null;
      /** @description Hexadecimal representation of the primary color used by the institution */
      primary_color?: string | null;
      /** @description Base64 encoded representation of the institution's logo */
      logo?: string | null;
      /** @description A partial list of routing numbers associated with the institution. This list is provided for the purpose of looking up institutions by routing number. It is not comprehensive and should never be used as a complete list of routing numbers for an institution. */
      routing_numbers: string[];
      /** @description Indicates that the institution has an OAuth login flow. */
      oauth: boolean;
      status?: components["schemas"]["InstitutionStatus"];
      payment_initiation_metadata?: components["schemas"]["PaymentInitiationMetadata"];
      auth_metadata?: components["schemas"]["AuthMetadata"];
    } & { [key: string]: unknown };
    /**
     * InstitutionStatus
     * @description The status of an institution is determined by the health of its Item logins, Transactions updates, Investments updates, Liabilities updates, Auth requests, Balance requests, Identity requests, Investments requests, and Liabilities requests. A login attempt is conducted during the initial Item add in Link. If there is not enough traffic to accurately calculate an institution's status, Plaid will return null rather than potentially inaccurate data.
     *
     * Institution status is accessible in the Dashboard and via the API using the `/institutions/get_by_id` endpoint with the `include_status` option set to true. Note that institution status is not available in the Sandbox environment.
     */
    InstitutionStatus:
      | ({
          item_logins?: components["schemas"]["ProductStatus"];
          transactions_updates?: components["schemas"]["ProductStatus"];
          auth?: components["schemas"]["ProductStatus"];
          identity?: components["schemas"]["ProductStatus"];
          investments_updates?: components["schemas"]["ProductStatus"];
          liabilities_updates?: components["schemas"]["ProductStatus"];
          liabilities?: components["schemas"]["ProductStatus"];
          investments?: components["schemas"]["ProductStatus"];
          /** @description Details of recent health incidents associated with the institution. */
          health_incidents?: components["schemas"]["HealthIncident"][] | null;
        } & { [key: string]: unknown })
      | null;
    /**
     * CountryCode
     * @description ISO-3166-1 alpha-2 country code standard.
     * @enum {string}
     */
    CountryCode: "US" | "GB" | "ES" | "NL" | "FR" | "IE" | "CA" | "DE" | "IT";
    /**
     * PaymentMeta
     * @description Transaction information specific to inter-bank transfers. If the transaction was not an inter-bank transfer, all fields will be `null`.
     *
     * If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, the `payment_meta` key will always appear, but no data elements are guaranteed. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     */
    PaymentMeta: {
      /** @description The transaction reference number supplied by the financial institution. */
      reference_number: string | null;
      /** @description The ACH PPD ID for the payer. */
      ppd_id: string | null;
      /** @description For transfers, the party that is receiving the transaction. */
      payee: string | null;
      /** @description The party initiating a wire transfer. Will be `null` if the transaction is not a wire transfer. */
      by_order_of: string | null;
      /** @description For transfers, the party that is paying the transaction. */
      payer: string | null;
      /** @description The type of transfer, e.g. 'ACH' */
      payment_method: string | null;
      /** @description The name of the payment processor */
      payment_processor: string | null;
      /** @description The payer-supplied description of the transfer. */
      reason: string | null;
    } & { [key: string]: unknown };
    /**
     * transaction_code
     * @description An identifier classifying the transaction type.
     *
     * This field is only populated for European institutions. For institutions in the US and Canada, this field is set to `null`.
     *
     * `adjustment:` Bank adjustment
     *
     * `atm:` Cash deposit or withdrawal via an automated teller machine
     *
     * `bank charge:` Charge or fee levied by the institution
     *
     * `bill payment`: Payment of a bill
     *
     * `cash:` Cash deposit or withdrawal
     *
     * `cashback:` Cash withdrawal while making a debit card purchase
     *
     * `cheque:` Document ordering the payment of money to another person or organization
     *
     * `direct debit:` Automatic withdrawal of funds initiated by a third party at a regular interval
     *
     * `interest:` Interest earned or incurred
     *
     * `purchase:` Purchase made with a debit or credit card
     *
     * `standing order:` Payment instructed by the account holder to a third party at a regular interval
     *
     * `transfer:` Transfer of money between accounts
     * @enum {string|null}
     */
    TransactionCode:
      | (
          | "adjustment"
          | "atm"
          | "bank charge"
          | "bill payment"
          | "cash"
          | "cashback"
          | "cheque"
          | "direct debit"
          | "interest"
          | "purchase"
          | "standing order"
          | "transfer"
          | null
        )
      | null;
    /**
     * Category
     * @description Information describing a transaction category
     */
    Category: {
      /** @description An identifying number for the category. `category_id` is a Plaid-specific identifier and does not necessarily correspond to merchant category codes. */
      category_id: string;
      /** @description `place` for physical transactions or `special` for other transactions such as bank charges. */
      group: string;
      /** @description A hierarchical array of the categories to which this `category_id` belongs. */
      hierarchy: string[];
    } & { [key: string]: unknown };
    /**
     * PersonalFinanceCategory
     * @description Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases.
     *
     * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
     */
    PersonalFinanceCategory:
      | ({
          /** @description A high level category that communicates the broad category of the transaction. */
          primary: string;
          /** @description A granular category conveying the transaction's intent. This field can also be used as a unique identifier for the category. */
          detailed: string;
        } & { [key: string]: unknown })
      | null;
    /**
     * UserToken
     * @description The user token associated with the User data is being requested for.
     */
    UserToken: string;
    /**
     * AccessToken
     * @description The access token associated with the Item data is being requested for.
     */
    AccessToken: string;
    /** @description The access token associated with the Item data is being requested for. */
    AccessTokenNullable: string | null;
    /** @description The Plaid `access_token` for the account that will be debited or credited. */
    TransferAccessToken: string;
    /** @description The Plaid `access_token` for the account that will be debited or credited. */
    BankTransferAccessToken: string;
    /**
     * APISecret
     * @description Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     */
    APISecret: string;
    /**
     * ClientID
     * @description Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     */
    APIClientID: string;
    /**
     * ScreeningStatusUpdatedWebhook
     * @description Fired when an individual screening status has changed, which can occur manually via the dashboard or during ongoing monitoring.
     */
    ScreeningStatusUpdatedWebhook: {
      /** @description `SCREENING` */
      webhook_type: string;
      /** @description `STATUS_UPDATED` */
      webhook_code: string;
      /** @description The ID of the associated screening. */
      screening_id: unknown;
    } & { [key: string]: unknown };
    /**
     * EntityScreeningStatusUpdatedWebhook
     * @description Fired when an entity screening status has changed, which can occur manually via the dashboard or during ongoing monitoring.
     */
    EntityScreeningStatusUpdatedWebhook: {
      /** @description `ENTITY_SCREENING` */
      webhook_type: string;
      /** @description `STATUS_UPDATED` */
      webhook_code: string;
      /** @description The ID of the associated screening. */
      screening_id: unknown;
    } & { [key: string]: unknown };
    /**
     * IdentityVerificationStepUpdatedWebhook
     * @description Fired when an end user has completed a step of the Identity Verification process.
     */
    IdentityVerificationStepUpdatedWebhook: {
      /** @description `IDENTITY_VERIFCATION` */
      webhook_type: string;
      /** @description `STEP_UPDATED` */
      webhook_code: string;
      /** @description The ID of the associated Identity Verification attempt. */
      identity_verification_id: unknown;
    } & { [key: string]: unknown };
    /**
     * IdentityVerificationRetriedWebhook
     * @description Fired when identity verification has been retried, which can be triggered via the dashboard or the API.
     */
    IdentityVerificationRetriedWebhook: {
      /** @description `IDENTITY_VERIFICATION` */
      webhook_type: string;
      /** @description `RETRIED` */
      webhook_code: string;
      /** @description The ID of the associated Identity Verification attempt. */
      identity_verification_id: unknown;
    } & { [key: string]: unknown };
    /**
     * IdentityVerificationStatusUpdatedWebhook
     * @description Fired when the status of an identity verification has been updated, which can be triggered via the dashboard or the API.
     */
    IdentityVerificationStatusUpdatedWebhook: {
      /** @description `IDENTITY_VERIFICATION` */
      webhook_type: string;
      /** @description `STATUS_UPDATED` */
      webhook_code: string;
      /** @description The ID of the associated Identity Verification attempt. */
      identity_verification_id: unknown;
    } & { [key: string]: unknown };
    /**
     * TransactionsRemovedWebhook
     * @description Fired when transaction(s) for an Item are deleted. The deleted transaction IDs are included in the webhook payload. Plaid will typically check for deleted transaction data several times a day.
     */
    TransactionsRemovedWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `TRANSACTIONS_REMOVED` */
      webhook_code: string;
      error?: components["schemas"]["PlaidError"];
      /** @description An array of `transaction_ids` corresponding to the removed transactions */
      removed_transactions: string[];
      item_id: components["schemas"]["ItemId"];
    } & { [key: string]: unknown };
    /** @description Fired when new transaction data is available for an Item. Plaid will typically check for new transaction data several times a day. */
    DefaultUpdateWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `DEFAULT_UPDATE` */
      webhook_code: string;
      error?: components["schemas"]["PlaidError"];
      /**
       * DefaultUpdateWebhook
       * @description The number of new transactions detected since the last time this webhook was fired.
       */
      new_transactions: number;
      /** @description The `item_id` of the Item the webhook relates to. */
      item_id: string;
    } & { [key: string]: unknown };
    /**
     * SyncUpdatesAvailableWebhook
     * @description Fired when an Item's transactions change. This can be due to any event resulting in new changes, such as an initial 30-day transactions fetch upon the initialization of an Item with transactions, the backfill of historical transactions that occurs shortly after, or when changes are populated from a regularly-scheduled transactions update job. It is recommended to listen for the `SYNC_UPDATES_AVAILABLE` webhook when using the `/transactions/sync` endpoint. Note that when using `/transactions/sync` the older webhooks `INITIAL_UPDATE`, `HISTORICAL_UPDATE`, or `DEFAULT_UPDATE`, which are intended for use with `/transactions/get`, will also continue to be sent in order to maintain backwards compatibility.
     *
     * After receipt of this webhook, the new changes can be fetched for the Item from `/transactions/sync`.
     *
     * Note that to receive this webhook for an Item, `/transactions/sync` must have been called at least once on that Item.
     */
    SyncUpdatesAvailableWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `SYNC_UPDATES_AVAILABLE` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      /** @description Indicates if initial pull information is available. */
      initial_update_complete: boolean;
      /** @description Indicates if historical pull information is available. */
      historical_update_complete: boolean;
    } & { [key: string]: unknown };
    /**
     * RecurringTransactionsUpdateWebhook
     * @description Fired when an Item's recurring transactions data is updated. After receipt of this webhook, the updated data can be fetched from `/transactions/recurring/get`.
     */
    RecurringTransactionsUpdateWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `RECURRING_TRANSACTIONS_UPDATE` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      /** @description A list of `account_ids` for accounts that have new or updated recurring transactions data. */
      account_ids: string[];
    } & { [key: string]: unknown };
    /** @description Fired when a change to identity data has been detected on an Item. */
    IdentityDefaultUpdateWebhook: {
      /** @description `IDENTITY` */
      webhook_type: string;
      /** @description `DEFAULT_UPDATE` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      account_ids_with_updated_identity: components["schemas"]["AccountIdsWithUpdatedIdentity"];
      error: components["schemas"]["PlaidError"];
    } & { [key: string]: unknown };
    /**
     * AccountIdsWithUpdatedIdentity
     * @description An object with keys of `account_id`'s that are mapped to their respective identity attributes that changed.
     *
     * Example: `{ "XMBvvyMGQ1UoLbKByoMqH3nXMj84ALSdE5B58": ["PHONES"] }`
     */
    AccountIdsWithUpdatedIdentity: {
      [key: string]: components["schemas"]["IdentityUpdateTypes"][];
    };
    /**
     * @description The possible types of identity data that may have changed.
     * @enum {string}
     */
    IdentityUpdateTypes: "PHONES" | "ADDRESSES" | "EMAILS" | "NAMES";
    /**
     * HistoricalUpdateWebhook
     * @description Fired when an Item's historical transaction pull is completed and Plaid has prepared as much historical transaction data as possible for the Item. Once this webhook has been fired, transaction data beyond the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.
     */
    HistoricalUpdateWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `HISTORICAL_UPDATE` */
      webhook_code: string;
      error?: components["schemas"]["PlaidError"];
      /** @description The number of new, unfetched transactions available */
      new_transactions: number;
      item_id: components["schemas"]["ItemId"];
    } & { [key: string]: unknown };
    /**
     * InitialUpdateWebhook
     * @description Fired when an Item's initial transaction pull is completed. Once this webhook has been fired, transaction data for the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.
     */
    InitialUpdateWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `INITIAL_UPDATE` */
      webhook_code: string;
      /** @description The error code associated with the webhook. */
      error?: string | null;
      /** @description The number of new, unfetched transactions available. */
      new_transactions: number;
      item_id: components["schemas"]["ItemId"];
    } & { [key: string]: unknown };
    /**
     * PhoneNumber
     * @description A phone number
     */
    PhoneNumber: {
      /** @description The phone number. */
      data: string;
      /** @description When `true`, identifies the phone number as the primary number on an account. */
      primary: boolean;
      /**
       * @description The type of phone number.
       * @enum {string}
       */
      type: "home" | "work" | "office" | "mobile" | "mobile1" | "other";
    } & { [key: string]: unknown };
    /**
     * Email
     * @description An object representing an email address
     */
    Email: {
      /** @description The email address. */
      data: string;
      /** @description When `true`, identifies the email address as the primary email on an account. */
      primary: boolean;
      /**
       * @description The type of email account as described by the financial institution.
       * @enum {string}
       */
      type: "primary" | "secondary" | "other";
    } & { [key: string]: unknown };
    /**
     * Address
     * @description A physical mailing address.
     */
    Address: {
      data: components["schemas"]["AddressData"];
      /** @description When `true`, identifies the address as the primary address on an account. */
      primary?: boolean;
    } & { [key: string]: unknown };
    /** @description A physical mailing address. */
    AddressNullable:
      | (components["schemas"]["Address"] & { [key: string]: unknown })
      | null;
    /** @description Data about the components comprising an address. */
    AddressDataNullable:
      | (components["schemas"]["AddressData"] & { [key: string]: unknown })
      | null;
    /**
     * AddressData
     * @description Data about the components comprising an address.
     */
    AddressData: {
      /** @description The full city name */
      city: string;
      /**
       * @description The region or state. In API versions 2018-05-22 and earlier, this field is called `state`.
       * Example: `"NC"`
       */
      region: string | null;
      /**
       * @description The full street address
       * Example: `"564 Main Street, APT 15"`
       */
      street: string;
      /** @description The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`. */
      postal_code: string | null;
      /** @description The ISO 3166-1 alpha-2 country code */
      country: string | null;
    } & { [key: string]: unknown };
    /**
     * ProcessorToken
     * @description The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     */
    ProcessorToken: string;
    /**
     * HistoricalBalance
     * @description An object representing a balance held by an account in the past
     */
    HistoricalBalance: {
      /**
       * Format: date
       * @description The date of the calculated historical balance, in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD)
       */
      date: string;
      /**
       * Format: double
       * @description The total amount of funds in the account, calculated from the `current` balance in the `balance` object by subtracting inflows and adding back outflows according to the posted date of each transaction.
       *
       * If the account has any pending transactions, historical balance amounts on or after the date of the earliest pending transaction may differ if retrieved in subsequent Asset Reports as a result of those pending transactions posting.
       */
      current: number;
      /** @description The ISO-4217 currency code of the balance. Always `null` if `unofficial_currency_code` is non-`null`. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the balance. Always `null` if `iso_currency_code` is non-`null`.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
    } & { [key: string]: unknown };
    /**
     * Owner
     * @description Data returned from the financial institution about the owner or owners of an account. Only the `names` array must be non-empty.
     */
    Owner: {
      /**
       * @description A list of names associated with the account by the financial institution. These should always be the names of individuals, even for business accounts. If the name of a business is reported, please contact Plaid Support. In the case of a joint account, Plaid will make a best effort to report the names of all account holders.
       *
       * If an Item contains multiple accounts with different owner names, some institutions will report all names associated with the Item in each account's `names` array.
       */
      names: string[];
      /** @description A list of phone numbers associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution. */
      phone_numbers: components["schemas"]["PhoneNumber"][];
      /** @description A list of email addresses associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution. */
      emails: components["schemas"]["Email"][];
      /** @description Data about the various addresses associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution. */
      addresses: components["schemas"]["Address"][];
    } & { [key: string]: unknown };
    /**
     * OwnerOverride
     * @description Data about the owner or owners of an account. Any fields not specified will be filled in with default Sandbox information.
     */
    OwnerOverride: {
      /** @description A list of names associated with the account by the financial institution. These should always be the names of individuals, even for business accounts. Note that the same name data will be used for all accounts associated with an Item. */
      names: string[];
      /** @description A list of phone numbers associated with the account. */
      phone_numbers: components["schemas"]["PhoneNumber"][];
      /** @description A list of email addresses associated with the account. */
      emails: components["schemas"]["Email"][];
      /** @description Data about the various addresses associated with the account. */
      addresses: components["schemas"]["Address"][];
    } & { [key: string]: unknown };
    /**
     * LiabilitiesObject
     * @description An object containing liability accounts
     */
    LiabilitiesObject: {
      /** @description The credit accounts returned. */
      credit: components["schemas"]["CreditCardLiability"][] | null;
      /** @description The mortgage accounts returned. */
      mortgage: components["schemas"]["MortgageLiability"][] | null;
      /** @description The student loan accounts returned. */
      student: components["schemas"]["StudentLoan"][] | null;
    } & { [key: string]: unknown };
    /**
     * StudentLoan
     * @description Contains details about a student loan account
     */
    StudentLoan: {
      /** @description The ID of the account that this liability belongs to. */
      account_id: string | null;
      /** @description The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number). */
      account_number: string | null;
      /** @description The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). */
      disbursement_dates: string[] | null;
      /**
       * Format: date
       * @description The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      expected_payoff_date: string | null;
      /** @description The guarantor of the student loan. */
      guarantor: string | null;
      /**
       * Format: double
       * @description The interest rate on the loan as a percentage.
       */
      interest_rate_percentage: number;
      /** @description `true` if a payment is currently overdue. Availability for this field is limited. */
      is_overdue: boolean | null;
      /**
       * Format: double
       * @description The amount of the last payment.
       */
      last_payment_amount: number | null;
      /**
       * Format: date
       * @description The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      last_payment_date: string | null;
      /**
       * Format: date
       * @description The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      last_statement_issue_date: string | null;
      /** @description The type of loan, e.g., "Consolidation Loans". */
      loan_name: string | null;
      loan_status: components["schemas"]["StudentLoanStatus"];
      /**
       * Format: double
       * @description The minimum payment due for the next billing cycle. There are some exceptions:
       * Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( `ins_116861`), Firstmark (`ins_116295`), Commonbond Firstmark Services (`ins_116950`), Nelnet (`ins_116528`), EdFinancial Services (`ins_116304`), Granite State (`ins_116308`), and Oklahoma Student Loan Authority (`ins_116945`).
       * Firstmark (`ins_116295` ) and Navient (`ins_116248`) will display as $0 if there is an autopay program in effect.
       */
      minimum_payment_amount: number | null;
      /**
       * Format: date
       * @description The due date for the next payment. The due date is `null` if a payment is not expected. A payment is not expected if `loan_status.type` is `deferment`, `in_school`, `consolidated`, `paid in full`, or `transferred`. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      next_payment_due_date: string | null;
      /**
       * Format: date
       * @description The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      origination_date: string | null;
      /**
       * Format: double
       * @description The original principal balance of the loan.
       */
      origination_principal_amount: number | null;
      /**
       * Format: double
       * @description The total dollar amount of the accrued interest balance. For Sallie Mae ( `ins_116944`), this amount is included in the current balance of the loan, so this field will return as `null`.
       */
      outstanding_interest_amount: number | null;
      /** @description The relevant account number that should be used to reference this loan for payments. In the majority of cases, `payment_reference_number` will match a`ccount_number,` but in some institutions, such as Great Lakes (`ins_116861`), it will be different. */
      payment_reference_number: string | null;
      pslf_status: components["schemas"]["PSLFStatus"];
      repayment_plan: components["schemas"]["StudentRepaymentPlan"];
      /** @description The sequence number of the student loan. Heartland ECSI (`ins_116948`) does not make this field available. */
      sequence_number: string | null;
      servicer_address: components["schemas"]["ServicerAddressData"];
      /**
       * Format: double
       * @description The year to date (YTD) interest paid. Availability for this field is limited.
       */
      ytd_interest_paid: number | null;
      /**
       * Format: double
       * @description The year to date (YTD) principal paid. Availability for this field is limited.
       */
      ytd_principal_paid: number | null;
    } & { [key: string]: unknown };
    /**
     * CreditCardLiability
     * @description An object representing a credit card account.
     */
    CreditCardLiability: {
      /** @description The ID of the account that this liability belongs to. */
      account_id: string | null;
      /** @description The various interest rates that apply to the account. APR information is not provided by all card issuers; if APR data is not available, this array will be empty. */
      aprs: components["schemas"]["APR"][];
      /** @description true if a payment is currently overdue. Availability for this field is limited. */
      is_overdue: boolean | null;
      /**
       * Format: double
       * @description The amount of the last payment.
       */
      last_payment_amount: number | null;
      /**
       * Format: date
       * @description The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.
       */
      last_payment_date: string | null;
      /**
       * Format: date
       * @description The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      last_statement_issue_date: string | null;
      /**
       * Format: double
       * @description The total amount owed as of the last statement issued
       */
      last_statement_balance: number | null;
      /**
       * Format: double
       * @description The minimum payment due for the next billing cycle.
       */
      minimum_payment_amount: number | null;
      /**
       * Format: date
       * @description The due date for the next payment. The due date is `null` if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      next_payment_due_date: string | null;
    } & { [key: string]: unknown };
    /**
     * MortgageLiability
     * @description Contains details about a mortgage account.
     */
    MortgageLiability: {
      /** @description The ID of the account that this liability belongs to. */
      account_id: string;
      /** @description The account number of the loan. */
      account_number: string;
      /**
       * Format: double
       * @description The current outstanding amount charged for late payment.
       */
      current_late_fee: number | null;
      /**
       * Format: double
       * @description Total amount held in escrow to pay taxes and insurance on behalf of the borrower.
       */
      escrow_balance: number | null;
      /** @description Indicates whether the borrower has private mortgage insurance in effect. */
      has_pmi: boolean | null;
      /** @description Indicates whether the borrower will pay a penalty for early payoff of mortgage. */
      has_prepayment_penalty: boolean | null;
      interest_rate: components["schemas"]["MortgageInterestRate"];
      /**
       * Format: double
       * @description The amount of the last payment.
       */
      last_payment_amount: number | null;
      /**
       * Format: date
       * @description The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      last_payment_date: string | null;
      /** @description Description of the type of loan, for example `conventional`, `fixed`, or `variable`. This field is provided directly from the loan servicer and does not have an enumerated set of possible values. */
      loan_type_description: string | null;
      /** @description Full duration of mortgage as at origination (e.g. `10 year`). */
      loan_term: string | null;
      /**
       * Format: date
       * @description Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      maturity_date: string | null;
      /**
       * Format: double
       * @description The amount of the next payment.
       */
      next_monthly_payment: number | null;
      /**
       * Format: date
       * @description The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      next_payment_due_date: string | null;
      /**
       * Format: date
       * @description The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      origination_date: string | null;
      /**
       * Format: double
       * @description The original principal balance of the mortgage.
       */
      origination_principal_amount: number | null;
      /**
       * Format: double
       * @description Amount of loan (principal + interest) past due for payment.
       */
      past_due_amount: number | null;
      property_address: components["schemas"]["MortgagePropertyAddress"];
      /**
       * Format: double
       * @description The year to date (YTD) interest paid.
       */
      ytd_interest_paid: number | null;
      /**
       * Format: double
       * @description The YTD principal paid.
       */
      ytd_principal_paid: number | null;
    } & { [key: string]: unknown };
    /**
     * MortgageInterestRate
     * @description Object containing metadata about the interest rate for the mortgage.
     */
    MortgageInterestRate: {
      /**
       * Format: double
       * @description Percentage value (interest rate of current mortgage, not APR) of interest payable on a loan.
       */
      percentage: number | null;
      /** @description The type of interest charged (fixed or variable). */
      type: string | null;
    } & { [key: string]: unknown };
    /**
     * MortgagePropertyAddress
     * @description Object containing fields describing property address.
     */
    MortgagePropertyAddress: {
      /** @description The city name. */
      city: string | null;
      /** @description The ISO 3166-1 alpha-2 country code. */
      country: string | null;
      /** @description The five or nine digit postal code. */
      postal_code: string | null;
      /** @description The region or state (example "NC"). */
      region: string | null;
      /** @description The full street address (example "564 Main Street, Apt 15"). */
      street: string | null;
    } & { [key: string]: unknown };
    /**
     * StudentLoanStatus
     * @description An object representing the status of the student loan
     */
    StudentLoanStatus: {
      /**
       * Format: date
       * @description The date until which the loan will be in its current status. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      end_date: string | null;
      /**
       * @description The status type of the student loan
       * @enum {string|null}
       */
      type:
        | (
            | "cancelled"
            | "charged off"
            | "claim"
            | "consolidated"
            | "deferment"
            | "delinquent"
            | "discharged"
            | "extension"
            | "forbearance"
            | "in grace"
            | "in military"
            | "in school"
            | "not fully disbursed"
            | "other"
            | "paid in full"
            | "refunded"
            | "repayment"
            | "transferred"
          )
        | null;
    } & { [key: string]: unknown };
    /**
     * StudentRepaymentPlan
     * @description An object representing the repayment plan for the student loan
     */
    StudentRepaymentPlan: {
      /** @description The description of the repayment plan as provided by the servicer. */
      description: string | null;
      /**
       * @description The type of the repayment plan.
       * @enum {string|null}
       */
      type:
        | (
            | "extended graduated"
            | "extended standard"
            | "graduated"
            | "income-contingent repayment"
            | "income-based repayment"
            | "interest-only"
            | "other"
            | "pay as you earn"
            | "revised pay as you earn"
            | "standard"
            | null
          )
        | null;
    } & { [key: string]: unknown };
    /**
     * PSLFStatus
     * @description Information about the student's eligibility in the Public Service Loan Forgiveness program. This is only returned if the institution is Fedloan (`ins_116527`).
     */
    PSLFStatus: {
      /**
       * Format: date
       * @description The estimated date borrower will have completed 120 qualifying monthly payments. Returned in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      estimated_eligibility_date: string | null;
      /** @description The number of qualifying payments that have been made. */
      payments_made: number | null;
      /** @description The number of qualifying payments remaining. */
      payments_remaining: number | null;
    } & { [key: string]: unknown };
    /**
     * ServicerAddressData
     * @description The address of the student loan servicer. This is generally the remittance address to which payments should be sent.
     */
    ServicerAddressData: {
      /** @description The full city name */
      city: string | null;
      /**
       * @description The region or state
       * Example: `"NC"`
       */
      region: string | null;
      /**
       * @description The full street address
       * Example: `"564 Main Street, APT 15"`
       */
      street: string | null;
      /** @description The postal code */
      postal_code: string | null;
      /** @description The ISO 3166-1 alpha-2 country code */
      country: string | null;
    } & { [key: string]: unknown };
    /**
     * APR
     * @description Information about the APR on the account.
     */
    APR: {
      /**
       * Format: double
       * @description Annual Percentage Rate applied.
       */
      apr_percentage: number;
      /**
       * @description The type of balance to which the APR applies.
       * @enum {string}
       */
      apr_type:
        | "balance_transfer_apr"
        | "cash_apr"
        | "purchase_apr"
        | "special";
      /**
       * Format: double
       * @description Amount of money that is subjected to the APR if a balance was carried beyond payment due date. How it is calculated can vary by card issuer. It is often calculated as an average daily balance.
       */
      balance_subject_to_apr: number | null;
      /**
       * Format: double
       * @description Amount of money charged due to interest from last statement.
       */
      interest_charge_amount: number | null;
    } & { [key: string]: unknown };
    /**
     * AuthMetadata
     * @description Metadata that captures information about the Auth features of an institution.
     */
    AuthMetadata:
      | ({
          supported_methods: components["schemas"]["AuthSupportedMethods"];
        } & { [key: string]: unknown })
      | null;
    /**
     * AuthSupportedMethods
     * @description Metadata specifically related to which auth methods an institution supports.
     */
    AuthSupportedMethods:
      | ({
          /** @description Indicates if instant auth is supported. */
          instant_auth: boolean;
          /** @description Indicates if instant match is supported. */
          instant_match: boolean;
          /** @description Indicates if automated microdeposits are supported. */
          automated_micro_deposits: boolean;
        } & { [key: string]: unknown })
      | null;
    /**
     * PaymentInitiationMetadata
     * @description Metadata that captures what specific payment configurations an institution supports when making Payment Initiation requests.
     */
    PaymentInitiationMetadata:
      | ({
          /** @description Indicates whether the institution supports payments from a different country. */
          supports_international_payments: boolean;
          /** @description Indicates whether the institution supports SEPA Instant payments. */
          supports_sepa_instant: boolean;
          maximum_payment_amount: components["schemas"]["PaymentInitiationMaximumPaymentAmount"];
          /** @description Indicates whether the institution supports returning refund details when initiating a payment. */
          supports_refund_details: boolean;
          standing_order_metadata: components["schemas"]["PaymentInitiationStandingOrderMetadata"];
        } & { [key: string]: unknown })
      | null;
    /**
     * @description A mapping of currency to maximum payment amount (denominated in the smallest unit of currency) supported by the institution.
     *
     * Example: `{"GBP": "10000"}`
     */
    PaymentInitiationMaximumPaymentAmount: { [key: string]: string };
    /**
     * PaymentInitiationStandingOrderMetadata
     * @description Metadata specifically related to valid Payment Initiation standing order configurations for the institution.
     */
    PaymentInitiationStandingOrderMetadata:
      | ({
          /** @description Indicates whether the institution supports closed-ended standing orders by providing an end date. */
          supports_standing_order_end_date: boolean;
          /** @description This is only applicable to `MONTHLY` standing orders. Indicates whether the institution supports negative integers (-1 to -5) for setting up a `MONTHLY` standing order relative to the end of the month. */
          supports_standing_order_negative_execution_days: boolean;
          /** @description A list of the valid standing order intervals supported by the institution. */
          valid_standing_order_intervals: components["schemas"]["PaymentScheduleInterval"][];
        } & { [key: string]: unknown })
      | null;
    /**
     * PaymentInitiationAddress
     * @description The optional address of the payment recipient.
     */
    PaymentInitiationAddress:
      | ({
          /** @description An array of length 1-2 representing the street address where the recipient is located. Maximum of 70 characters. */
          street: string[];
          /** @description The city where the recipient is located. Maximum of 35 characters. */
          city: string;
          /** @description The postal code where the recipient is located. Maximum of 16 characters. */
          postal_code: string;
          /** @description The ISO 3166-1 alpha-2 country code where the recipient is located. */
          country: string;
        } & { [key: string]: unknown })
      | null;
    /**
     * ExternalPaymentScheduleBase
     * @description The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
     */
    ExternalPaymentScheduleBase:
      | ({
          interval?: components["schemas"]["PaymentScheduleInterval"];
          /**
           * @description The day of the interval on which to schedule the payment.
           *
           * If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).
           *
           * If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.
           */
          interval_execution_day?: number;
          /**
           * Format: date
           * @description A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.
           *
           * If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
           */
          start_date?: string;
          /**
           * Format: date
           * @description A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`.
           * If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
           */
          end_date?: string | null;
          /**
           * Format: date
           * @description The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.
           */
          adjusted_start_date?: string | null;
        } & { [key: string]: unknown })
      | null;
    /**
     * ExternalPaymentScheduleRequest
     * @description The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
     */
    ExternalPaymentScheduleRequest: components["schemas"]["ExternalPaymentScheduleBase"] & {
      [key: string]: unknown;
    } & {
      start_date: unknown;
      interval: unknown;
      interval_execution_day: unknown;
    } & { [key: string]: unknown };
    /**
     * PaymentScheduleInterval
     * @description The frequency interval of the payment.
     * @enum {string}
     */
    PaymentScheduleInterval: "WEEKLY" | "MONTHLY";
    /**
     * @description Payment scheme. If not specified - the default in the region will be used (e.g. `SEPA_CREDIT_TRANSFER` for EU). Using unsupported values will result in a failed payment.
     *
     * `FASTER_PAYMENTS`: Enables payments to move quickly between UK bank accounts. Default value in the UK.
     *
     * `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.
     *
     * `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment within the SEPA area. May involve additional fees and may not be available at some banks.
     * @enum {string|null}
     */
    PaymentScheme:
      | (
          | null
          | "FASTER_PAYMENTS"
          | "SEPA_CREDIT_TRANSFER"
          | "SEPA_CREDIT_TRANSFER_INSTANT"
        )
      | null;
    /**
     * PaymentInitiationConsentScope
     * @description Payment consent scope. Defines possible directions for payments made with the given consent.
     *
     * `ME_TO_ME`: Allows moving money between accounts owned by the same user.
     *
     * `EXTERNAL`: Allows initiating payments from the user's account to third parties.
     * @enum {string}
     */
    PaymentInitiationConsentScope: "ME_TO_ME" | "EXTERNAL";
    /**
     * ExternalPaymentInitiationConsentOptions
     * @description Additional payment consent options
     */
    ExternalPaymentInitiationConsentOptions:
      | ({
          /** @description The EMI (E-Money Institution) wallet that this payment consent is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests. */
          wallet_id?: string | null;
          /** @description When `true`, Plaid will attempt to request refund details from the payee's financial institution.  Support varies between financial institutions and will not always be available.  If refund details could be retrieved, they will be available in the `/payment_initiation/payment/get` response. */
          request_refund_details?: boolean | null;
          /** @description The International Bank Account Number (IBAN) for the payer's account. If provided, the end user will be able to set up payment consent using only the specified bank account. */
          iban?: string | null;
          bacs?: components["schemas"]["PaymentInitiationOptionalRestrictionBacs"];
        } & { [key: string]: unknown })
      | null;
    /**
     * PaymentInitiationConsentConstraints
     * @description Limitations that will be applied to payments initiated using the payment consent.
     */
    PaymentInitiationConsentConstraints: {
      valid_date_time?: components["schemas"]["PaymentConsentValidDateTime"];
      max_payment_amount: components["schemas"]["PaymentConsentMaxPaymentAmount"];
      /** @description A list of amount limitations per period of time. */
      periodic_amounts: components["schemas"]["PaymentConsentPeriodicAmount"][];
    } & { [key: string]: unknown };
    /** @description Maximum amount of a single payment initiated using the payment consent. */
    PaymentConsentMaxPaymentAmount: components["schemas"]["PaymentAmount"];
    /**
     * ConsentPaymentIdempotencyKey
     * @description A random key provided by the client, per unique consent payment. Maximum of 128 characters.
     *
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a consent payment fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single payment is created. If the request was successfully processed, it will prevent any payment that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
     */
    ConsentPaymentIdempotencyKey: string;
    /**
     * PaymentOptions
     * @description Additional payment options
     */
    ExternalPaymentOptions:
      | ({
          /** @description When `true`, Plaid will attempt to request refund details from the payee's financial institution.  Support varies between financial institutions and will not always be available.  If refund details could be retrieved, they will be available in the `/payment_initiation/payment/get` response. */
          request_refund_details?: boolean | null;
          /** @description The International Bank Account Number (IBAN) for the payer's account. If provided, the end user will be able to send payments only from the specified bank account. */
          iban?: string | null;
          bacs?: components["schemas"]["PaymentInitiationOptionalRestrictionBacs"];
          /** @description The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests. */
          wallet_id?: string | null;
          scheme?: components["schemas"]["PaymentScheme"];
        } & { [key: string]: unknown })
      | null;
    /**
     * ExternalPaymentRefundDetails
     * @description Details about external payment refund
     */
    ExternalPaymentRefundDetails: {
      /** @description The name of the account holder. */
      name: string;
      /** @description The International Bank Account Number (IBAN) for the account. */
      iban: string | null;
      bacs: components["schemas"]["RecipientBACSNullable"];
    } | null;
    /**
     * ExternalPaymentScheduleGet
     * @description The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
     */
    ExternalPaymentScheduleGet:
      | (components["schemas"]["ExternalPaymentScheduleBase"] & {
          [key: string]: unknown;
        } & {
          adjusted_start_date: unknown;
          end_date: unknown;
          interval: unknown;
          interval_execution_day: unknown;
          start_date: unknown;
        })
      | null;
    /**
     * Products
     * @description A list of products that an institution can support. All Items must be initialized with at least one product. The Balance product is always available and does not need to be specified during initialization.
     * @enum {string}
     */
    Products:
      | "assets"
      | "auth"
      | "balance"
      | "identity"
      | "investments"
      | "liabilities"
      | "payment_initiation"
      | "identity_verification"
      | "transactions"
      | "credit_details"
      | "income"
      | "income_verification"
      | "deposit_switch"
      | "standing_orders"
      | "transfer"
      | "employment"
      | "recurring_transactions";
    /**
     * ProductStatus
     * @description A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object.
     */
    ProductStatus: {
      /**
       * @deprecated
       * @description This field is deprecated in favor of the `breakdown` object, which provides more granular institution health data.
       *
       * `HEALTHY`: the majority of requests are successful
       * `DEGRADED`: only some requests are successful
       * `DOWN`: all requests are failing
       * @enum {string}
       */
      status: "HEALTHY" | "DEGRADED" | "DOWN";
      /**
       * Format: date-time
       * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) formatted timestamp of the last status change for the institution.
       */
      last_status_change: string;
      breakdown: components["schemas"]["ProductStatusBreakdown"];
    } & { [key: string]: unknown };
    /**
     * StatusBreakdown
     * @description A detailed breakdown of the institution's performance for a request type. The values for `success`, `error_plaid`, and `error_institution` sum to 1.
     */
    ProductStatusBreakdown: {
      /**
       * Format: double
       * @description The percentage of login attempts that are successful, expressed as a decimal.
       */
      success: number;
      /**
       * Format: double
       * @description The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal.
       */
      error_plaid: number;
      /**
       * Format: double
       * @description The percentage of logins that are failing due to an issue in the institution's system, expressed as a decimal.
       */
      error_institution: number;
      /**
       * @description The `refresh_interval` may be `DELAYED` or `STOPPED` even when the success rate is high. This value is only returned for Transactions status breakdowns.
       * @enum {string}
       */
      refresh_interval?: "NORMAL" | "DELAYED" | "STOPPED";
    } & { [key: string]: unknown };
    /**
     * UserCustomPassword
     * @description Custom test accounts are configured with a JSON configuration object formulated according to the schema below. All top level fields are optional. Sending an empty object as a configuration will result in an account configured with random balances and transaction history.
     */
    UserCustomPassword: {
      /** @description The version of the password schema to use, possible values are 1 or 2. The default value is 2. You should only specify 1 if you know it is necessary for your test suite. */
      version?: string | null;
      /**
       * @description A seed, in the form of a string, that will be used to randomly generate account and transaction data, if this data is not specified using the `override_accounts` argument. If no seed is specified, the randomly generated data will be different each time.
       *
       * Note that transactions data is generated relative to the Item's creation date. Different Items created on different dates with the same seed for transactions data will have different dates for the transactions. The number of days between each transaction and the Item creation will remain constant. For example, an Item created on December 15 might show a transaction on December 14. An Item created on December 20, using the same seed, would show that same transaction occurring on December 19.
       */
      seed: string;
      /** @description An array of account overrides to configure the accounts for the Item. By default, if no override is specified, transactions and account data will be randomly generated based on the account type and subtype, and other products will have fixed or empty data. */
      override_accounts: components["schemas"]["OverrideAccounts"][];
      mfa: components["schemas"]["MFA"];
      /** @description You may trigger a reCAPTCHA in Plaid Link in the Sandbox environment by using the recaptcha field. Possible values are `good` or `bad`. A value of `good` will result in successful Item creation and `bad` will result in a `RECAPTCHA_BAD` error to simulate a failed reCAPTCHA. Both values require the reCAPTCHA to be manually solved within Plaid Link. */
      recaptcha: string;
      /**
       * @description An error code to force on Item creation. Possible values are:
       *
       * `"INSTITUTION_NOT_RESPONDING"`
       * `"INSTITUTION_NO_LONGER_SUPPORTED"`
       * `"INVALID_CREDENTIALS"`
       * `"INVALID_MFA"`
       * `"ITEM_LOCKED"`
       * `"ITEM_LOGIN_REQUIRED"`
       * `"ITEM_NOT_SUPPORTED"`
       * `"INVALID_LINK_TOKEN"`
       * `"MFA_NOT_SUPPORTED"`
       * `"NO_ACCOUNTS"`
       * `"PLAID_ERROR"`
       * `"USER_SETUP_REQUIRED"`
       */
      force_error: string;
    } & { [key: string]: unknown };
    /**
     * MFA
     * @description Specifies the multi-factor authentication settings to use with this test account
     */
    MFA: {
      /**
       * @description Possible values are `device`, `selections`, or `questions`.
       *
       * If value is `device`, the MFA answer is `1234`.
       *
       * If value is `selections`, the MFA answer is always the first option.
       *
       * If value is `questions`, the MFA answer is  `answer_<i>_<j>` for the j-th question in the i-th round, starting from 0. For example, the answer to the first question in the second round is `answer_1_0`.
       */
      type: string;
      /** @description Number of rounds of questions. Required if value of `type` is `questions`. */
      question_rounds: number;
      /** @description Number of questions per round. Required if value of `type` is `questions`. If value of type is `selections`, default value is 2. */
      questions_per_round: number;
      /** @description Number of rounds of selections, used if `type` is `selections`. Defaults to 1. */
      selection_rounds: number;
      /** @description Number of available answers per question, used if `type` is `selection`. Defaults to 2. */
      selections_per_question: number;
    } & { [key: string]: unknown };
    /**
     * OverrideAccounts
     * @description Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data.
     */
    OverrideAccounts: {
      type: components["schemas"]["OverrideAccountType"];
      subtype: components["schemas"]["AccountSubtype"];
      /**
       * Format: double
       * @description If provided, the account will start with this amount as the current balance.
       */
      starting_balance: number;
      /**
       * Format: double
       * @description If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.
       */
      force_available_balance: number;
      /** @description ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default. */
      currency: string;
      meta: components["schemas"]["Meta"];
      numbers: components["schemas"]["Numbers"];
      /** @description Specify the list of transactions on the account. */
      transactions: components["schemas"]["TransactionOverride"][];
      holdings?: components["schemas"]["HoldingsOverride"];
      investment_transactions?: components["schemas"]["Investments_TransactionsOverride"];
      identity: components["schemas"]["OwnerOverride"];
      liability: components["schemas"]["LiabilityOverride"];
      inflow_model: components["schemas"]["InflowModel"];
      income?: components["schemas"]["IncomeOverride"];
    } & { [key: string]: unknown };
    /**
     * Meta
     * @description Allows specifying the metadata of the test account
     */
    Meta: {
      /** @description The account's name */
      name: string;
      /** @description The account's official name */
      official_name: string;
      /**
       * Format: double
       * @description The account's limit
       */
      limit: number;
    } & { [key: string]: unknown };
    /**
     * Numbers
     * @description Account and bank identifier number data used to configure the test account. All values are optional.
     */
    Numbers: {
      /** @description Will be used for the account number. */
      account?: string;
      /** @description Must be a valid ACH routing number. */
      ach_routing?: string;
      /** @description Must be a valid wire transfer routing number. */
      ach_wire_routing?: string;
      /** @description EFT institution number. Must be specified alongside `eft_branch`. */
      eft_institution?: string;
      /** @description EFT branch number. Must be specified alongside `eft_institution`. */
      eft_branch?: string;
      /** @description Bank identifier code (BIC). Must be specified alongside `international_iban`. */
      international_bic?: string;
      /** @description International bank account number (IBAN). If no account number is specified via `account`, will also be used as the account number by default. Must be specified alongside `international_bic`. */
      international_iban?: string;
      /** @description BACS sort code */
      bacs_sort_code?: string;
    } & { [key: string]: unknown };
    /**
     * TransactionOverride
     * @description Data to populate as test transaction data. If not specified, random transactions will be generated instead.
     */
    TransactionOverride: {
      /**
       * Format: date
       * @description The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Transactions in Sandbox will move from pending to posted once their transaction date has been reached. If a `date_transacted` is not provided by the institution, a transaction date may be available in the [`authorized_date`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-authorized-date) field.
       */
      date_transacted: string;
      /**
       * Format: date
       * @description The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Posted dates in the past or present will result in posted transactions; posted dates in the future will result in pending transactions.
       */
      date_posted: string;
      /**
       * Format: double
       * @description The transaction amount. Can be negative.
       */
      amount: number;
      /** @description The transaction description. */
      description: string;
      /** @description The ISO-4217 format currency code for the transaction. */
      currency?: string;
    } & { [key: string]: unknown };
    /**
     * SecurityOverride
     * @description Specify the security associated with the holding or investment transaction. When inputting custom security data to the Sandbox, Plaid will perform post-data-retrieval normalization and enrichment. These processes may cause the data returned by the Sandbox to be slightly different from the data you input. An ISO-4217 currency code and a security identifier (`ticker_symbol`, `cusip`, `isin`, or `sedol`) are required.
     */
    SecurityOverride: {
      /** @description 12-character ISIN, a globally unique securities identifier. */
      isin?: string;
      /** @description 9-character CUSIP, an identifier assigned to North American securities. */
      cusip?: string;
      /** @description 7-character SEDOL, an identifier assigned to securities in the UK. */
      sedol?: string;
      /** @description A descriptive name for the security, suitable for display. */
      name?: string;
      /** @description The security’s trading symbol for publicly traded securities, and otherwise a short identifier if available. */
      ticker_symbol?: string;
      /** @description Either a valid `iso_currency_code` or `unofficial_currency_code` */
      currency?: string;
    };
    /**
     * HoldingsOverride
     * @description Specify the holdings on the account.
     */
    HoldingsOverride: {
      /**
       * Format: double
       * @description The last price given by the institution for this security
       */
      institution_price: number;
      /**
       * Format: date
       * @description The date at which `institution_price` was current. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
       */
      institution_price_as_of?: string;
      /**
       * Format: double
       * @description The average original value of the holding. Multiple cost basis values for the same security purchased at different prices are not supported.
       */
      cost_basis?: number;
      /**
       * Format: double
       * @description The total quantity of the asset held, as reported by the financial institution.
       */
      quantity: number;
      /** @description Either a valid `iso_currency_code` or `unofficial_currency_code` */
      currency: string;
      security: components["schemas"]["SecurityOverride"];
    };
    /**
     * Investments_TransactionsOverride
     * @description Specify the list of investments transactions on the account.
     */
    Investments_TransactionsOverride: {
      /**
       * Format: date
       * @description Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
       */
      date: string;
      /** @description The institution's description of the transaction. */
      name: string;
      /**
       * Format: double
       * @description The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell.
       */
      quantity: number;
      /**
       * Format: double
       * @description The price of the security at which this transaction occurred.
       */
      price: number;
      /**
       * Format: double
       * @description The combined value of all fees applied to this transaction.
       */
      fees?: number;
      /**
       * @description The type of the investment transaction. Possible values are:
       * `buy`: Buying an investment
       * `sell`: Selling an investment
       * `cash`: Activity that modifies a cash position
       * `fee`: A fee on the account
       * `transfer`: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
       */
      type: string;
      /** @description Either a valid `iso_currency_code` or `unofficial_currency_code` */
      currency: string;
      security?: components["schemas"]["SecurityOverride"];
    };
    /**
     * LiabilityOverride
     * @description Used to configure Sandbox test data for the Liabilities product
     */
    LiabilityOverride: {
      /** @description The type of the liability object, either `credit` or `student`. Mortgages are not currently supported in the custom Sandbox. */
      type: string;
      /**
       * Format: double
       * @description The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if `type` is `credit`.
       */
      purchase_apr: number;
      /**
       * Format: double
       * @description The cash APR percentage value. Can only be set if `type` is `credit`.
       */
      cash_apr: number;
      /**
       * Format: double
       * @description The balance transfer APR percentage value. Can only be set if `type` is `credit`. Can only be set if `type` is `credit`.
       */
      balance_transfer_apr: number;
      /**
       * Format: double
       * @description The special APR percentage value. Can only be set if `type` is `credit`.
       */
      special_apr: number;
      /**
       * Format: double
       * @description Override the `last_payment_amount` field. Can only be set if `type` is `credit`.
       */
      last_payment_amount: number;
      /**
       * Format: double
       * @description Override the `minimum_payment_amount` field. Can only be set if `type` is `credit` or `student`.
       */
      minimum_payment_amount: number;
      /** @description Override the `is_overdue` field */
      is_overdue: boolean;
      /**
       * Format: date
       * @description The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if `type` is `student`.
       */
      origination_date: string;
      /**
       * Format: double
       * @description The original loan principal. Can only be set if `type` is `student`.
       */
      principal: number;
      /**
       * Format: double
       * @description The interest rate on the loan as a percentage. Can only be set if `type` is `student`.
       */
      nominal_apr: number;
      /** @description If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if `type` is `student`. */
      interest_capitalization_grace_period_months: number;
      repayment_model: components["schemas"]["StudentLoanRepaymentModel"];
      /**
       * Format: date
       * @description Override the `expected_payoff_date` field. Can only be set if `type` is `student`.
       */
      expected_payoff_date: string;
      /** @description Override the `guarantor` field. Can only be set if `type` is `student`. */
      guarantor: string;
      /** @description Override the `is_federal` field. Can only be set if `type` is `student`. */
      is_federal: boolean;
      /** @description Override the `loan_name` field. Can only be set if `type` is `student`. */
      loan_name: string;
      loan_status: components["schemas"]["StudentLoanStatus"];
      /** @description Override the `payment_reference_number` field. Can only be set if `type` is `student`. */
      payment_reference_number: string;
      pslf_status: components["schemas"]["PSLFStatus"];
      /** @description Override the `repayment_plan.description` field. Can only be set if `type` is `student`. */
      repayment_plan_description: string;
      /** @description Override the `repayment_plan.type` field. Can only be set if `type` is `student`. Possible values are: `"extended graduated"`, `"extended standard"`, `"graduated"`, `"income-contingent repayment"`, `"income-based repayment"`, `"interest only"`, `"other"`, `"pay as you earn"`, `"revised pay as you earn"`, or `"standard"`. */
      repayment_plan_type: string;
      /** @description Override the `sequence_number` field. Can only be set if `type` is `student`. */
      sequence_number: string;
      servicer_address: components["schemas"]["Address"];
    } & { [key: string]: unknown };
    /**
     * StudentLoanRepaymentModel
     * @description Student loan repayment information used to configure Sandbox test data for the Liabilities product
     */
    StudentLoanRepaymentModel: {
      /** @description The only currently supported value for this field is `standard`. */
      type: string;
      /** @description Configures the number of months before repayment starts. */
      non_repayment_months: number;
      /** @description Configures the number of months of repayments before the loan is paid off. */
      repayment_months: number;
    } & { [key: string]: unknown };
    /**
     * InflowModel
     * @description The `inflow_model` allows you to model a test account that receives regular income or make regular payments on a loan. Any transactions generated by the `inflow_model` will appear in addition to randomly generated test data or transactions specified by `override_accounts`.
     */
    InflowModel: {
      /**
       * @description Inflow model. One of the following:
       *
       * `none`: No income
       *
       * `monthly-income`: Income occurs once per month `monthly-balance-payment`: Pays off the balance on a liability account at the given statement day of month.
       *
       * `monthly-interest-only-payment`: Makes an interest-only payment on a liability account at the given statement day of month.
       *
       * Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type `credit` with subtype `credit` or `paypal`, and account type `loan` with subtype `student` or `mortgage`.
       */
      type: string;
      /**
       * Format: double
       * @description Amount of income per month. This value is required if `type` is `monthly-income`.
       */
      income_amount: number;
      /** @description Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`. */
      payment_day_of_month: number;
      /** @description The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`. */
      transaction_name: string;
      /** @description Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if `type` is `monthly-balance-payment` or `monthly-interest-only-payment`. */
      statement_day_of_month: string;
    } & { [key: string]: unknown };
    /**
     * IncomeOverride
     * @description Specify payroll data on the account.
     */
    IncomeOverride: {
      /** @description A list of paystubs associated with the account. */
      paystubs?: components["schemas"]["PaystubOverride"][];
    };
    /**
     * PaystubOverride
     * @description An object representing data from a paystub.
     */
    PaystubOverride: {
      employer?: components["schemas"]["PaystubOverrideEmployer"];
      employee?: components["schemas"]["PaystubOverrideEmployee"];
      income_breakdown?: components["schemas"]["IncomeBreakdown"][];
      pay_period_details?: components["schemas"]["PayPeriodDetails"];
    };
    /** @description The employer on the paystub. */
    PaystubOverrideEmployer: {
      /** @description The name of the employer. */
      name?: string;
    };
    /** @description The employee on the paystub. */
    PaystubOverrideEmployee: {
      /** @description The name of the employee. */
      name?: string;
      address?: components["schemas"]["PaystubOverrideEmployeeAddress"];
    };
    /** @description The address of the employee. */
    PaystubOverrideEmployeeAddress: {
      /** @description The full city name. */
      city?: string;
      /**
       * @description The region or state
       * Example: `"NC"`
       */
      region?: string;
      /**
       * @description The full street address
       * Example: `"564 Main Street, APT 15"`
       */
      street?: string;
      /** @description 5 digit postal code. */
      postal_code?: string;
      /** @description The country of the address. */
      country?: string;
    };
    /**
     * ItemId
     * @description The `item_id` of the Item associated with this webhook, warning, or error
     */
    ItemId: string;
    /**
     * UserId
     * @description The Plaid `user_id` of the User associated with this webhook, warning, or error.
     */
    UserId: string;
    /**
     * AutomaticallyVerifiedWebhook
     * @description Fired when an Item is verified via automated micro-deposits. We recommend communicating to your users when this event is received to notify them that their account is verified and ready for use.
     */
    AutomaticallyVerifiedWebhook: {
      /** @description `AUTH` */
      webhook_type: string;
      /** @description `AUTOMATICALLY_VERIFIED` */
      webhook_code: string;
      /** @description The `account_id` of the account associated with the webhook */
      account_id: string;
      item_id: components["schemas"]["ItemId"];
    } & { [key: string]: unknown };
    /**
     * JWTHeader
     * @description A JWT Header, used for webhook validation
     */
    JWTHeader: {
      id: string;
    } & { [key: string]: unknown };
    /**
     * VerificationExpiredWebhook
     * @description Fired when an Item was not verified via automated micro-deposits after seven days since the automated micro-deposit was made.
     */
    VerificationExpiredWebhook: {
      /** @description `AUTH` */
      webhook_type: string;
      /** @description `VERIFICATION_EXPIRED` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      /** @description The `account_id` of the account associated with the webhook */
      account_id: string;
    } & { [key: string]: unknown };
    /**
     * WebhookUpdateAcknowledgedWebhook
     * @description Fired when an Item's webhook is updated. This will be sent to the newly specified webhook.
     */
    WebhookUpdateAcknowledgedWebhook: {
      /** @description `ITEM` */
      webhook_type: string;
      /** @description `WEBHOOK_UPDATE_ACKNOWLEDGED` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      /** @description The new webhook URL */
      new_webhook_url: string;
      error?: components["schemas"]["PlaidError"];
    } & { [key: string]: unknown };
    /**
     * PendingExpirationWebhook
     * @description Fired when an Item’s access consent is expiring in 7 days. Some Items have explicit expiration times and we try to relay this when possible to reduce service disruption. This can be resolved by having the user go through Link’s update mode.
     */
    PendingExpirationWebhook: {
      /** @description `ITEM` */
      webhook_type: string;
      /** @description `PENDING_EXPIRATION` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      /**
       * Format: date-time
       * @description The date and time at which the Item's access consent will expire, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format
       */
      consent_expiration_time: string;
    } & { [key: string]: unknown };
    /**
     * ItemErrorWebhook
     * @description Fired when an error is encountered with an Item. The error can be resolved by having the user go through Link’s update mode.
     */
    ItemErrorWebhook: {
      /** @description `ITEM` */
      webhook_type: string;
      /** @description `ERROR` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      error: components["schemas"]["PlaidError"];
    } & { [key: string]: unknown };
    /**
     * ItemProductReadyWebhook
     * @description Fired once Plaid calculates income from an Item.
     */
    ItemProductReadyWebhook: {
      /** @description `INCOME` */
      webhook_type: string;
      /** @description `PRODUCT_READY` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      error?: components["schemas"]["PlaidError"];
    } & { [key: string]: unknown };
    /**
     * Recaptcha_RequiredError
     * @description The request was flagged by Plaid's fraud system, and requires additional verification to ensure they are not a bot.
     */
    Recaptcha_RequiredError: {
      /** @description RECAPTCHA_ERROR */
      error_type: string;
      /** @description RECAPTCHA_REQUIRED */
      error_code: string;
      display_message: string;
      /** @description 400 */
      http_code: string;
      /** @description Your user will be prompted to solve a Google reCAPTCHA challenge in the Link Recaptcha pane. If they solve the challenge successfully, the user's request is resubmitted and they are directed to the next Item creation step. */
      link_user_experience: string;
      /** @description Plaid's fraud system detects abusive traffic and considers a variety of parameters throughout Item creation requests. When a request is considered risky or possibly fraudulent, Link presents a reCAPTCHA for the user to solve. */
      common_causes: string;
      /**
       * @description Link will automatically guide your user through reCAPTCHA verification. As a general rule, we recommend instrumenting basic fraud monitoring to detect and protect your website from spam and abuse.
       *
       * If your user cannot verify their session, please submit a Support ticket with the following identifiers: `link_session_id` or `request_id`
       */
      troubleshooting_steps: string;
    } & { [key: string]: unknown };
    /**
     * BankTransfersEventsUpdateWebhook
     * @description Fired when new bank transfer events are available. Receiving this webhook indicates you should fetch the new events from `/bank_transfer/event/sync`.
     */
    BankTransfersEventsUpdateWebhook: {
      /** @description `BANK_TRANSFERS` */
      webhook_type: string;
      /** @description `BANK_TRANSFERS_EVENTS_UPDATE` */
      webhook_code: string;
    } & { [key: string]: unknown };
    /**
     * TransferEventsUpdateWebhook
     * @description Fired when new transfer events are available. Receiving this webhook indicates you should fetch the new events from `/transfer/event/sync`.
     */
    TransferEventsUpdateWebhook: {
      /** @description `TRANSFER` */
      webhook_type: string;
      /** @description `TRANSFER_EVENTS_UPDATE` */
      webhook_code: string;
    } & { [key: string]: unknown };
    /**
     * TransactionsUpdateInvestmentsWebhook
     * @description Fired when new or canceled transactions have been detected on an investment account.
     */
    InvestmentsDefaultUpdateWebhook: {
      /** @description `INVESTMENTS_TRANSACTIONS` */
      webhook_type: string;
      /** @description `DEFAULT_UPDATE` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      error?: components["schemas"]["PlaidError"];
      /** @description The number of new transactions reported since the last time this webhook was fired. */
      new_investments_transactions: number;
      /** @description The number of canceled transactions reported since the last time this webhook was fired. */
      canceled_investments_transactions: number;
    } & { [key: string]: unknown };
    /**
     * HoldingsDefaultUpdateWebhook
     * @description Fired when new or updated holdings have been detected on an investment account. The webhook typically fires once per day, after market close, in response to any newly added holdings or price changes to existing holdings.
     */
    HoldingsDefaultUpdateWebhook: {
      /** @description `HOLDINGS` */
      webhook_type: string;
      /** @description `DEFAULT_UPDATE` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      error?: components["schemas"]["PlaidError"];
      /** @description The number of new holdings reported since the last time this webhook was fired. */
      new_holdings: number;
      /** @description The number of updated holdings reported since the last time this webhook was fired. */
      updated_holdings: number;
    } & { [key: string]: unknown };
    /**
     * LiabilitiesDefaultUpdateWebhook
     * @description The webhook of type `LIABILITIES` and code `DEFAULT_UPDATE` will be fired when new or updated liabilities have been detected on a liabilities item.
     */
    LiabilitiesDefaultUpdateWebhook: {
      /** @description `LIABILITIES` */
      webhook_type: string;
      /** @description `DEFAULT_UPDATE` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      error: components["schemas"]["PlaidError"];
      /** @description An array of `account_id`'s for accounts that contain new liabilities.' */
      account_ids_with_new_liabilities: string[];
      account_ids_with_updated_liabilities: components["schemas"]["LiabilitiesAccountIdsWithUpdatedLiabilities"];
    };
    /**
     * @description An object with keys of `account_id`'s that are mapped to their respective liabilities fields that changed.
     *
     * Example: `{ "XMBvvyMGQ1UoLbKByoMqH3nXMj84ALSdE5B58": ["past_amount_due"] }`
     */
    LiabilitiesAccountIdsWithUpdatedLiabilities: { [key: string]: string[] };
    /**
     * AssetsProductReadyWebhook
     * @description Fired when the Asset Report has been generated and `/asset_report/get` is ready to be called.  If you attempt to retrieve an Asset Report before this webhook has fired, you’ll receive a response with the HTTP status code 400 and a Plaid error code of `PRODUCT_NOT_READY`.
     */
    AssetsProductReadyWebhook: {
      /** @description `ASSETS` */
      webhook_type: string;
      /** @description `PRODUCT_READY` */
      webhook_code: string;
      /** @description The `asset_report_id` that can be provided to `/asset_report/get` to retrieve the Asset Report. */
      asset_report_id: string;
    } & { [key: string]: unknown };
    /**
     * AssetsErrorWebhook
     * @description Fired when Asset Report generation has failed. The resulting `error` will have an `error_type` of `ASSET_REPORT_ERROR`.
     */
    AssetsErrorWebhook: {
      /** @description `ASSETS` */
      webhook_type: string;
      /** @description `ERROR` */
      webhook_code: string;
      error: components["schemas"]["PlaidError"];
      /** @description The ID associated with the Asset Report. */
      asset_report_id: string;
    } & { [key: string]: unknown };
    /**
     * AssetsRelayWebhook
     * @description Fired when the Secondary Client successfully retrieves an Asset Report by calling `asset_report/relay/get`.
     */
    AssetsRelayWebhook: {
      /** @description `ASSETS` */
      webhook_type: string;
      /** @description `RELAY_EVENT` */
      webhook_code: string;
      relay_event: components["schemas"]["RelayEvent"];
      /** @description The id of the client with whom the Asset Report is being shared. */
      secondary_client_id: string;
      /** @description The `asset_relay_token` that was created by calling `/asset_report/relay/create. */
      asset_relay_token: string;
      /** @description The `asset_report_id` that can be provided to `/asset_report/relay/get` to retrieve the Asset Report. */
      asset_report_id: string;
    } & { [key: string]: unknown };
    /**
     * RelayEventName
     * @description The webhook code indicating which endpoint was called. It can be one of `GET_CALLED`, `REFRESH_CALLED` or `AUDIT_COPY_CREATE_CALLED`.
     * @enum {string}
     */
    RelayEvent: "GET_CALLED" | "REFRESH_CALLED" | "AUDIT_COPY_CREATE_CALLED";
    /**
     * Cause
     * @description An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items.
     */
    Cause: components["schemas"]["PlaidError"] & {
      item_id?: components["schemas"]["ItemId"];
    } & {
      item_id: unknown;
      error_type: unknown;
      error_code: unknown;
      error_message: unknown;
      display_message: unknown;
    } & { [key: string]: unknown };
    /**
     * Warning
     * @description It is possible for an Asset Report to be returned with missing account owner information. In such cases, the Asset Report will contain warning data in the response, indicating why obtaining the owner information failed.
     */
    Warning: {
      /** @description The warning type, which will always be `ASSET_REPORT_WARNING` */
      warning_type: string;
      /**
       * @description The warning code identifies a specific kind of warning. Currently, the only possible warning code is `OWNERS_UNAVAILABLE`, which indicates that account-owner information is not available.
       * @enum {string}
       */
      warning_code: "OWNERS_UNAVAILABLE";
      cause: components["schemas"]["Cause"];
    } & { [key: string]: unknown };
    /**
     * @description The ISO-4217 currency code of the payment. For standing orders and payment consents, `"GBP"` must be used.
     * @enum {string}
     */
    PaymentAmountCurrency:
      | "GBP"
      | "EUR"
      | "PLN"
      | "SEK"
      | "DKK"
      | "NOK"
      | "CHF"
      | "CZK";
    /**
     * PaymentAmount
     * @description The amount and currency of a payment
     */
    PaymentAmount: {
      currency: components["schemas"]["PaymentAmountCurrency"];
      /**
       * Format: double
       * @description The amount of the payment. Must contain at most two digits of precision e.g. `1.23`. Minimum accepted value is `1`.
       */
      value: number;
    } & { [key: string]: unknown };
    /**
     * PaymentConsentValidDateTime
     * @description Life span for the payment consent. After the `to` date the payment consent expires and can no longer be used for payment initiation.
     */
    PaymentConsentValidDateTime:
      | ({
          /**
           * Format: date-time
           * @description The date and time from which the consent should be active, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
           */
          from?: string | null;
          /**
           * Format: date-time
           * @description The date and time at which the consent expires, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
           */
          to?: string | null;
        } & { [key: string]: unknown })
      | null;
    /**
     * PaymentConsentPeriodicAmount
     * @description Defines consent payments limitations per period.
     */
    PaymentConsentPeriodicAmount: {
      amount: components["schemas"]["PaymentConsentPeriodicAmountAmount"];
      interval: components["schemas"]["PaymentConsentPeriodicInterval"];
      alignment: components["schemas"]["PaymentConsentPeriodicAlignment"];
    } & { [key: string]: unknown };
    /** @description Maximum cumulative amount for all payments in the specified interval. */
    PaymentConsentPeriodicAmountAmount: components["schemas"]["PaymentAmount"];
    /**
     * @description Payment consent periodic interval.
     * @enum {string}
     */
    PaymentConsentPeriodicInterval: "DAY" | "WEEK" | "MONTH" | "YEAR";
    /**
     * @description Where the payment consent period should start.
     *
     * `CALENDAR`: line up with a calendar.
     *
     * `CONSENT`: on the date of consent creation.
     * @enum {string}
     */
    PaymentConsentPeriodicAlignment: "CALENDAR" | "CONSENT";
    /**
     * AssetReportUser
     * @description The user object allows you to provide additional information about the user to be appended to the Asset Report. All fields are optional. The `first_name`, `last_name`, and `ssn` fields are required if you would like the Report to be eligible for Fannie Mae’s Day 1 Certainty™ program.
     */
    AssetReportUser: {
      /** @description An identifier you determine and submit for the user. */
      client_user_id?: string | null;
      /** @description The user's first name. Required for the Fannie Mae Day 1 Certainty™ program. */
      first_name?: string | null;
      /** @description The user's middle name */
      middle_name?: string | null;
      /** @description The user's last name.  Required for the Fannie Mae Day 1 Certainty™ program. */
      last_name?: string | null;
      /**
       * @description The user's Social Security Number. Required for the Fannie Mae Day 1 Certainty™ program.
       *
       * Format: "ddd-dd-dddd"
       */
      ssn?: string | null;
      /** @description The user's phone number, in E.164 format: +{countrycode}{number}. For example: "+14151234567". Phone numbers provided in other formats will be parsed on a best-effort basis. */
      phone_number?: string | null;
      /** @description The user's email address. */
      email?: string | null;
    } & { [key: string]: unknown };
    /**
     * AssetReportId
     * @description A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
     */
    AssetReportId: string;
    /**
     * AssetReportToken
     * @description A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
     */
    AssetReportToken: string;
    /**
     * AssetReportRefreshAssetReportToken
     * @description The `asset_report_token` returned by the original call to `/asset_report/create`
     */
    AssetReportRefreshAssetReportToken: string;
    /**
     * StandaloneCurrencyCodeList
     * @description The following currency codes are supported by Plaid.
     */
    StandaloneCurrencyCodeList: {
      /** @description Plaid supports all ISO 4217 currency codes. */
      iso_currency_code: string;
      unofficial_currency_code: components["schemas"]["UnofficialCurrencyCodeList"];
    } & { [key: string]: unknown };
    /**
     * UnofficialCurrencyCodeList
     * @description List of unofficial currency codes
     */
    UnofficialCurrencyCodeList: string;
    /**
     * StandaloneAccountType
     * @description The schema below describes the various `types` and corresponding `subtypes` that Plaid recognizes and reports for financial institution accounts.
     */
    StandaloneAccountType: {
      depository: components["schemas"]["DepositoryAccount"];
      credit: components["schemas"]["CreditAccount"];
      loan: components["schemas"]["LoanAccount"];
      investment: components["schemas"]["InvestmentAccountSubtypeStandalone"];
      /** @description Other or unknown account type. Supported products for `other` accounts are: Balance, Transactions, Identity, and Assets. */
      other: string;
    } & { [key: string]: unknown };
    /**
     * DepositoryAccount
     * @description An account type holding cash, in which funds are deposited. Supported products for `depository` accounts are: Auth (`checking` and `savings` types only), Balance, Transactions, Identity, Payment Initiation, and Assets.
     */
    DepositoryAccount: string;
    /**
     * CreditAccount
     * @description A credit card type account. Supported products for `credit` accounts are: Balance, Transactions, Identity, and Liabilities.
     */
    CreditAccount: string;
    /**
     * LoanAccount
     * @description A loan type account. Supported products for `loan` accounts are: Balance, Liabilities, and Transactions.
     */
    LoanAccount: string;
    /**
     * InvestmentAccountSubtype
     * @description An investment account. Supported products for `investment` accounts are: Balance and Investments. In API versions 2018-05-22 and earlier, this type is called `brokerage`.
     */
    InvestmentAccountSubtypeStandalone: string;
    /**
     * AssetReport
     * @description An object representing an Asset Report
     */
    AssetReport: {
      asset_report_id: components["schemas"]["AssetReportId"];
      /** @description An identifier you determine and submit for the Asset Report. */
      client_report_id: string | null;
      /**
       * Format: date-time
       * @description The date and time when the Asset Report was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. "2018-04-12T03:32:11Z").
       */
      date_generated: string;
      /** @description The duration of transaction history you requested */
      days_requested: number;
      user: components["schemas"]["AssetReportUser"];
      /** @description Data returned by Plaid about each of the Items included in the Asset Report. */
      items: components["schemas"]["AssetReportItem"][];
    } & { [key: string]: unknown };
    /**
     * AssetReportItem
     * @description A representation of an Item within an Asset Report.
     */
    AssetReportItem: {
      item_id: components["schemas"]["ItemId"];
      /** @description The full financial institution name associated with the Item. */
      institution_name: string;
      /** @description The id of the financial institution associated with the Item. */
      institution_id: string;
      /**
       * Format: date-time
       * @description The date and time when this Item’s data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      date_last_updated: string;
      /** @description Data about each of the accounts open on the Item. */
      accounts: components["schemas"]["AccountAssets"][];
    } & { [key: string]: unknown };
    /**
     * PaymentStatusUpdateWebhook
     * @description Fired when the status of a payment has changed.
     */
    PaymentStatusUpdateWebhook: {
      /** @description `PAYMENT_INITIATION` */
      webhook_type: string;
      /** @description `PAYMENT_STATUS_UPDATE` */
      webhook_code: string;
      /** @description The `payment_id` for the payment being updated */
      payment_id: string;
      new_payment_status: components["schemas"]["PaymentInitiationPaymentStatus"];
      old_payment_status: components["schemas"]["PaymentInitiationPaymentStatus"];
      /** @description The original value of the reference when creating the payment. */
      original_reference: string | null;
      /** @description The value of the reference sent to the bank after adjustment to pass bank validation rules. */
      adjusted_reference?: string | null;
      /**
       * Format: date
       * @description The original value of the `start_date` provided during the creation of a standing order. If the payment is not a standing order, this field will be `null`.
       */
      original_start_date: string | null;
      /**
       * Format: date
       * @description The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, or if the payment is not a standing order, this field will be `null`.
       */
      adjusted_start_date: string | null;
      /**
       * Format: date-time
       * @description The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2017-09-14T14:42:19.350Z"`
       */
      timestamp: string;
      error?: components["schemas"]["PlaidError"];
    } & { [key: string]: unknown };
    /**
     * WalletTransactionStatusUpdateWebhook
     * @description Fired when the status of a wallet transaction has changed.
     */
    WalletTransactionStatusUpdateWebhook: {
      /** @description `WALLET` */
      webhook_type: string;
      /** @description `WALLET_TRANSACTION_STATUS_UPDATE` */
      webhook_code: string;
      /** @description The `transaction_id` for the wallet transaction being updated */
      transaction_id: string;
      new_status: components["schemas"]["WalletTransactionStatus"];
      old_status: components["schemas"]["WalletTransactionStatus"];
      /**
       * Format: date-time
       * @description The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2017-09-14T14:42:19.350Z"`
       */
      timestamp: string;
    } & { [key: string]: unknown };
    /**
     * Holding
     * @description A securities holding at an institution.
     */
    Holding: {
      /** @description The Plaid `account_id` associated with the holding. */
      account_id: string;
      /** @description The Plaid `security_id` associated with the holding. */
      security_id: string;
      /**
       * Format: double
       * @description The last price given by the institution for this security.
       */
      institution_price: number;
      /**
       * Format: date
       * @description The date at which `institution_price` was current.
       */
      institution_price_as_of: string;
      /**
       * Format: date-time
       * @description Date and time at which `institution_price` was current, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).
       *
       * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).
       */
      institution_price_datetime?: string | null;
      /**
       * Format: double
       * @description The value of the holding, as reported by the institution.
       */
      institution_value: number;
      /**
       * Format: double
       * @description The original total value or the purchase price per share of the holding. This field is an aggregate on a per holding basis and dependent on the information provided by the institution.
       */
      cost_basis: number | null;
      /**
       * Format: double
       * @description The total quantity of the asset held, as reported by the financial institution. If the security is an option, `quantity` will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts.
       */
      quantity: number;
      /** @description The ISO-4217 currency code of the holding. Always `null` if `unofficial_currency_code` is non-`null`. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
    } & { [key: string]: unknown };
    /**
     * Security
     * @description Contains details about a security
     */
    Security: {
      /** @description A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive. */
      security_id: string;
      /** @description 12-character ISIN, a globally unique securities identifier. */
      isin: string | null;
      /** @description 9-character CUSIP, an identifier assigned to North American securities. */
      cusip: string | null;
      /** @description 7-character SEDOL, an identifier assigned to securities in the UK. */
      sedol: string | null;
      /** @description An identifier given to the security by the institution */
      institution_security_id: string | null;
      /** @description If `institution_security_id` is present, this field indicates the Plaid `institution_id` of the institution to whom the identifier belongs. */
      institution_id: string | null;
      /** @description In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security. */
      proxy_security_id: string | null;
      /** @description A descriptive name for the security, suitable for display. */
      name: string | null;
      /** @description The security’s trading symbol for publicly traded securities, and otherwise a short identifier if available. */
      ticker_symbol: string | null;
      /** @description Indicates that a security is a highly liquid asset and can be treated like cash. */
      is_cash_equivalent: boolean | null;
      /**
       * @description The security type of the holding. Valid security types are:
       *
       * `cash`: Cash, currency, and money market funds
       *
       * `cryptocurrency`: Digital or virtual currencies
       *
       * `derivative`: Options, warrants, and other derivative instruments
       *
       * `equity`: Domestic and foreign equities
       *
       * `etf`: Multi-asset exchange-traded investment funds
       *
       * `fixed income`: Bonds and certificates of deposit (CDs)
       *
       * `loan`: Loans and loan receivables
       *
       * `mutual fund`: Open- and closed-end vehicles pooling funds of multiple investors
       *
       * `other`: Unknown or other investment types
       */
      type: string | null;
      /**
       * Format: double
       * @description Price of the security at the close of the previous trading session. Null for non-public securities.
       *
       * If the security is a foreign currency this field will be updated daily and will be priced in USD.
       *
       * If the security is a cryptocurrency, this field will be updated multiple times a day. As crypto prices can fluctuate quickly and data may become stale sooner than other asset classes, please refer to update_datetime with the time when the price was last updated.
       */
      close_price: number | null;
      /**
       * Format: date
       * @description Date for which `close_price` is accurate. Always `null` if `close_price` is `null`.
       */
      close_price_as_of: string | null;
      /**
       * Format: date-time
       * @description Date and time at which close_price is accurate, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ). Always null if close_price is null.
       */
      update_datetime?: string | null;
      /** @description The ISO-4217 currency code of the price given. Always `null` if `unofficial_currency_code` is non-`null`. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
    } & { [key: string]: unknown };
    /**
     * @description Value is one of the following:
     * `buy`: Buying an investment
     * `sell`: Selling an investment
     * `cancel`: A cancellation of a pending transaction
     * `cash`: Activity that modifies a cash position
     * `fee`: A fee on the account
     * `transfer`: Activity which modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
     *
     * For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
     * @enum {string}
     */
    InvestmentTransactionType:
      | "buy"
      | "sell"
      | "cancel"
      | "cash"
      | "fee"
      | "transfer";
    /**
     * @description For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
     * @enum {string}
     */
    InvestmentTransactionSubtype:
      | "account fee"
      | "adjustment"
      | "assignment"
      | "buy"
      | "buy to cover"
      | "contribution"
      | "deposit"
      | "distribution"
      | "dividend"
      | "dividend reinvestment"
      | "exercise"
      | "expire"
      | "fund fee"
      | "interest"
      | "interest receivable"
      | "interest reinvestment"
      | "legal fee"
      | "loan payment"
      | "long-term capital gain"
      | "long-term capital gain reinvestment"
      | "management fee"
      | "margin expense"
      | "merger"
      | "miscellaneous fee"
      | "non-qualified dividend"
      | "non-resident tax"
      | "pending credit"
      | "pending debit"
      | "qualified dividend"
      | "rebalance"
      | "return of principal"
      | "request"
      | "sell"
      | "sell short"
      | "send"
      | "short-term capital gain"
      | "short-term capital gain reinvestment"
      | "spin off"
      | "split"
      | "stock distribution"
      | "tax"
      | "tax withheld"
      | "transfer"
      | "transfer fee"
      | "trust fee"
      | "unqualified gain"
      | "withdrawal";
    /**
     * InvestmentTransaction
     * @description A transaction within an investment account.
     */
    InvestmentTransaction: {
      /** @description The ID of the Investment transaction, unique across all Plaid transactions. Like all Plaid identifiers, the `investment_transaction_id` is case sensitive. */
      investment_transaction_id: string;
      /**
       * @deprecated
       * @description A legacy field formerly used internally by Plaid to identify certain canceled transactions.
       */
      cancel_transaction_id?: string | null;
      /** @description The `account_id` of the account against which this transaction posted. */
      account_id: string;
      /** @description The `security_id` to which this transaction is related. */
      security_id: string | null;
      /**
       * Format: date
       * @description The [ISO 8601](https://wikipedia.org/wiki/ISO_8601) posting date for the transaction.
       */
      date: string;
      /** @description The institution’s description of the transaction. */
      name: string;
      /**
       * Format: double
       * @description The number of units of the security involved in this transaction.
       */
      quantity: number;
      /**
       * Format: double
       * @description The complete value of the transaction. Positive values when cash is debited, e.g. purchases of stock; negative values when cash is credited, e.g. sales of stock. Treatment remains the same for cash-only movements unassociated with securities.
       */
      amount: number;
      /**
       * Format: double
       * @description The price of the security at which this transaction occurred.
       */
      price: number;
      /**
       * Format: double
       * @description The combined value of all fees applied to this transaction
       */
      fees: number | null;
      type: components["schemas"]["InvestmentTransactionType"];
      subtype: components["schemas"]["InvestmentTransactionSubtype"];
      /** @description The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-`null`. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
    } & { [key: string]: unknown };
    /**
     * StandaloneInvestmentTransactionType
     * @description Valid values for investment transaction types and subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts.
     */
    StandaloneInvestmentTransactionType: {
      buy: components["schemas"]["StandaloneInvestmentTransactionBuyType"];
      sell: components["schemas"]["StandaloneInvestmentTransactionSellType"];
      /** @description A cancellation of a pending transaction */
      cancel: string;
      cash: components["schemas"]["StandaloneInvestmentTransactionCashType"];
      fee: components["schemas"]["StandaloneInvestmentTransactionFeeType"];
      transfer: components["schemas"]["StandaloneInvestmentTransactionTransferType"];
    } & { [key: string]: unknown };
    /**
     * BuyType
     * @description Buying an investment
     */
    StandaloneInvestmentTransactionBuyType: string;
    /**
     * CashType
     * @description Activity that modifies a cash position
     */
    StandaloneInvestmentTransactionCashType: string;
    /**
     * FeeType
     * @description Fees on the account, e.g. commission, bookkeeping, options-related.
     */
    StandaloneInvestmentTransactionFeeType: string;
    /**
     * SellType
     * @description Selling an investment
     */
    StandaloneInvestmentTransactionSellType: string;
    /**
     * TransferType
     * @description Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
     */
    StandaloneInvestmentTransactionTransferType: string;
    /**
     * AccountSubtypes
     * @description An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     */
    AccountSubtypes: components["schemas"]["AccountSubtype"][];
    /**
     * UserPermissionRevokedWebhook
     * @description The `USER_PERMISSION_REVOKED` webhook is fired when an end user has used either the [my.plaid.com portal](https://my.plaid.com) or the financial institution’s consent portal to revoke the permission that they previously granted to access an Item. Once access to an Item has been revoked, it cannot be restored. If the user subsequently returns to your application, a new Item must be created for the user.
     */
    UserPermissionRevokedWebhook: {
      /** @description `ITEM` */
      webhook_type: string;
      /** @description `USER_PERMISSION_REVOKED` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      error?: components["schemas"]["PlaidError"];
    } & { [key: string]: unknown };
    /**
     * DepositSwitchGetRequest
     * @description DepositSwitchGetRequest defines the request schema for `/deposit_switch/get`
     */
    DepositSwitchGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the deposit switch */
      deposit_switch_id: string;
    };
    /**
     * DepositSwitchGetResponse
     * @description DepositSwitchGetResponse defines the response schema for `/deposit_switch/get`
     */
    DepositSwitchGetResponse: {
      /** @description The ID of the deposit switch. */
      deposit_switch_id: string;
      /** @description The ID of the bank account the direct deposit was switched to. */
      target_account_id: string | null;
      /** @description The ID of the Item the direct deposit was switched to. */
      target_item_id: string | null;
      /**
       * @description
       * The state, or status, of the deposit switch.
       *
       * - `initialized` – The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.
       *
       * - `processing` – The deposit switch request has been submitted and is being processed.
       *
       * - `completed` – The user's employer has fulfilled the deposit switch request.
       *
       * - `error` – There was an error processing the deposit switch request.
       * @enum {string}
       */
      state: "initialized" | "processing" | "completed" | "error";
      /**
       * @description The method used to make the deposit switch.
       *
       * - `instant` – User instantly switched their direct deposit to a new or existing bank account by connecting their payroll or employer account.
       *
       * - `mail` – User requested that Plaid contact their employer by mail to make the direct deposit switch.
       *
       * - `pdf` – User generated a PDF or email to be sent to their employer with the information necessary to make the deposit switch.'
       * @enum {string|null}
       */
      switch_method?: ("instant" | "mail" | "pdf" | null) | null;
      /** @description When `true`, user’s direct deposit goes to multiple banks. When false, user’s direct deposit only goes to the target account. Always `null` if the deposit switch has not been completed. */
      account_has_multiple_allocations: boolean | null;
      /** @description When `true`, the target account is allocated the remainder of direct deposit after all other allocations have been deducted. When `false`, user’s direct deposit is allocated as a percent or amount. Always `null` if the deposit switch has not been completed. */
      is_allocated_remainder: boolean | null;
      /**
       * Format: double
       * @description The percentage of direct deposit allocated to the target account. Always `null` if the target account is not allocated a percentage or if the deposit switch has not been completed or if `is_allocated_remainder` is true.
       */
      percent_allocated: number | null;
      /**
       * Format: double
       * @description The dollar amount of direct deposit allocated to the target account. Always `null` if the target account is not allocated an amount or if the deposit switch has not been completed.
       */
      amount_allocated: number | null;
      /** @description The name of the employer selected by the user. If the user did not select an employer, the value returned is `null`. */
      employer_name?: string | null;
      /** @description The ID of the employer selected by the user. If the user did not select an employer, the value returned is `null`. */
      employer_id?: string | null;
      /** @description The name of the institution selected by the user. If the user did not select an institution, the value returned is `null`. */
      institution_name?: string | null;
      /** @description The ID of the institution selected by the user. If the user did not select an institution, the value returned is `null`. */
      institution_id?: string | null;
      /**
       * Format: date
       * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was created.
       */
      date_created: string;
      /**
       * Format: date
       * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was completed. Always `null` if the deposit switch has not been completed.
       */
      date_completed: string | null;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * DepositSwitchStateUpdateWebhook
     * @description Fired when the status of a deposit switch request has changed.
     */
    DepositSwitchStateUpdateWebhook: {
      /** @description `"DEPOSIT_SWITCH"` */
      webhook_type?: string;
      /** @description `"SWITCH_STATE_UPDATE"` */
      webhook_code?: string;
      /**
       * @description
       * The state, or status, of the deposit switch.
       *
       * `initialized`: The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.
       *
       * `processing`: The deposit switch request has been submitted and is being processed.
       *
       * `completed`: The user's employer has fulfilled and completed the deposit switch request.
       *
       * `error`: There was an error processing the deposit switch request.
       *
       * For more information, see the [Deposit Switch API reference](/docs/deposit-switch/reference#deposit_switchget).
       */
      state?: string;
      /** @description The ID of the deposit switch. */
      deposit_switch_id?: string;
    };
    /**
     * AssetReportAuditCopyGetRequest
     * @description AssetReportAuditCopyGetRequest defines the request schema for `/asset_report/audit_copy/get`
     */
    AssetReportAuditCopyGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `audit_copy_token` granting access to the Audit Copy you would like to get. */
      audit_copy_token: string;
    };
    /**
     * TransferGetRequest
     * @description Defines the request schema for `/transfer/get`
     */
    TransferGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      transfer_id: components["schemas"]["TransferID"];
    };
    /**
     * BankTransferGetRequest
     * @description Defines the request schema for `/bank_transfer/get`
     */
    BankTransferGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      bank_transfer_id: components["schemas"]["BankTransferID"];
    };
    /**
     * TransferGetResponse
     * @description Defines the response schema for `/transfer/get`
     */
    TransferGetResponse: {
      transfer: components["schemas"]["Transfer"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * BankTransferGetResponse
     * @description Defines the response schema for `/bank_transfer/get`
     */
    BankTransferGetResponse: {
      bank_transfer: components["schemas"]["BankTransfer"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * TransferID
     * @description Plaid’s unique identifier for a transfer.
     */
    TransferID: string;
    /**
     * TransferSweepID
     * @description Plaid’s unique identifier for a sweep.
     */
    TransferSweepID: string | null;
    /**
     * TransferAuthorizationID
     * @description Plaid’s unique identifier for a transfer authorization.
     */
    TransferAuthorizationID: string;
    /**
     * BankTransferID
     * @description Plaid’s unique identifier for a bank transfer.
     */
    BankTransferID: string;
    /**
     * Transfer
     * @description Represents a transfer within the Transfers API.
     */
    Transfer: {
      id: components["schemas"]["TransferID"];
      ach_class: components["schemas"]["ACHClass"];
      /** @description The account ID that should be credited/debited for this transfer. */
      account_id: string;
      type: components["schemas"]["TransferType"];
      user: components["schemas"]["TransferUserInResponse"];
      amount: components["schemas"]["TransferAmount"];
      /** @description The description of the transfer. */
      description: string;
      /**
       * Format: date-time
       * @description The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
       */
      created: string;
      status: components["schemas"]["TransferStatus"];
      sweep_status?: components["schemas"]["TransferSweepStatus"];
      network: components["schemas"]["TransferNetwork"];
      /** @description When `true`, you can still cancel this transfer. */
      cancellable: boolean;
      failure_reason: components["schemas"]["TransferFailure"];
      metadata: components["schemas"]["TransferMetadata"];
      /** @description Plaid’s unique identifier for the origination account that was used for this transfer. */
      origination_account_id: string;
      guarantee_decision: components["schemas"]["TransferAuthorizationGuaranteeDecision"];
      guarantee_decision_rationale: components["schemas"]["TransferAuthorizationGuaranteeDecisionRationale"];
      /** @description The currency of the transfer amount, e.g. "USD" */
      iso_currency_code: string;
    } & { [key: string]: unknown };
    /**
     * BankTransfer
     * @description Represents a bank transfer within the Bank Transfers API.
     */
    BankTransfer: {
      id: components["schemas"]["BankTransferID"];
      ach_class: components["schemas"]["ACHClass"];
      /** @description The account ID that should be credited/debited for this bank transfer. */
      account_id: string;
      type: components["schemas"]["BankTransferType"];
      user: components["schemas"]["BankTransferUser"];
      amount: components["schemas"]["BankTransferAmount"];
      /** @description The currency of the transfer amount, e.g. "USD" */
      iso_currency_code: string;
      /** @description The description of the transfer. */
      description: string;
      /**
       * Format: date-time
       * @description The datetime when this bank transfer was created. This will be of the form `2006-01-02T15:04:05Z`
       */
      created: string;
      status: components["schemas"]["BankTransferStatus"];
      network: components["schemas"]["BankTransferNetwork"];
      /** @description When `true`, you can still cancel this bank transfer. */
      cancellable: boolean;
      failure_reason: components["schemas"]["BankTransferFailure"];
      /** @description A string containing the custom tag provided by the client in the create request. Will be null if not provided. */
      custom_tag: string | null;
      metadata: components["schemas"]["BankTransferMetadata"];
      /** @description Plaid’s unique identifier for the origination account that was used for this transfer. */
      origination_account_id: string;
      direction: components["schemas"]["BankTransferDirection"];
    } & { [key: string]: unknown };
    /**
     * ACHClass
     * @description Specifies the use case of the transfer. Required for transfers on an ACH network.
     *
     * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
     *
     * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
     *
     * `"tel"` - Telephone-Initiated Entry
     *
     * `"web"` - Internet-Initiated Entry - debits from a consumer’s account where their authorization is obtained over the Internet
     * @enum {string}
     */
    ACHClass: "ccd" | "ppd" | "tel" | "web";
    /**
     * TransferAmount
     * @description The amount of the transfer (decimal string with two digits of precision e.g. "10.00").
     */
    TransferAmount: string;
    /**
     * TransferSweepAmount
     * @description A signed amount of how much was `swept` or `return_swept` (decimal string with two digits of precision e.g. "-5.50").
     */
    TransferSweepAmount: string | null;
    /**
     * TransferIntentGetFailureReason
     * @description The reason for a failed transfer intent. Returned only if the transfer intent status is `failed`. Null otherwise.
     */
    TransferIntentGetFailureReason:
      | ({
          /** @description A broad categorization of the error. */
          error_type?: string;
          /**
           * @description A code representing the reason for a failed transfer intent (i.e., an API error or the authorization being declined).
           *
           * For a full listing of bank transfer errors, see [Bank Transfers errors](https://plaid.com/docs/errors/bank-transfers/).
           */
          error_code?: string;
          /** @description A human-readable description of the code associated with a failed transfer intent. */
          error_message?: string;
        } & { [key: string]: unknown })
      | null;
    /**
     * TransferIntentCreateMode
     * @description The direction of the flow of transfer funds.
     *
     * - `PAYMENT` – Transfers funds from an end user's account to your business account.
     *
     * - `DISBURSEMENT` – Transfers funds from your business account to an end user's account.
     * @enum {string}
     */
    TransferIntentCreateMode: "PAYMENT" | "DISBURSEMENT";
    /**
     * BankTransferAmount
     * @description The amount of the bank transfer (decimal string with two digits of precision e.g. "10.00").
     */
    BankTransferAmount: string;
    /**
     * TransferCreateIdempotencyKey
     * @deprecated
     * @description Deprecated. `authorization_id` is now used as idempotency instead.
     *
     * A random key provided by the client, per unique transfer. Maximum of 50 characters.
     *
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single transfer is created.
     */
    TransferCreateIdempotencyKey: string;
    /**
     * BankTransferIdempotencyKey
     * @description A random key provided by the client, per unique bank transfer. Maximum of 50 characters.
     *
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.
     */
    BankTransferIdempotencyKey: string;
    /**
     * TransferAuthorizationUserInRequest
     * @description The legal name and other information for the account holder.
     */
    TransferAuthorizationUserInRequest: {
      /** @description The user's legal name. */
      legal_name: string;
      /** @description The user's phone number. In order to qualify for a guaranteed transfer, at least one of `phone_number` or `email_address` must be provided. */
      phone_number?: string;
      /** @description The user's email address. In order to qualify for a guaranteed transfer, at least one of `phone_number` or `email_address` must be provided. */
      email_address?: string;
      address?: components["schemas"]["TransferUserAddressInRequest"];
    } & { [key: string]: unknown };
    /**
     * TransferUserInRequest
     * @description The legal name and other information for the account holder.
     */
    TransferUserInRequest: {
      /** @description The user's legal name. */
      legal_name: string;
      /** @description The user's phone number. */
      phone_number?: string;
      /** @description The user's email address. */
      email_address?: string;
      address?: components["schemas"]["TransferUserAddressInRequest"];
    } & { [key: string]: unknown };
    /**
     * TransferUserInRequest
     * @deprecated
     * @description The legal name and other information for the account holder.
     */
    TransferUserInRequestDeprecated: components["schemas"]["TransferUserInRequest"];
    /**
     * TransferUserInResponse
     * @description The legal name and other information for the account holder.
     */
    TransferUserInResponse: {
      /** @description The user's legal name. */
      legal_name: string;
      /** @description The user's phone number. */
      phone_number: string | null;
      /** @description The user's email address. */
      email_address: string | null;
      address: components["schemas"]["TransferUserAddressInResponse"];
    } & { [key: string]: unknown };
    /**
     * TransferUserAddressInRequest
     * @description The address associated with the account holder. Providing this data will improve the likelihood that Plaid will be able to guarantee the transfer, if applicable.
     */
    TransferUserAddressInRequest: {
      /** @description The street number and name (i.e., "100 Market St."). */
      street?: string;
      /** @description Ex. "San Francisco" */
      city?: string;
      /** @description The state or province (e.g., "CA"). */
      region?: string;
      /** @description The postal code (e.g., "94103"). */
      postal_code?: string;
      /** @description A two-letter country code (e.g., "US"). */
      country?: string;
    } & { [key: string]: unknown };
    /**
     * TransferUserAddressInResponse
     * @description The address associated with the account holder.
     */
    TransferUserAddressInResponse:
      | ({
          /** @description The street number and name (i.e., "100 Market St."). */
          street: string | null;
          /** @description Ex. "San Francisco" */
          city: string | null;
          /** @description The state or province (e.g., "CA"). */
          region: string | null;
          /** @description The postal code (e.g., "94103"). */
          postal_code: string | null;
          /** @description A two-letter country code (e.g., "US"). */
          country: string | null;
        } & { [key: string]: unknown })
      | null;
    /**
     * BankTransferUser
     * @description The legal name and other information for the account holder.
     */
    BankTransferUser: {
      /** @description The account holder’s full legal name. If the transfer `ach_class` is `ccd`, this should be the business name of the account holder. */
      legal_name: string;
      /** @description The account holder’s email. */
      email_address?: string | null;
      /** @description The account holder's routing number. This field is only used in response data. Do not provide this field when making requests. */
      routing_number?: string;
    } & { [key: string]: unknown };
    /**
     * @description A code representing the rationale for approving or declining the proposed transfer. Possible values are:
     *
     * `MANUALLY_VERIFIED_ITEM` – Item created via same-day micro deposits, limited information available. Plaid will offer `approved` as a transaction decision.
     *
     * `LOGIN_REQUIRED` – Unable to collect the account information due to Item staleness. Can be rectified using Link in update mode. Plaid will offer `approved` as a transaction decision.
     *
     * `ERROR` – Unable to collect the account information due to an error. Plaid will offer `approved` as a transaction decision.
     *
     * `NSF` – Transaction likely to result in a return due to insufficient funds. Plaid will offer `declined` as a transaction decision.
     *
     * `RISK` - Transaction is high-risk. Plaid will offer `declined` as a transaction decision.
     *
     * `TRANSFER_LIMIT_REACHED` - One or several transfer limits are reached, e.g. monthly transfer limit. Plaid will offer `declined` as a transaction decision.
     * @enum {string}
     */
    TransferAuthorizationDecisionRationaleCode:
      | "NSF"
      | "RISK"
      | "TRANSFER_LIMIT_REACHED"
      | "MANUALLY_VERIFIED_ITEM"
      | "LOGIN_REQUIRED"
      | "ERROR";
    /**
     * TransferAuthorizationDecisionRationale
     * @description The rationale for Plaid's decision regarding a proposed transfer. It is always set for `declined` decisions, and may or may not be null for `approved` decisions.
     */
    TransferAuthorizationDecisionRationale:
      | ({
          code: components["schemas"]["TransferAuthorizationDecisionRationaleCode"];
          /** @description A human-readable description of the code associated with a transfer approval or transfer decline. */
          description: string;
        } & { [key: string]: unknown })
      | null;
    /**
     * @description Indicates whether the transfer is guaranteed by Plaid (Guaranteed ACH customers only). This field will contain either `GUARANTEED` or `NOT_GUARANTEED` indicating whether Plaid will guarantee the transfer. If the transfer is not guaranteed, additional information will be provided in the `guarantee_decision_rationale` field. Refer to the `code` field in `guarantee_decision_rationale` for details.
     * @enum {string|null}
     */
    TransferAuthorizationGuaranteeDecision:
      | ("GUARANTEED" | "NOT_GUARANTEED" | null)
      | null;
    /**
     * @description A code representing the reason Plaid declined to guarantee this transfer:
     *
     * `RETURN_BANK`: The risk of a bank-initiated return (for example, an R01/NSF) is too high to guarantee this transfer.
     *
     * `RETURN_CUSTOMER`: The risk of a customer-initiated return (for example, a R10/Unauthorized) is too high to guarantee this transfer.
     *
     * `GUARANTEE_LIMIT_REACHED`: This transfer is low-risk, but Guaranteed ACH has exhausted an internal limit on the number or rate of guarantees that applies to this transfer.
     *
     * `RISK_ESTIMATE_UNAVAILABLE`: A risk estimate is unavailable for this Item.
     *
     * `REQUIRED_PARAM_MISSING`: Required fields are missing.
     * @enum {string}
     */
    TransferAuthorizationGuaranteeDecisionRationaleCode:
      | "RETURN_BANK"
      | "RETURN_CUSTOMER"
      | "GUARANTEE_LIMIT_REACHED"
      | "RISK_ESTIMATE_UNAVAILABLE"
      | "REQUIRED_PARAM_MISSING";
    /**
     * TransferAuthorizationGuaranteeDecisionRationale
     * @description The rationale for Plaid's decision to not guarantee a transfer. Will be `null` unless `guarantee_decision` is `NOT_GUARANTEED`.
     */
    TransferAuthorizationGuaranteeDecisionRationale:
      | ({
          code: components["schemas"]["TransferAuthorizationGuaranteeDecisionRationaleCode"];
          /** @description A human-readable description of why the transfer cannot be guaranteed. */
          description: string;
        } & { [key: string]: unknown })
      | null;
    /**
     * TransferAuthorizationProposedTransfer
     * @description Details regarding the proposed transfer.
     */
    TransferAuthorizationProposedTransfer: {
      ach_class: components["schemas"]["ACHClass"];
      /** @description The Plaid `account_id` for the account that will be debited or credited. */
      account_id: string;
      type: components["schemas"]["TransferType"];
      user: components["schemas"]["TransferUserInResponse"];
      amount: components["schemas"]["TransferAmount"];
      /** @description The network or rails used for the transfer. */
      network: string;
      /** @description Plaid's unique identifier for the origination account that was used for this transfer. */
      origination_account_id: string;
      /** @description The currency of the transfer amount. The default value is "USD". */
      iso_currency_code: string;
    } & { [key: string]: unknown };
    /**
     * TransferAuthorizationDevice
     * @description Information about the device being used to initiate the authorization.
     */
    TransferAuthorizationDevice: {
      /** @description The IP address of the device being used to initiate the authorization. Required for guaranteed ACH customers. */
      ip_address?: string;
      /** @description The user agent of the device being used to initiate the authorization. Required for guaranteed ACH customers. */
      user_agent?: string;
    } & { [key: string]: unknown };
    /**
     * TransferMetadata
     * @description The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
     * - The JSON values must be Strings (no nested JSON objects allowed)
     * - Only ASCII characters may be used
     * - Maximum of 50 key/value pairs
     * - Maximum key length of 40 characters
     * - Maximum value length of 500 characters
     */
    TransferMetadata: { [key: string]: string } | null;
    /**
     * BankTransferMetadata
     * @description The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
     * - The JSON values must be Strings (no nested JSON objects allowed)
     * - Only ASCII characters may be used
     * - Maximum of 50 key/value pairs
     * - Maximum key length of 40 characters
     * - Maximum value length of 500 characters
     */
    BankTransferMetadata: { [key: string]: string } | null;
    /**
     * TransferType
     * @description The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
     * @enum {string}
     */
    TransferType: "debit" | "credit";
    /**
     * BankTransferType
     * @description The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
     * @enum {string}
     */
    BankTransferType: "debit" | "credit";
    /**
     * TransferStatus
     * @description The status of the transfer.
     * @enum {string}
     */
    TransferStatus: "pending" | "posted" | "cancelled" | "failed" | "returned";
    /**
     * TransferSweepStatus
     * @description The status of the sweep for the transfer.
     * `unswept`: The transfer hasn't been swept yet.
     * `swept`: The transfer was swept to the sweep account.
     * `return_swept`: The transfer was returned, funds were pulled back or pushed back to the sweep account.
     * `null`: The transfer will never be swept (e.g. if the transfer is cancelled or returned before being swept)
     * @enum {string|null}
     */
    TransferSweepStatus:
      | (null | "unswept" | "swept" | "reverse_swept" | "return_swept")
      | null;
    /**
     * BankTransferStatus
     * @description The status of the transfer.
     * @enum {string}
     */
    BankTransferStatus:
      | "pending"
      | "posted"
      | "cancelled"
      | "failed"
      | "reversed";
    /**
     * TransferNetwork
     * @description The network or rails used for the transfer. Valid options are `ach` or `same-day-ach`. The cutoff for same-day transfers is 7:45 AM Pacific Time and the cutoff for next-day transfers is 5:45 PM Pacific Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
     * @enum {string}
     */
    TransferNetwork: "ach" | "same-day-ach";
    /**
     * BankTransferNetwork
     * @description The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.
     * @enum {string}
     */
    BankTransferNetwork: "ach" | "same-day-ach" | "wire";
    /**
     * TransferFailure
     * @description The failure reason if the event type for a transfer is `"failed"` or `"returned"`. Null value otherwise.
     */
    TransferFailure:
      | ({
          /** @description The ACH return code, e.g. `R01`.  A return code will be provided if and only if the transfer status is `returned`. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes). */
          ach_return_code?: string | null;
          /** @description A human-readable description of the reason for the failure or reversal. */
          description?: string;
        } & { [key: string]: unknown })
      | null;
    /**
     * BankTransferFailure
     * @description The failure reason if the type of this transfer is `"failed"` or `"reversed"`. Null value otherwise.
     */
    BankTransferFailure:
      | ({
          /** @description The ACH return code, e.g. `R01`.  A return code will be provided if and only if the transfer status is `reversed`. For a full listing of ACH return codes, see [Bank Transfers errors](https://plaid.com/docs/errors/bank-transfers/#ach-return-codes). */
          ach_return_code?: string | null;
          /** @description A human-readable description of the reason for the failure or reversal. */
          description?: string;
        } & { [key: string]: unknown })
      | null;
    /**
     * TransferAuthorizationCreateRequest
     * @description Defines the request schema for `/transfer/authorization/create`
     */
    TransferAuthorizationCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token?: components["schemas"]["TransferAccessToken"];
      /** @description The Plaid `account_id` for the account that will be debited or credited. */
      account_id?: string;
      type: components["schemas"]["TransferType"];
      network: components["schemas"]["TransferNetwork"];
      amount: components["schemas"]["TransferAmount"];
      ach_class: components["schemas"]["ACHClass"];
      user: components["schemas"]["TransferAuthorizationUserInRequest"];
      device?: components["schemas"]["TransferAuthorizationDevice"];
      /** @description Plaid's unique identifier for the origination account for this authorization. If not specified, the default account will be used. */
      origination_account_id?: string;
      /** @description The currency of the transfer amount. The default value is "USD". */
      iso_currency_code?: string;
      /** @description Required for guaranteed ACH customers. If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`. */
      user_present?: boolean | null;
      payment_profile_id?: components["schemas"]["PaymentProfileID"];
    };
    /**
     * TransferCreateRequest
     * @description Defines the request schema for `/transfer/create`
     */
    TransferCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      idempotency_key?: components["schemas"]["TransferCreateIdempotencyKey"];
      access_token?: components["schemas"]["TransferAccessToken"];
      /** @description The Plaid `account_id` for the account that will be debited or credited. */
      account_id?: string;
      /** @description Plaid’s unique identifier for a transfer authorization. This parameter also serves the purpose of acting as an idempotency identifier. */
      authorization_id: string;
      /** @deprecated */
      type?: components["schemas"]["TransferType"];
      /** @deprecated */
      network?: components["schemas"]["TransferNetwork"];
      amount?: components["schemas"]["TransferAmount"];
      /** @description The transfer description. Maximum of 10 characters. */
      description: string;
      /** @deprecated */
      ach_class?: components["schemas"]["ACHClass"];
      user?: components["schemas"]["TransferUserInRequestDeprecated"];
      metadata?: components["schemas"]["TransferMetadata"];
      /**
       * @deprecated
       * @description Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank.
       */
      origination_account_id?: string | null;
      /**
       * @deprecated
       * @description The currency of the transfer amount. The default value is "USD".
       */
      iso_currency_code?: string;
      payment_profile_id?: components["schemas"]["PaymentProfileID"];
    };
    /**
     * BankTransferCreateRequest
     * @description Defines the request schema for `/bank_transfer/create`
     */
    BankTransferCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      idempotency_key: components["schemas"]["BankTransferIdempotencyKey"];
      access_token: components["schemas"]["BankTransferAccessToken"];
      /** @description The Plaid `account_id` for the account that will be debited or credited. */
      account_id: string;
      type: components["schemas"]["BankTransferType"];
      network: components["schemas"]["BankTransferNetwork"];
      amount: components["schemas"]["BankTransferAmount"];
      /** @description The currency of the transfer amount – should be set to "USD". */
      iso_currency_code: string;
      /** @description The transfer description. Maximum of 10 characters. */
      description: string;
      ach_class?: components["schemas"]["ACHClass"];
      user: components["schemas"]["BankTransferUser"];
      /** @description An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters. */
      custom_tag?: string | null;
      metadata?: components["schemas"]["BankTransferMetadata"];
      /** @description Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank. */
      origination_account_id?: string | null;
    };
    /**
     * TransferAuthorizationCreateResponse
     * @description Defines the response schema for `/transfer/authorization/create`
     */
    TransferAuthorizationCreateResponse: {
      authorization: components["schemas"]["TransferAuthorization"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * @description
     * A decision regarding the proposed transfer.
     *
     * `approved` – The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
     *
     * `declined` – Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
     * @enum {string}
     */
    TransferAuthorizationDecision: "approved" | "declined";
    /**
     * TransferAuthorization
     * @description Contains the authorization decision for a proposed transfer
     */
    TransferAuthorization: {
      id: components["schemas"]["TransferAuthorizationID"];
      /**
       * Format: date-time
       * @description The datetime representing when the authorization was created, in the format `2006-01-02T15:04:05Z`.
       */
      created: string;
      decision: components["schemas"]["TransferAuthorizationDecision"];
      decision_rationale: components["schemas"]["TransferAuthorizationDecisionRationale"];
      guarantee_decision: components["schemas"]["TransferAuthorizationGuaranteeDecision"];
      guarantee_decision_rationale: components["schemas"]["TransferAuthorizationGuaranteeDecisionRationale"];
      proposed_transfer: components["schemas"]["TransferAuthorizationProposedTransfer"];
    } & { [key: string]: unknown };
    /**
     * TransferCreateResponse
     * @description Defines the response schema for `/transfer/create`
     */
    TransferCreateResponse: {
      transfer: components["schemas"]["Transfer"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * BankTransferCreateResponse
     * @description Defines the response schema for `/bank_transfer/create`
     */
    BankTransferCreateResponse: {
      bank_transfer: components["schemas"]["BankTransfer"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * TransferListRequest
     * @description Defines the request schema for `/transfer/list`
     */
    TransferListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      start_date?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      end_date?: string | null;
      /**
       * @description The maximum number of transfers to return.
       * @default 25
       */
      count?: number;
      /**
       * @description The number of transfers to skip before returning results.
       * @default 0
       */
      offset?: number;
      /** @description Filter transfers to only those originated through the specified origination account. */
      origination_account_id?: string | null;
    };
    /**
     * BankTransferListRequest
     * @description Defines the request schema for `/bank_transfer/list`
     */
    BankTransferListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      start_date?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      end_date?: string | null;
      /**
       * @description The maximum number of bank transfers to return.
       * @default 25
       */
      count?: number;
      /**
       * @description The number of bank transfers to skip before returning results.
       * @default 0
       */
      offset?: number;
      /** @description Filter bank transfers to only those originated through the specified origination account. */
      origination_account_id?: string | null;
      direction?: components["schemas"]["BankTransferDirection"];
    };
    /**
     * TransferListResponse
     * @description Defines the response schema for `/transfer/list`
     */
    TransferListResponse: {
      transfers: components["schemas"]["Transfer"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * BankTransferListResponse
     * @description Defines the response schema for `/bank_transfer/list`
     */
    BankTransferListResponse: {
      bank_transfers: components["schemas"]["BankTransfer"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * BankTransferDirection
     * @description Indicates the direction of the transfer: `outbound` for API-initiated transfers, or `inbound` for payments received by the FBO account.
     * @enum {string|null}
     */
    BankTransferDirection: ("outbound" | "inbound" | null) | null;
    /**
     * TransferCancelRequest
     * @description Defines the request schema for `/transfer/cancel`
     */
    TransferCancelRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      transfer_id: components["schemas"]["TransferID"];
    };
    /**
     * BankTransferCancelRequest
     * @description Defines the request schema for `/bank_transfer/cancel`
     */
    BankTransferCancelRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      bank_transfer_id: components["schemas"]["BankTransferID"];
    };
    /**
     * TransferCancelResponse
     * @description Defines the response schema for `/transfer/cancel`
     */
    TransferCancelResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * BankTransferCancelResponse
     * @description Defines the response schema for `/bank_transfer/cancel`
     */
    BankTransferCancelResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * TransferType
     * @description The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.
     * @enum {string|null}
     */
    TransferEventListTransferType: ("debit" | "credit" | null) | null;
    /**
     * TransferEventListRequest
     * @description Defines the request schema for `/transfer/event/list`
     */
    TransferEventListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      start_date?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      end_date?: string | null;
      /**
       * TransferID
       * @description Plaid’s unique identifier for a transfer.
       */
      transfer_id?: string | null;
      /** @description The account ID to get events for all transactions to/from an account. */
      account_id?: string | null;
      transfer_type?: components["schemas"]["TransferEventListTransferType"];
      /** @description Filter events by event type. */
      event_types?: components["schemas"]["TransferEventType"][];
      /** @description Plaid’s unique identifier for a sweep. */
      sweep_id?: string;
      /**
       * @description The maximum number of transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
       * @default 25
       */
      count?: number | null;
      /**
       * @description The offset into the list of transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 bank transfer events will be returned.
       * @default 0
       */
      offset?: number | null;
      /** @description The origination account ID to get events for transfers from a specific origination account. */
      origination_account_id?: string | null;
    };
    /**
     * BankTransferType
     * @description The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.
     * @enum {string|null}
     */
    BankTransferEventListBankTransferType: ("debit" | "credit" | null) | null;
    /**
     * BankTransferDirection
     * @description Indicates the direction of the transfer: `outbound`: for API-initiated transfers
     * `inbound`: for payments received by the FBO account.
     * @enum {string|null}
     */
    BankTransferEventListDirection: ("inbound" | "outbound" | null) | null;
    /**
     * BankTransferEventListRequest
     * @description Defines the request schema for `/bank_transfer/event/list`
     */
    BankTransferEventListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      start_date?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      end_date?: string | null;
      /**
       * BankTransferID
       * @description Plaid’s unique identifier for a bank transfer.
       */
      bank_transfer_id?: string | null;
      /** @description The account ID to get events for all transactions to/from an account. */
      account_id?: string | null;
      bank_transfer_type?: components["schemas"]["BankTransferEventListBankTransferType"];
      /** @description Filter events by event type. */
      event_types?: components["schemas"]["BankTransferEventType"][];
      /**
       * @description The maximum number of bank transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
       * @default 25
       */
      count?: number | null;
      /**
       * @description The offset into the list of bank transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 bank transfer events will be returned.
       * @default 0
       */
      offset?: number | null;
      /** @description The origination account ID to get events for transfers from a specific origination account. */
      origination_account_id?: string | null;
      direction?: components["schemas"]["BankTransferEventListDirection"];
    };
    /**
     * TransferEventType
     * @description The type of event that this transfer represents.
     *
     * `pending`: A new transfer was created; it is in the pending state.
     *
     * `cancelled`: The transfer was cancelled by the client.
     *
     * `failed`: The transfer failed, no funds were moved.
     *
     * `posted`: The transfer has been successfully submitted to the payment network.
     *
     * `returned`: A posted transfer was returned.
     *
     * `swept`: The transfer was swept to / from the sweep account.
     *
     * `return_swept`: Due to the transfer being returned, funds were pulled from or pushed back to the sweep account.
     * @enum {string}
     */
    TransferEventType:
      | "pending"
      | "cancelled"
      | "failed"
      | "posted"
      | "returned"
      | "swept"
      | "reverse_swept"
      | "return_swept";
    /**
     * BankTransferEventType
     * @description The type of event that this bank transfer represents.
     *
     * `pending`: A new transfer was created; it is in the pending state.
     *
     * `cancelled`: The transfer was cancelled by the client.
     *
     * `failed`: The transfer failed, no funds were moved.
     *
     * `posted`: The transfer has been successfully submitted to the payment network.
     *
     * `reversed`: A posted transfer was reversed.
     * @enum {string}
     */
    BankTransferEventType:
      | "pending"
      | "cancelled"
      | "failed"
      | "posted"
      | "reversed";
    /**
     * TransferEvent
     * @description Represents an event in the Transfers API.
     */
    TransferEvent: {
      /** @description Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers. */
      event_id: number;
      /**
       * Format: date-time
       * @description The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
       */
      timestamp: string;
      event_type: components["schemas"]["TransferEventType"];
      /** @description The account ID associated with the transfer. */
      account_id: string;
      transfer_id: components["schemas"]["TransferID"];
      /** @description The ID of the origination account that this balance belongs to. */
      origination_account_id: string | null;
      transfer_type: components["schemas"]["TransferType"];
      transfer_amount: components["schemas"]["TransferAmount"];
      failure_reason: components["schemas"]["TransferFailure"];
      sweep_id: components["schemas"]["TransferSweepID"];
      sweep_amount: components["schemas"]["TransferSweepAmount"];
    } & { [key: string]: unknown };
    /**
     * BankTransferEvent
     * @description Represents an event in the Bank Transfers API.
     */
    BankTransferEvent: {
      /** @description Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers. */
      event_id: number;
      /**
       * Format: date-time
       * @description The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
       */
      timestamp: string;
      event_type: components["schemas"]["BankTransferEventType"];
      /** @description The account ID associated with the bank transfer. */
      account_id: string;
      bank_transfer_id: components["schemas"]["BankTransferID"];
      /** @description The ID of the origination account that this balance belongs to. */
      origination_account_id: string | null;
      bank_transfer_type: components["schemas"]["BankTransferType"];
      /** @description The bank transfer amount. */
      bank_transfer_amount: string;
      /** @description The currency of the bank transfer amount. */
      bank_transfer_iso_currency_code: string;
      failure_reason: components["schemas"]["BankTransferFailure"];
      direction: components["schemas"]["BankTransferDirection"];
    } & { [key: string]: unknown };
    /**
     * TransferEventListResponse
     * @description Defines the response schema for `/transfer/event/list`
     */
    TransferEventListResponse: {
      transfer_events: components["schemas"]["TransferEvent"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * BankTransferEventListResponse
     * @description Defines the response schema for `/bank_transfer/event/list`
     */
    BankTransferEventListResponse: {
      bank_transfer_events: components["schemas"]["BankTransferEvent"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * BankTransferEventSyncRequest
     * @description Defines the request schema for `/bank_transfer/event/sync`
     */
    BankTransferEventSyncRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The latest (largest) `event_id` fetched via the sync endpoint, or 0 initially. */
      after_id: number;
      /**
       * @description The maximum number of bank transfer events to return.
       * @default 25
       */
      count?: number | null;
    };
    /**
     * TransferEventSyncRequest
     * @description Defines the request schema for `/transfer/event/sync`
     */
    TransferEventSyncRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The latest (largest) `event_id` fetched via the sync endpoint, or 0 initially. */
      after_id: number;
      /**
       * @description The maximum number of transfer events to return.
       * @default 25
       */
      count?: number | null;
    };
    /**
     * BankTransferEventSyncResponse
     * @description Defines the response schema for `/bank_transfer/event/sync`
     */
    BankTransferEventSyncResponse: {
      bank_transfer_events: components["schemas"]["BankTransferEvent"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * TransferEventSyncResponse
     * @description Defines the response schema for `/transfer/event/sync`
     */
    TransferEventSyncResponse: {
      transfer_events: components["schemas"]["TransferEvent"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * BankTransferSweepGetRequest
     * @description Defines the request schema for `/bank_transfer/sweep/get`
     */
    BankTransferSweepGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Identifier of the sweep. */
      sweep_id: string;
    };
    /**
     * TransferSweepGetRequest
     * @description Defines the request schema for `/transfer/sweep/get`
     */
    TransferSweepGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Plaid’s unique identifier for a sweep. */
      sweep_id: string;
    };
    /**
     * BankTransferSweepGetResponse
     * @description BankTransferSweepGetResponse defines the response schema for `/bank_transfer/sweep/get`
     */
    BankTransferSweepGetResponse: {
      sweep: components["schemas"]["BankTransferSweep"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * TransferSweepGetResponse
     * @description Defines the response schema for `/transfer/sweep/get`
     */
    TransferSweepGetResponse: {
      sweep: components["schemas"]["TransferSweep"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * BankTransferSweepListRequest
     * @description BankTransferSweepListRequest defines the request schema for `/bank_transfer/sweep/list`
     */
    BankTransferSweepListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description If multiple origination accounts are available, `origination_account_id` must be used to specify the account that the sweeps belong to. */
      origination_account_id?: string | null;
      /**
       * Format: date-time
       * @description The start datetime of sweeps to return (RFC 3339 format).
       */
      start_time?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of sweeps to return (RFC 3339 format).
       */
      end_time?: string | null;
      /**
       * @description The maximum number of sweeps to return.
       * @default 25
       */
      count?: number | null;
    };
    /**
     * TransferSweepListRequest
     * @description Defines the request schema for `/transfer/sweep/list`
     */
    TransferSweepListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start datetime of sweeps to return (RFC 3339 format).
       */
      start_date?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of sweeps to return (RFC 3339 format).
       */
      end_date?: string | null;
      /**
       * @description The maximum number of sweeps to return.
       * @default 25
       */
      count?: number | null;
      /**
       * @description The number of sweeps to skip before returning results.
       * @default 0
       */
      offset?: number;
    };
    /**
     * TransferSweepListResponse
     * @description Defines the response schema for `/transfer/sweep/list`
     */
    TransferSweepListResponse: {
      sweeps: components["schemas"]["TransferSweep"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * BankTransferSweepListResponse
     * @description BankTransferSweepListResponse defines the response schema for `/bank_transfer/sweep/list`
     */
    BankTransferSweepListResponse: {
      sweeps: components["schemas"]["BankTransferSweep"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * BankTransferSweep
     * @description BankTransferSweep describes a sweep transfer.
     */
    BankTransferSweep: {
      /** @description Identifier of the sweep. */
      id: string;
      /**
       * Format: date-time
       * @description The datetime when the sweep occurred, in RFC 3339 format.
       */
      created_at: string;
      /** @description The amount of the sweep. */
      amount: string;
      /** @description The currency of the sweep, e.g. "USD". */
      iso_currency_code: string;
    } & { [key: string]: unknown };
    /**
     * TransferSweep
     * @description Describes a sweep of funds to / from the sweep account.
     *
     * A sweep is associated with many sweep events (events of type `swept` or `return_swept`) which can be retrieved by invoking the `/transfer/event/list` endpoint with the corresponding `sweep_id`.
     *
     * `swept` events occur when the transfer amount is credited or debited from your sweep account, depending on the `type` of the transfer. `return_swept` events occur when a transfer is returned and Plaid undoes the credit or debit.
     *
     * The total sum of the `swept` and `return_swept` events is equal to the `amount` of the sweep Plaid creates and matches the amount of the entry on your sweep account ledger.
     */
    TransferSweep: {
      /** @description Identifier of the sweep. */
      id: string;
      /**
       * Format: date-time
       * @description The datetime when the sweep occurred, in RFC 3339 format.
       */
      created: string;
      /**
       * @description Signed decimal amount of the sweep as it appears on your sweep account ledger (e.g. "-10.00")
       *
       * If amount is not present, the sweep was net-settled to zero and outstanding debits and credits between the sweep account and Plaid are balanced.
       */
      amount: string;
      /** @description The currency of the sweep, e.g. "USD". */
      iso_currency_code: string;
    } & { [key: string]: unknown };
    /**
     * SimulatedTransferSweep
     * @description A sweep returned from the `/sandbox/transfer/sweep/simulate` endpoint.
     * Can be null if there are no transfers to include in a sweep.
     */
    SimulatedTransferSweep: components["schemas"]["TransferSweep"] &
      ({ [key: string]: unknown } | null) & { [key: string]: unknown };
    /**
     * BankTransferBalanceGetRequest
     * @description Defines the request schema for `/bank_transfer/balance/get`
     */
    BankTransferBalanceGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description If multiple origination accounts are available, `origination_account_id` must be used to specify the account for which balance will be returned. */
      origination_account_id?: string | null;
    };
    /**
     * BankTransferBalanceGetResponse
     * @description Defines the response schema for `/bank_transfer/balance/get`
     */
    BankTransferBalanceGetResponse: {
      balance: components["schemas"]["BankTransferBalance"];
      /** @description The ID of the origination account that this balance belongs to. */
      origination_account_id: string | null;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * BankTransferBalance
     * @description Information about the balance of a bank transfer
     */
    BankTransferBalance: {
      /** @description The total available balance - the sum of all successful debit transfer amounts minus all credit transfer amounts. */
      available: string;
      /** @description The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance. */
      transactable: string;
    } & { [key: string]: unknown };
    /**
     * BankTransferMigrateAccountRequest
     * @description Defines the request schema for `/bank_transfer/migrate_account`
     */
    BankTransferMigrateAccountRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The user's account number. */
      account_number: string;
      /** @description The user's routing number. */
      routing_number: string;
      /** @description The user's wire transfer routing number. This is the ABA number; for some institutions, this may differ from the ACH number used in `routing_number`. */
      wire_routing_number?: string;
      /** @description The type of the bank account (`checking` or `savings`). */
      account_type: string;
    };
    /**
     * BankTransferMigrateAccountResponse
     * @description Defines the response schema for `/bank_transfer/migrate_account`
     */
    BankTransferMigrateAccountResponse: {
      /** @description The Plaid `access_token` for the newly created Item. */
      access_token: string;
      /** @description The Plaid `account_id` for the newly created Item. */
      account_id: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * TransferMigrateAccountRequest
     * @description Defines the request schema for `/transfer/migrate_account`
     */
    TransferMigrateAccountRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The user's account number. */
      account_number: string;
      /** @description The user's routing number. */
      routing_number: string;
      /** @description The user's wire transfer routing number. This is the ABA number; for some institutions, this may differ from the ACH number used in `routing_number`. */
      wire_routing_number?: string;
      /** @description The type of the bank account (`checking` or `savings`). */
      account_type: string;
    };
    /**
     * TransferMigrateAccountResponse
     * @description Defines the response schema for `/transfer/migrate_account`
     */
    TransferMigrateAccountResponse: {
      /** @description The Plaid `access_token` for the newly created Item. */
      access_token: string;
      /** @description The Plaid `account_id` for the newly created Item. */
      account_id: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * TransferRepaymentListRequest
     * @description Defines the request schema for `/transfer/repayment/list`
     */
    TransferRepaymentListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start datetime of repayments to return (RFC 3339 format).
       */
      start_date?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of repayments to return (RFC 3339 format).
       */
      end_date?: string | null;
      /**
       * @description The maximum number of repayments to return.
       * @default 25
       */
      count?: number | null;
      /**
       * @description The number of repayments to skip before returning results.
       * @default 0
       */
      offset?: number;
    };
    /**
     * TransferRepaymentListResponse
     * @description Defines the response schema for `/transfer/repayments/list`
     */
    TransferRepaymentListResponse: {
      repayments: components["schemas"]["TransferRepayment"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * TransferRepayment
     * @description A repayment is created automatically after one or more guaranteed transactions receive a return. If there are multiple eligible returns in a day, they are batched together into a single repayment.
     *
     * Repayments are sent over ACH, with funds typically available on the next banking day.
     */
    TransferRepayment: {
      /** @description Identifier of the repayment. */
      repayment_id: string;
      /**
       * Format: date-time
       * @description The datetime when the repayment occurred, in RFC 3339 format.
       */
      created: string;
      /** @description Decimal amount of the repayment as it appears on your account ledger. */
      amount: string;
      /** @description The currency of the repayment, e.g. "USD". */
      iso_currency_code: string;
    } & { [key: string]: unknown };
    /**
     * TransferRepaymentReturnListRequest
     * @description Defines the request schema for `/transfer/repayment/return/list`
     */
    TransferRepaymentReturnListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Identifier of the repayment to query. */
      repayment_id: string;
      /**
       * @description The maximum number of repayments to return.
       * @default 25
       */
      count?: number | null;
      /**
       * @description The number of repayments to skip before returning results.
       * @default 0
       */
      offset?: number;
    };
    /**
     * TransferRepaymentReturnListResponse
     * @description Defines the response schema for `/transfer/repayments/return/list`
     */
    TransferRepaymentReturnListResponse: {
      repayment_returns: components["schemas"]["TransferRepaymentReturn"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * TransferRepaymentReturn
     * @description Represents a return on a Guaranteed ACH transfer that is included in the specified repayment.
     */
    TransferRepaymentReturn: {
      /** @description The unique identifier of the guaranteed transfer that was returned. */
      transfer_id: string;
      /** @description The unique identifier of the corresponding `returned` transfer event. */
      event_id: number;
      /** @description The value of the returned transfer. */
      amount: string;
      /** @description The currency of the repayment, e.g. "USD". */
      iso_currency_code: string;
    } & { [key: string]: unknown };
    /**
     * TransferIntentCreateRequest
     * @description Defines the request schema for `/transfer/intent/create`
     */
    TransferIntentCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The Plaid `account_id` for the account that will be debited or credited. */
      account_id?: string | null;
      mode: components["schemas"]["TransferIntentCreateMode"];
      amount: components["schemas"]["TransferAmount"];
      /** @description A description for the underlying transfer. Maximum of 8 characters. */
      description: string;
      ach_class: components["schemas"]["ACHClass"];
      /** @description Plaid’s unique identifier for the origination account for the intent. If not provided, the default account will be used. */
      origination_account_id?: string | null;
      user: components["schemas"]["TransferUserInRequest"];
      metadata?: components["schemas"]["TransferMetadata"];
      /** @description The currency of the transfer amount, e.g. "USD" */
      iso_currency_code?: string;
      /**
       * @description When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guaranteed ACH customers only).
       * @default false
       */
      require_guarantee?: boolean | null;
    };
    /**
     * @description The status of the transfer intent.
     *
     * - `PENDING` – The transfer intent is pending.
     * - `SUCCEEDED` – The transfer intent was successfully created.
     * - `FAILED` – The transfer intent was unable to be created.
     * @enum {string}
     */
    TransferIntentStatus: "PENDING" | "SUCCEEDED" | "FAILED";
    /**
     * TransferIntentCreate
     * @description Represents a transfer intent within Transfer UI.
     */
    TransferIntentCreate: {
      /** @description Plaid's unique identifier for the transfer intent object. */
      id: string;
      /**
       * Format: date-time
       * @description The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.
       */
      created: string;
      status: components["schemas"]["TransferIntentStatus"];
      /** @description The Plaid `account_id` for the account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
      account_id?: string | null;
      /** @description Plaid’s unique identifier for the origination account for the intent. If not provided, the default account will be used. */
      origination_account_id: string;
      amount: components["schemas"]["TransferAmount"];
      mode: components["schemas"]["TransferIntentCreateMode"];
      ach_class: components["schemas"]["ACHClass"];
      user: components["schemas"]["TransferUserInResponse"];
      /** @description A description for the underlying transfer. Maximum of 8 characters. */
      description: string;
      metadata?: components["schemas"]["TransferMetadata"];
      /** @description The currency of the transfer amount, e.g. "USD" */
      iso_currency_code: string;
      /** @description When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guaranteed ACH customers only). */
      require_guarantee?: boolean | null;
    } & { [key: string]: unknown };
    /**
     * TransferIntentCreateResponse
     * @description Defines the response schema for `/transfer/intent/create`
     */
    TransferIntentCreateResponse: {
      transfer_intent: components["schemas"]["TransferIntentCreate"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * TransferIntentGetRequest
     * @description Defines the request schema for `/transfer/intent/get`
     */
    TransferIntentGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Plaid's unique identifier for a transfer intent object. */
      transfer_intent_id: string;
    } & { [key: string]: unknown };
    /**
     * @description
     * A decision regarding the proposed transfer.
     *
     * `APPROVED` – The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
     *
     * `DECLINED` – Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
     * @enum {string|null}
     */
    TransferIntentAuthorizationDecision: ("APPROVED" | "DECLINED") | null;
    /**
     * TransferIntentGet
     * @description Represents a transfer intent within Transfer UI.
     */
    TransferIntentGet: {
      /** @description Plaid's unique identifier for a transfer intent object. */
      id: string;
      /**
       * Format: date-time
       * @description The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.
       */
      created: string;
      status: components["schemas"]["TransferIntentStatus"];
      /** @description Plaid's unique identifier for the transfer created through the UI. Returned only if the transfer was successfully created. Null value otherwise. */
      transfer_id: string | null;
      failure_reason: components["schemas"]["TransferIntentGetFailureReason"];
      authorization_decision: components["schemas"]["TransferIntentAuthorizationDecision"];
      authorization_decision_rationale: components["schemas"]["TransferAuthorizationDecisionRationale"];
      /** @description The Plaid `account_id` for the account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
      account_id?: string | null;
      /** @description Plaid’s unique identifier for the origination account used for the transfer. */
      origination_account_id: string;
      amount: components["schemas"]["TransferAmount"];
      mode: components["schemas"]["TransferIntentCreateMode"];
      ach_class: components["schemas"]["ACHClass"];
      user: components["schemas"]["TransferUserInResponse"];
      /** @description A description for the underlying transfer. Maximum of 8 characters. */
      description: string;
      metadata?: components["schemas"]["TransferMetadata"];
      /** @description The currency of the transfer amount, e.g. "USD" */
      iso_currency_code: string;
      /** @description When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guaranteed ACH customers only). */
      require_guarantee?: boolean | null;
      guarantee_decision: components["schemas"]["TransferAuthorizationGuaranteeDecision"];
      guarantee_decision_rationale: components["schemas"]["TransferAuthorizationGuaranteeDecisionRationale"];
    } & { [key: string]: unknown };
    /**
     * TransferIntentGetResponse
     * @description Defines the response schema for `/transfer/intent/get`
     */
    TransferIntentGetResponse: {
      transfer_intent: components["schemas"]["TransferIntentGet"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * SandboxBankTransferSimulateRequest
     * @description Defines the request schema for `/sandbox/bank_transfer/simulate`
     */
    SandboxBankTransferSimulateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      bank_transfer_id: components["schemas"]["BankTransferID"];
      /**
       * @description The asynchronous event to be simulated. May be: `posted`, `failed`, or `reversed`.
       *
       * An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:
       *
       * `pending` --> `failed`
       *
       * `pending` --> `posted`
       *
       * `posted` --> `reversed`
       */
      event_type: string;
      failure_reason?: components["schemas"]["BankTransferFailure"];
    };
    /**
     * SandboxTransferSimulateRequest
     * @description Defines the request schema for `/sandbox/transfer/simulate`
     */
    SandboxTransferSimulateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      transfer_id: components["schemas"]["TransferID"];
      /**
       * @description The asynchronous event to be simulated. May be: `posted`, `failed`, or `returned`.
       *
       * An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:
       *
       * `pending` --> `failed`
       *
       * `pending` --> `posted`
       *
       * `posted` --> `returned`
       */
      event_type: string;
      failure_reason?: components["schemas"]["TransferFailure"];
    };
    /**
     * SandboxTransferSweepSimulateRequest
     * @description Defines the request schema for `/sandbox/transfer/sweep/simulate`
     */
    SandboxTransferSweepSimulateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /**
     * SandboxBankTransferSimulateResponse
     * @description Defines the response schema for `/sandbox/bank_transfer/simulate`
     */
    SandboxBankTransferSimulateResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * SandboxTransferSimulateResponse
     * @description Defines the response schema for `/sandbox/transfer/simulate`
     */
    SandboxTransferSimulateResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * SandboxTransferSweepSimulateResponse
     * @description Defines the response schema for `/sandbox/transfer/sweep/simulate`
     */
    SandboxTransferSweepSimulateResponse: {
      sweep?: components["schemas"]["SimulatedTransferSweep"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * SandboxTransferRepaymentSimulateRequest
     * @description Defines the request schema for `/sandbox/transfer/repayment/simulate`
     */
    SandboxTransferRepaymentSimulateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /**
     * SandboxTransferSimulateResponse
     * @description Defines the response schema for `/sandbox/transfer/repayment/simulate`
     */
    SandboxTransferRepaymentSimulateResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * AccountFiltersResponse
     * @description The `account_filters` specified in the original call to `/link/token/create`.
     */
    AccountFiltersResponse: {
      depository?: components["schemas"]["DepositoryFilter"];
      credit?: components["schemas"]["CreditFilter"];
      loan?: components["schemas"]["LoanFilter"];
      investment?: components["schemas"]["InvestmentFilter"];
    } & { [key: string]: unknown };
    /**
     * InstitutionsSearchAccountFilter
     * @description An account filter to apply to institutions search requests
     */
    InstitutionsSearchAccountFilter: {
      loan?: components["schemas"]["AccountSubtype"][];
      depository?: components["schemas"]["AccountSubtype"][];
      credit?: components["schemas"]["AccountSubtype"][];
      investment?: components["schemas"]["AccountSubtype"][];
    } & { [key: string]: unknown };
    /**
     * AccountIdentity
     * @description Identity information about an account
     */
    AccountIdentity: components["schemas"]["AccountBase"] &
      ({
        /** @description Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29) */
        owners: components["schemas"]["Owner"][];
      } & { [key: string]: unknown });
    /**
     * AccountAssets
     * @description Asset information about an account
     */
    AccountAssets: components["schemas"]["AccountBase"] &
      ({
        /** @description The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Assets endpoints. */
        days_available?: number;
        /** @description Transaction history associated with the account. Only returned by Assets endpoints. Transaction history returned by endpoints such as `/transactions/get` or `/investments/transactions/get` will be returned in the top-level `transactions` field instead. */
        transactions?: components["schemas"]["AssetReportTransaction"][];
        /** @description Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29) */
        owners?: components["schemas"]["Owner"][];
        /** @description Calculated data about the historical balances on the account. Only returned by Assets endpoints and currently not supported by `brokerage` or `investment` accounts. */
        historical_balances?: components["schemas"]["HistoricalBalance"][];
      } & { [key: string]: unknown }) & {
        days_available: unknown;
        transactions: unknown;
        owners: unknown;
        historical_balances: unknown;
      };
    /**
     * DepositoryFilter
     * @description A filter to apply to `depository`-type accounts
     */
    DepositoryFilter: {
      account_subtypes: components["schemas"]["DepositoryAccountSubtypes"];
    } & { [key: string]: unknown };
    /**
     * CreditFilter
     * @description A filter to apply to `credit`-type accounts
     */
    CreditFilter: {
      account_subtypes: components["schemas"]["CreditAccountSubtypes"];
    } & { [key: string]: unknown };
    /**
     * LoanFilter
     * @description A filter to apply to `loan`-type accounts
     */
    LoanFilter: {
      account_subtypes: components["schemas"]["LoanAccountSubtypes"];
    } & { [key: string]: unknown };
    /**
     * InvestmentFilter
     * @description A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier).
     */
    InvestmentFilter: {
      account_subtypes: components["schemas"]["InvestmentAccountSubtypes"];
    } & { [key: string]: unknown };
    /**
     * DepositoryAccountSubtypes
     * @description An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     */
    DepositoryAccountSubtypes: components["schemas"]["DepositoryAccountSubtype"][];
    /**
     * CreditAccountSubtypes
     * @description An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     */
    CreditAccountSubtypes: components["schemas"]["CreditAccountSubtype"][];
    /**
     * LoanAccountSubtypes
     * @description An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     */
    LoanAccountSubtypes: components["schemas"]["LoanAccountSubtype"][];
    /**
     * InvestmentAccountSubtypes
     * @description An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     */
    InvestmentAccountSubtypes: components["schemas"]["InvestmentAccountSubtype"][];
    /**
     * @description Valid account subtypes for depository accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-depository).
     * @enum {string}
     */
    DepositoryAccountSubtype:
      | "checking"
      | "savings"
      | "hsa"
      | "cd"
      | "money market"
      | "paypal"
      | "prepaid"
      | "cash management"
      | "ebt"
      | "all";
    /**
     * @description Valid account subtypes for credit accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-credit).
     * @enum {string}
     */
    CreditAccountSubtype: "credit card" | "paypal" | "all";
    /**
     * @description Valid account subtypes for loan accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-loan).
     * @enum {string}
     */
    LoanAccountSubtype:
      | "auto"
      | "business"
      | "commercial"
      | "construction"
      | "consumer"
      | "home equity"
      | "loan"
      | "mortgage"
      | "line of credit"
      | "student"
      | "other"
      | "all";
    /**
     * @description Valid account subtypes for investment accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-investment).
     * @enum {string}
     */
    InvestmentAccountSubtype:
      | "529"
      | "401a"
      | "401k"
      | "403B"
      | "457b"
      | "brokerage"
      | "cash isa"
      | "crypto exchange"
      | "education savings account"
      | "fixed annuity"
      | "gic"
      | "health reimbursement arrangement"
      | "hsa"
      | "ira"
      | "isa"
      | "keogh"
      | "lif"
      | "life insurance"
      | "lira"
      | "lrif"
      | "lrsp"
      | "mutual fund"
      | "non-taxable brokerage account"
      | "other"
      | "other annuity"
      | "other insurance"
      | "pension"
      | "prif"
      | "profit sharing plan"
      | "qshr"
      | "rdsp"
      | "resp"
      | "retirement"
      | "rlif"
      | "roth"
      | "roth 401k"
      | "rrif"
      | "rrsp"
      | "sarsep"
      | "sep ira"
      | "simple ira"
      | "sipp"
      | "stock plan"
      | "tfsa"
      | "trust"
      | "ugma"
      | "utma"
      | "variable annuity"
      | "all";
    /**
     * EmployersSearchRequest
     * @description EmployersSearchRequest defines the request schema for `/employers/search`.
     */
    EmployersSearchRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The employer name to be searched for. */
      query: string;
      /** @description The Plaid products the returned employers should support. Currently, this field must be set to `"deposit_switch"`. */
      products: string[];
    };
    /**
     * EmployersSearchResponse
     * @description EmployersSearchResponse defines the response schema for `/employers/search`.
     */
    EmployersSearchResponse: {
      /** @description A list of employers matching the search criteria. */
      employers: components["schemas"]["Employer"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * Employer
     * @description Data about the employer.
     */
    Employer: {
      /** @description Plaid's unique identifier for the employer. */
      employer_id: string;
      /** @description The name of the employer */
      name: string;
      address: components["schemas"]["AddressDataNullable"];
      /**
       * Format: double
       * @description A number from 0 to 1 indicating Plaid's level of confidence in the pairing between the employer and the institution (not yet implemented).
       */
      confidence_score: number;
    } & { [key: string]: unknown };
    /**
     * IncomeVerificationCreateRequest
     * @description IncomeVerificationCreateRequest defines the request schema for `/income/verification/create`
     */
    IncomeVerificationCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The URL endpoint to which Plaid should send webhooks related to the progress of the income verification process. */
      webhook: string;
      /** @description The ID of a precheck created with `/income/verification/precheck`. Will be used to improve conversion of the income verification flow. */
      precheck_id?: string;
      options?: components["schemas"]["IncomeVerificationCreateRequestOptions"];
    };
    /**
     * IncomeVerificationCreateRequestOptions
     * @description Optional arguments for `/income/verification/create`
     */
    IncomeVerificationCreateRequestOptions: {
      /** @description An array of access tokens corresponding to the Items that will be cross-referenced with the product data. Plaid will attempt to correlate transaction history from these Items with data from the user's paystub, such as date and amount. The `verification` status of the paystub as returned by `/income/verification/paystubs/get` will indicate if the verification status was successful, or, if not, why it failed. If the `transactions` product was not initialized for the Items during Link, it will be initialized after this Link session. */
      access_tokens?: components["schemas"]["AccessToken"][];
    };
    /**
     * IncomeVerificationCreateResponse
     * @description IncomeVerificationCreateResponse defines the response schema for `/income/verification/create`.
     */
    IncomeVerificationCreateResponse: {
      /** @description ID of the verification. This ID is persisted throughout the lifetime of the verification. */
      income_verification_id: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * IncomeVerificationPrecheckRequest
     * @description IncomeVerificationPrecheckRequest defines the request schema for `/income/verification/precheck`
     */
    IncomeVerificationPrecheckRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user?: components["schemas"]["IncomeVerificationPrecheckUser"];
      employer?: components["schemas"]["IncomeVerificationPrecheckEmployer"];
      /** @deprecated */
      transactions_access_token?: components["schemas"]["AccessTokenNullable"];
      /** @description An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with `transactions`, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product. */
      transactions_access_tokens?: components["schemas"]["AccessToken"][];
      us_military_info?: components["schemas"]["IncomeVerificationPrecheckMilitaryInfo"];
    };
    /**
     * IncomeVerificationPrecheckEmployer
     * @description Information about the end user's employer
     */
    IncomeVerificationPrecheckEmployer: {
      /** @description The employer's name */
      name?: string | null;
      address?: components["schemas"]["IncomeVerificationPrecheckEmployerAddress"];
      /** @description The employer's tax id */
      tax_id?: string | null;
      /** @description The URL for the employer's public website */
      url?: string | null;
    } | null;
    /**
     * IncomeVerificationPrecheckEmployerAddress
     * @description The address of the employer
     */
    IncomeVerificationPrecheckEmployerAddress:
      | (components["schemas"]["IncomeVerificationPrecheckEmployerAddressData"] & {
          [key: string]: unknown;
        })
      | null;
    /**
     * AddressData
     * @description Data about the components comprising an address.
     */
    IncomeVerificationPrecheckEmployerAddressData: {
      /** @description The full city name */
      city?: string;
      /** @description The ISO 3166-1 alpha-2 country code */
      country?: string;
      /** @description The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`. */
      postal_code?: string;
      /**
       * @description The region or state. In API versions 2018-05-22 and earlier, this field is called `state`.
       * Example: `"NC"`
       */
      region?: string;
      /**
       * @description The full street address
       * Example: `"564 Main Street, APT 15"`
       */
      street?: string;
    } & { [key: string]: unknown };
    /**
     * IncomeVerificationPrecheckMilitaryInfo
     * @description Data about military info in the income verification precheck.
     */
    IncomeVerificationPrecheckMilitaryInfo: {
      /** @description Is the user currently active duty in the US military */
      is_active_duty?: boolean | null;
      /**
       * @description If the user is currently serving in the US military, the branch of the military in which they are serving
       * Valid values: 'AIR FORCE', 'ARMY', 'COAST GUARD', 'MARINES', 'NAVY', 'UNKNOWN'
       */
      branch?: string | null;
    } | null;
    /**
     * IncomeVerificationPrecheckUser
     * @description Information about the user whose eligibility is being evaluated.
     */
    IncomeVerificationPrecheckUser: {
      /** @description The user's first name */
      first_name?: string | null;
      /** @description The user's last name */
      last_name?: string | null;
      /** @description The user's email address */
      email_address?: string | null;
      home_address?: components["schemas"]["SignalAddressData"];
    } | null;
    /**
     * IncomeVerificationPrecheckResponse
     * @description IncomeVerificationPrecheckResponse defines the response schema for `/income/verification/precheck`.
     */
    IncomeVerificationPrecheckResponse: {
      /** @description ID of the precheck. Provide this value when calling `/link/token/create` in order to optimize Link conversion. */
      precheck_id: string;
      request_id: components["schemas"]["RequestID"];
      confidence: components["schemas"]["IncomeVerificationPrecheckConfidence"];
    } & { [key: string]: unknown };
    /**
     * @description The confidence that Plaid can support the user in the digital income verification flow instead of requiring a manual paystub upload. One of the following:
     *
     * `"HIGH"`: It is very likely that this user can use the digital income verification flow.
     *
     * "`LOW`": It is unlikely that this user can use the digital income verification flow.
     *
     * `"UNKNOWN"`: It was not possible to determine if the user is supportable with the information passed.
     * @enum {string}
     */
    IncomeVerificationPrecheckConfidence: "HIGH" | "LOW" | "UNKNOWN";
    /**
     * LinkTokenCreateRequestIncomeVerification
     * @description Specifies options for initializing Link for use with the Income (beta) product. This field is required if `income_verification` is included in the `products` array.
     */
    LinkTokenCreateRequestIncomeVerification: {
      /**
       * @deprecated
       * @description The `income_verification_id` of the verification instance, as provided by `/income/verification/create`.
       */
      income_verification_id?: string;
      /** @description The `asset_report_id` of an asset report associated with the user, as provided by `/asset_report/create`. Providing an `asset_report_id` is optional and can be used to verify the user through a streamlined flow. If provided, the bank linking flow will be skipped. */
      asset_report_id?: string;
      /** @description The ID of a precheck created with `/income/verification/precheck`. Will be used to improve conversion of the income verification flow by streamlining the Link interface presented to the end user. */
      precheck_id?: string;
      /**
       * @description An array of access tokens corresponding to Items that a user has previously connected with. Data from these institutions will be cross-referenced with document data received during the Document Income flow to help verify that the uploaded documents are accurate. If the `transactions` product was not initialized for these Items during link, it will be initialized after this Link session.
       *
       * This field should only be used with the `payroll` income source type.
       */
      access_tokens?: components["schemas"]["AccessToken"][];
      /** @description The types of source income data that users will be permitted to share. Options include `bank` and `payroll`. Currently you can only specify one of these options. */
      income_source_types?: components["schemas"]["IncomeVerificationSourceType"][];
      bank_income?: components["schemas"]["LinkTokenCreateRequestIncomeVerificationBankIncome"];
      payroll_income?: components["schemas"]["LinkTokenCreateRequestIncomeVerificationPayrollIncome"];
      /** @description A list of user stated income sources */
      stated_income_sources?: components["schemas"]["LinkTokenCreateRequestUserStatedIncomeSource"][];
    };
    /**
     * IncomeVerificationSourceType
     * @description The types of source income data that users should be able to share
     * @enum {string}
     */
    IncomeVerificationSourceType: "bank" | "payroll";
    /**
     * LinkTokenCreateRequestIncomeVerificationBankIncome
     * @description Specifies options for initializing Link for use with Bank Income. This field is required if `income_verification` is included in the `products` array and `bank` is specified in `income_source_types`.
     */
    LinkTokenCreateRequestIncomeVerificationBankIncome: {
      /** @description The number of days of data to request for the Bank Income product */
      days_requested?: number;
      /**
       * @description Whether to enable multiple items to be added in the link session
       * @default false
       */
      enable_multiple_items?: boolean | null;
    };
    /**
     * LinkTokenCreateRequestIncomeVerificationPayrollIncome
     * @description Specifies options for initializing Link for use with Payroll Income. This field is required if `income_verification` is included in the `products` array and `payroll` is specified in `income_source_types`.
     */
    LinkTokenCreateRequestIncomeVerificationPayrollIncome: {
      /** @description The types of payroll income verification to enable for the link session. If none are specified, then users will see both document and digital payroll income. */
      flow_types?:
        | components["schemas"]["IncomeVerificationPayrollFlowType"][]
        | null;
      /** @description An identifier to indicate whether the income verification link token will be used for an update or not */
      is_update_mode?: boolean;
    };
    /**
     * IncomeVerificationPayrollFlowType
     * @description Flow types to retrieve payroll income data
     * @enum {string}
     */
    IncomeVerificationPayrollFlowType:
      | "payroll_digital_income"
      | "payroll_document_income";
    /**
     * IncomeVerificationStatusWebhook
     * @description Fired when the status of an income verification instance has changed. It will typically take several minutes for this webhook to fire after the end user has uploaded their documents in the Document Income flow.
     */
    IncomeVerificationStatusWebhook: {
      /** @description `"INCOME"` */
      webhook_type: string;
      /** @description `INCOME_VERIFICATION` */
      webhook_code: string;
      /** @description The Item ID associated with the verification. */
      item_id: string;
      user_id?: components["schemas"]["UserId"];
      /**
       * @description `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.
       *
       * `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.
       *
       * `VERIFICATION_STATUS_PENDING_APPROVAL`: The income verification has been sent to the user for review.
       */
      verification_status: string;
    } & { [key: string]: unknown };
    /** @description IncomeVerificationRefreshRequest defines the request schema for `/income/verification/refresh` */
    IncomeVerificationRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @deprecated
       * @description The ID of the verification.
       */
      income_verification_id?: string | null;
      access_token?: components["schemas"]["AccessTokenNullable"];
    };
    /** @description IncomeVerificationRequestResponse defines the response schema for `/income/verification/refresh` */
    IncomeVerificationRefreshResponse: {
      request_id: components["schemas"]["RequestID"];
      verification_refresh_status: components["schemas"]["VerificationRefreshStatus"];
    } & { [key: string]: unknown };
    /**
     * IncomeSummary
     * @description The verified fields from a paystub verification. All fields are provided as reported on the paystub.
     */
    IncomeSummary: {
      employer_name: components["schemas"]["EmployerIncomeSummaryFieldString"];
      employee_name: components["schemas"]["EmployeeIncomeSummaryFieldString"];
      ytd_gross_income: components["schemas"]["YTDGrossIncomeSummaryFieldNumber"];
      ytd_net_income: components["schemas"]["YTDNetIncomeSummaryFieldNumber"];
      pay_frequency: components["schemas"]["PayFrequency"];
      projected_wage: components["schemas"]["ProjectedIncomeSummaryFieldNumber"];
      verified_transaction: components["schemas"]["TransactionData"];
    } & { [key: string]: unknown };
    /**
     * TransactionData
     * @description Information about the matched direct deposit transaction used to verify a user's payroll information.
     */
    TransactionData:
      | ({
          /** @description The description of the transaction. */
          description: string;
          /**
           * Format: double
           * @description The amount of the transaction.
           */
          amount: number;
          /**
           * Format: date
           * @description The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
           */
          date: string;
          /** @description A unique identifier for the end user's account. */
          account_id: string;
          /** @description A unique identifier for the transaction. */
          transaction_id: string;
        } & { [key: string]: unknown })
      | null;
    /**
     * IncomeSummaryFieldString
     * @description Data about the income summary
     */
    IncomeSummaryFieldString:
      | ({
          /** @description The value of the field. */
          value: string;
          verification_status: components["schemas"]["VerificationStatus"];
        } & { [key: string]: unknown })
      | null;
    /** @description The name of the employer, as reported on the paystub. */
    EmployerIncomeSummaryFieldString: components["schemas"]["IncomeSummaryFieldString"] & {
      [key: string]: unknown;
    };
    /** @description The name of the employee, as reported on the paystub. */
    EmployeeIncomeSummaryFieldString: components["schemas"]["IncomeSummaryFieldString"] & {
      [key: string]: unknown;
    };
    /**
     * IncomeSummaryFieldNumber
     * @description Field number for income summary
     */
    IncomeSummaryFieldNumber:
      | ({
          /**
           * Format: double
           * @description The value of the field.
           */
          value: number;
          verification_status: components["schemas"]["VerificationStatus"];
        } & { [key: string]: unknown })
      | null;
    /** @description Year-to-date pre-tax earnings, as reported on the paystub. */
    YTDGrossIncomeSummaryFieldNumber: components["schemas"]["IncomeSummaryFieldNumber"] & {
      [key: string]: unknown;
    };
    /** @description Year-to-date earnings after any tax withholdings, benefit payments or deductions, as reported on the paystub. */
    YTDNetIncomeSummaryFieldNumber: components["schemas"]["IncomeSummaryFieldNumber"] & {
      [key: string]: unknown;
    };
    /** @description The employee's estimated annual salary, as derived from information reported on the paystub. */
    ProjectedIncomeSummaryFieldNumber: components["schemas"]["IncomeSummaryFieldNumber"] & {
      [key: string]: unknown;
    };
    /**
     * PayFrequency
     * @description The frequency of the pay period.
     */
    PayFrequency:
      | ({
          value: components["schemas"]["PayFrequencyValue"];
          verification_status: components["schemas"]["VerificationStatus"];
        } & { [key: string]: unknown })
      | null;
    /**
     * PayFrequencyValue
     * @description The frequency of the pay period.
     * @enum {string}
     */
    PayFrequencyValue:
      | "monthly"
      | "semimonthly"
      | "weekly"
      | "biweekly"
      | "unknown"
      | null;
    /**
     * VerificationStatus
     * @description The verification status. One of the following:
     *
     * `"VERIFIED"`: The information was successfully verified.
     *
     * `"UNVERIFIED"`: The verification has not yet been performed.
     *
     * `"NEEDS_INFO"`: The verification was attempted but could not be completed due to missing information.
     *
     * "`UNABLE_TO_VERIFY`": The verification was performed and the information could not be verified.
     *
     * `"UNKNOWN"`: The verification status is unknown.
     * @enum {string}
     */
    VerificationStatus:
      | "VERIFIED"
      | "UNVERIFIED"
      | "NEEDS_INFO"
      | "UNABLE_TO_VERIFY"
      | "UNKNOWN";
    /**
     * VerificationRefreshStatus
     * @description The verification refresh status. One of the following:
     *
     * `"VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED"` User presence is required to refresh an income verification.
     * `"VERIFICATION_REFRESH_SUCCESSFUL"` The income verification refresh was successful.
     * `"VERIFICATION_REFRESH_NOT_FOUND"` No new data was found after the income verification refresh.
     * @enum {string}
     */
    VerificationRefreshStatus:
      | "VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED"
      | "VERIFICATION_REFRESH_SUCCESSFUL"
      | "VERIFICATION_REFRESH_NOT_FOUND";
    /**
     * CreditPayrollIncomeRefreshStatus
     * @description The verification refresh status. One of the following:
     *
     * `"USER_PRESENCE_REQUIRED"` User presence is required to refresh an income verification.
     * `"SUCCESSFUL"` The income verification refresh was successful.
     * `"NOT_FOUND"` No new data was found after the income verification refresh.
     */
    CreditPayrollIncomeRefreshStatus: string;
    /**
     * IncomeVerificationPaystubsGetRequest
     * @description IncomeVerificationPaystubsGetRequest defines the request schema for `/income/verification/paystubs/get`.
     */
    IncomeVerificationPaystubsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @deprecated
       * @description The ID of the verification for which to get paystub information.
       */
      income_verification_id?: string | null;
      access_token?: components["schemas"]["AccessTokenNullable"];
    };
    /**
     * IncomeVerificationPaystubsGetResponse
     * @description IncomeVerificationPaystubsGetResponse defines the response schema for `/income/verification/paystubs/get`.
     */
    IncomeVerificationPaystubsGetResponse: {
      /** @description Metadata for an income document. */
      document_metadata?: components["schemas"]["DocumentMetadata"][];
      paystubs: components["schemas"]["Paystub"][];
      error?: components["schemas"]["PlaidError"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * DocumentMetadata
     * @description An object representing metadata from the end user's uploaded document.
     */
    DocumentMetadata: {
      /** @description The name of the document. */
      name?: string;
      /** @description The processing status of the document. */
      status?: string;
      /** @description An identifier of the document that is also present in the paystub response. */
      doc_id?: string;
      doc_type?: components["schemas"]["DocType"];
    } & { [key: string]: unknown };
    /**
     * DocType
     * @description The type of document.
     *
     * `DOCUMENT_TYPE_PAYSTUB`: A paystub.
     *
     * `DOCUMENT_TYPE_BANK_STATEMENT`: A bank statement.
     *
     * `DOCUMENT_TYPE_US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.
     *
     * `DOCUMENT_TYPE_US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.
     *
     * `DOCUMENT_TYPE_US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.
     *
     * `DOCUMENT_TYPE_US_MILITARY_CLES`: A Civilian Leave and Earnings Statment (CLES) issued by the US military.
     *
     * `DOCUMENT_TYPE_GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.
     *
     * `DOCUMENT_TYPE_NONE`: Used to indicate that there is no underlying document for the data.
     *
     * `UNKNOWN`: Document type could not be determined.
     * @enum {string}
     */
    DocType:
      | "UNKNOWN"
      | "DOCUMENT_TYPE_PAYSTUB"
      | "DOCUMENT_TYPE_BANK_STATEMENT"
      | "DOCUMENT_TYPE_US_TAX_W2"
      | "DOCUMENT_TYPE_US_MILITARY_ERAS"
      | "DOCUMENT_TYPE_US_MILITARY_LES"
      | "DOCUMENT_TYPE_US_MILITARY_CLES"
      | "DOCUMENT_TYPE_GIG"
      | "DOCUMENT_TYPE_NONE"
      | "DOCUMENT_TYPE_US_TAX_1099_MISC"
      | "DOCUMENT_TYPE_US_TAX_1099_K";
    /**
     * Paystub
     * @description An object representing data extracted from the end user's paystub.
     */
    Paystub: {
      deductions: components["schemas"]["Deductions"];
      /** @description An identifier of the document referenced by the document metadata. */
      doc_id: string;
      earnings: components["schemas"]["Earnings"];
      employee: components["schemas"]["Employee"];
      employer: components["schemas"]["PaystubEmployer"];
      employment_details?: components["schemas"]["EmploymentDetails"];
      net_pay: components["schemas"]["NetPay"];
      pay_period_details: components["schemas"]["PayPeriodDetails"];
      paystub_details?: components["schemas"]["PaystubDetails"];
      /** @deprecated */
      income_breakdown?: components["schemas"]["IncomeBreakdown"][];
      ytd_earnings?: components["schemas"]["PaystubYTDDetails"];
    } & { [key: string]: unknown };
    /**
     * Deductions
     * @description An object with the deduction information found on a paystub.
     */
    Deductions: {
      /** @deprecated */
      subtotals?: components["schemas"]["Total"][];
      breakdown: components["schemas"]["DeductionsBreakdown"][];
      /** @deprecated */
      totals?: components["schemas"]["Total"][];
      total: components["schemas"]["DeductionsTotal"];
    } & { [key: string]: unknown };
    /**
     * DeductionsBreakdown
     * @description An object representing the deduction line items for the pay period
     */
    DeductionsBreakdown: {
      /**
       * Format: double
       * @description Raw amount of the deduction
       */
      current_amount?: number | null;
      /** @description Description of the deduction line item */
      description?: string | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code?: string | null;
      /**
       * @description The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code?: string | null;
      /**
       * Format: double
       * @description The year-to-date amount of the deduction
       */
      ytd_amount?: number | null;
    } & { [key: string]: unknown };
    /**
     * DeductionsTotal
     * @description An object representing the total deductions for the pay period
     */
    DeductionsTotal: {
      /**
       * Format: double
       * @description Raw amount of the deduction
       */
      current_amount?: number | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code?: string | null;
      /**
       * @description The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code?: string | null;
      /**
       * Format: double
       * @description The year-to-date total amount of the deductions
       */
      ytd_amount?: number | null;
    } & { [key: string]: unknown };
    /**
     * Total
     * @deprecated
     * @description An object representing both the current pay period and year to date amount for a category.
     */
    Total: {
      canonical_description?: components["schemas"]["TotalCanonicalDescription"];
      /** @description Text of the line item as printed on the paystub. */
      description?: string | null;
      current_pay?: components["schemas"]["Pay"];
      ytd_pay?: components["schemas"]["Pay"];
    } & { [key: string]: unknown };
    /**
     * @description Commonly used term to describe the line item.
     * @enum {string|null}
     */
    TotalCanonicalDescription:
      | (
          | "BONUS"
          | "COMMISSION"
          | "OVERTIME"
          | "PAID TIME OFF"
          | "REGULAR PAY"
          | "VACATION"
          | "EMPLOYEE MEDICARE"
          | "FICA"
          | "SOCIAL SECURITY EMPLOYEE TAX"
          | "MEDICAL"
          | "VISION"
          | "DENTAL"
          | "NET PAY"
          | "TAXES"
          | "NOT_FOUND"
          | "OTHER"
          | null
        )
      | null;
    /**
     * Pay
     * @deprecated
     * @description An object representing a monetary amount.
     */
    Pay: {
      /**
       * Format: double
       * @description A numerical amount of a specific currency.
       */
      amount?: number | null;
      /** @description Currency code, e.g. USD */
      currency?: string | null;
    } & { [key: string]: unknown };
    /**
     * Earnings
     * @description An object representing both a breakdown of earnings on a paystub and the total earnings.
     */
    Earnings: {
      /** @deprecated */
      subtotals?: components["schemas"]["EarningsTotal"][];
      /** @deprecated */
      totals?: components["schemas"]["EarningsTotal"][];
      breakdown?: components["schemas"]["EarningsBreakdown"][];
      total?: components["schemas"]["EarningsTotal"];
    } & { [key: string]: unknown };
    /**
     * EarningsBreakdown
     * @description An object representing the earnings line items for the pay period.
     */
    EarningsBreakdown: {
      canonical_description?: components["schemas"]["EarningsBreakdownCanonicalDescription"];
      /**
       * Format: double
       * @description Raw amount of the earning line item.
       */
      current_amount?: number | null;
      /** @description Description of the earning line item. */
      description?: string | null;
      /** @description Number of hours applicable for this earning. */
      hours?: number | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code?: string | null;
      /**
       * Format: double
       * @description Hourly rate applicable for this earning.
       */
      rate?: number | null;
      /**
       * @description The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code?: string | null;
      /**
       * Format: double
       * @description The year-to-date amount of the deduction.
       */
      ytd_amount?: number | null;
    } & { [key: string]: unknown };
    /**
     * @description Commonly used term to describe the earning line item.
     * @enum {string|null}
     */
    EarningsBreakdownCanonicalDescription:
      | (
          | "BONUS"
          | "COMMISSION"
          | "OVERTIME"
          | "PAID TIME OFF"
          | "REGULAR PAY"
          | "VACATION"
          | "BASIC ALLOWANCE HOUSING"
          | "BASIC ALLOWANCE SUBSISTENCE"
          | "OTHER"
          | null
        )
      | null;
    /**
     * EarningsTotal
     * @description An object representing both the current pay period and year to date amount for an earning category.
     */
    EarningsTotal: {
      /**
       * Format: double
       * @description Total amount of the earnings for this pay period
       */
      current_amount?: number | null;
      current_pay?: components["schemas"]["Pay"];
      ytd_pay?: components["schemas"]["Pay"];
      /** @description Total number of hours worked for this pay period */
      hours?: number | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code?: string | null;
      /**
       * @description The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code?: string | null;
      /**
       * Format: double
       * @description The total year-to-date amount of the earnings
       */
      ytd_amount?: number | null;
    } & { [key: string]: unknown };
    /**
     * EmploymentDetails
     * @deprecated
     * @description An object representing employment details found on a paystub.
     */
    EmploymentDetails: {
      annual_salary?: components["schemas"]["Pay"];
      /**
       * Format: date
       * @description Date on which the employee was hired, in the YYYY-MM-DD format.
       */
      hire_date?: string | null;
    } & { [key: string]: unknown };
    /**
     * NetPay
     * @description An object representing information about the net pay amount on the paystub.
     */
    NetPay: {
      /**
       * Format: double
       * @description Raw amount of the net pay for the pay period
       */
      current_amount?: number | null;
      /** @description Description of the net pay */
      description?: string | null;
      /** @description The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code?: string | null;
      /**
       * @description The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code?: string | null;
      /**
       * Format: double
       * @description The year-to-date amount of the net pay
       */
      ytd_amount?: number | null;
      total?: components["schemas"]["Total"];
    } & { [key: string]: unknown };
    /**
     * PaystubDetails
     * @deprecated
     * @description An object representing details that can be found on the paystub.
     */
    PaystubDetails: {
      /**
       * Format: date
       * @description Beginning date of the pay period on the paystub in the 'YYYY-MM-DD' format.
       */
      pay_period_start_date?: string | null;
      /**
       * Format: date
       * @description Ending date of the pay period on the paystub in the 'YYYY-MM-DD' format.
       */
      pay_period_end_date?: string | null;
      /**
       * Format: date
       * @description Pay date on the paystub in the 'YYYY-MM-DD' format.
       */
      pay_date?: string | null;
      /** @description The name of the payroll provider that generated the paystub, e.g. ADP */
      paystub_provider?: string | null;
      pay_frequency?: components["schemas"]["PaystubPayFrequency"];
    } & { [key: string]: unknown };
    /**
     * @description The frequency at which the employee is paid. Possible values: `MONTHLY`, `BI-WEEKLY`, `WEEKLY`, `SEMI-MONTHLY`.
     * @enum {string|null}
     */
    PaystubPayFrequency:
      | ("MONTHLY" | "BI-WEEKLY" | "WEEKLY" | "SEMI-MONTHLY" | null)
      | null;
    /**
     * IncomeBreakdown
     * @deprecated
     * @description An object representing a breakdown of the different income types on the paystub.
     */
    IncomeBreakdown: {
      type: components["schemas"]["IncomeBreakdownType"];
      /**
       * Format: double
       * @description The hourly rate at which the income is paid.
       */
      rate: number | null;
      /** @description The number of hours logged for this income for this pay period. */
      hours: number | null;
      /**
       * Format: double
       * @description The total pay for this pay period.
       */
      total: number | null;
    } & { [key: string]: unknown };
    /**
     * @description The type of income. Possible values include:
     *   `"regular"`: regular income
     *   `"overtime"`: overtime income
     *   `"bonus"`: bonus income
     * @enum {string|null}
     */
    IncomeBreakdownType: ("bonus" | "overtime" | "regular" | null) | null;
    /**
     * Employee
     * @description Data about the employee.
     */
    Employee: {
      address: components["schemas"]["PaystubAddress"];
      /** @description The name of the employee. */
      name: string | null;
      /** @description Marital status of the employee - either `single` or `married`. */
      marital_status?: string | null;
      taxpayer_id?: components["schemas"]["TaxpayerID"];
    } & { [key: string]: unknown };
    /**
     * TaxpayerID
     * @description Taxpayer ID of the individual receiving the paystub.
     */
    TaxpayerID: {
      /** @description Type of ID, e.g. 'SSN' */
      id_type?: string | null;
      /** @description ID mask; i.e. last 4 digits of the taxpayer ID */
      id_mask?: string | null;
      /**
       * @deprecated
       * @description Last 4 digits of unique number of ID.
       */
      last_4_digits?: string | null;
    } & { [key: string]: unknown };
    /**
     * Employer
     * @description Information about the employer on the paystub
     */
    PaystubEmployer: {
      address?: components["schemas"]["PaystubAddress"];
      /** @description The name of the employer on the paystub. */
      name: string | null;
    } & { [key: string]: unknown };
    /**
     * Address
     * @description Address on the paystub
     */
    PaystubAddress: {
      /** @description The full city name. */
      city?: string | null;
      /** @description The ISO 3166-1 alpha-2 country code. */
      country?: string | null;
      /** @description The postal code of the address. */
      postal_code?: string | null;
      /**
       * @description The region or state
       * Example: `"NC"`
       */
      region?: string | null;
      /** @description The full street address. */
      street?: string | null;
      /**
       * @deprecated
       * @description Street address line 1.
       */
      line1?: string | null;
      /**
       * @deprecated
       * @description Street address line 2.
       */
      line2?: string | null;
      /**
       * @deprecated
       * @description The region or state
       * Example: `"NC"`
       */
      state_code?: string | null;
    } & { [key: string]: unknown };
    /**
     * PayPeriodDetails
     * @description Details about the pay period.
     */
    PayPeriodDetails: {
      /**
       * Format: double
       * @description The amount of the paycheck.
       */
      check_amount?: number | null;
      distribution_breakdown?: components["schemas"]["DistributionBreakdown"][];
      /**
       * Format: date
       * @description The pay period end date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: "yyyy-mm-dd".
       */
      end_date?: string | null;
      /**
       * Format: double
       * @description Total earnings before tax/deductions.
       */
      gross_earnings?: number | null;
      /**
       * Format: date
       * @description The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
       */
      pay_date?: string | null;
      /**
       * @description The frequency at which an individual is paid.
       * @enum {string|null}
       */
      pay_frequency?:
        | (
            | "PAY_FREQUENCY_UNKNOWN"
            | "PAY_FREQUENCY_WEEKLY"
            | "PAY_FREQUENCY_BIWEEKLY"
            | "PAY_FREQUENCY_SEMIMONTHLY"
            | "PAY_FREQUENCY_MONTHLY"
            | null
          )
        | null;
      /**
       * Format: date
       * @deprecated
       * @description The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
       */
      pay_day?: string | null;
      /**
       * Format: date
       * @description The pay period start date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: "yyyy-mm-dd".
       */
      start_date?: string | null;
    } & { [key: string]: unknown };
    /**
     * DistributionBreakdown
     * @description Information about the accounts that the payment was distributed to.
     */
    DistributionBreakdown: {
      /** @description Name of the account for the given distribution. */
      account_name?: string | null;
      /** @description The name of the bank that the payment is being deposited to. */
      bank_name?: string | null;
      /**
       * Format: double
       * @description The amount distributed to this account.
       */
      current_amount?: number | null;
      /** @description The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code?: string | null;
      /** @description The last 2-4 alphanumeric characters of an account's official account number. */
      mask?: string | null;
      /** @description Type of the account that the paystub was sent to (e.g. 'checking'). */
      type?: string | null;
      /**
       * @description The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code?: string | null;
      current_pay?: components["schemas"]["Pay"];
    } & { [key: string]: unknown };
    /**
     * PaystubDeduction
     * @description Deduction on the paystub
     */
    PaystubDeduction: {
      /** @description The description of the deduction, as provided on the paystub. For example: `"401(k)"`, `"FICA MED TAX"`. */
      type: string | null;
      /** @description `true` if the deduction is pre-tax; `false` otherwise. */
      is_pretax: boolean | null;
      /**
       * Format: double
       * @description The amount of the deduction.
       */
      total: number | null;
    } & { [key: string]: unknown };
    /**
     * PaystubYTDDetails
     * @deprecated
     * @description The amount of income earned year to date, as based on paystub data.
     */
    PaystubYTDDetails: {
      /**
       * Format: double
       * @description Year-to-date gross earnings.
       */
      gross_earnings?: number | null;
      /**
       * Format: double
       * @description Year-to-date net (take home) earnings.
       */
      net_earnings?: number | null;
    } & { [key: string]: unknown };
    /**
     * IncomeVerificationDocumentsDownloadRequest
     * @description IncomeVerificationDocumentsDownloadRequest defines the request schema for `/income/verification/documents/download`.
     */
    IncomeVerificationDocumentsDownloadRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @deprecated
       * @description The ID of the verification.
       */
      income_verification_id?: string | null;
      access_token?: components["schemas"]["AccessTokenNullable"];
      /** @description The document ID to download. If passed, a single document will be returned in the resulting zip file, rather than all document */
      document_id?: string | null;
    };
    /**
     * IncomeVerificationTaxformsGetRequest
     * @description IncomeVerificationTaxformsGetRequest defines the request schema for `/income/verification/taxforms/get`
     */
    IncomeVerificationTaxformsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @deprecated
       * @description The ID of the verification.
       */
      income_verification_id?: string | null;
      access_token?: components["schemas"]["AccessTokenNullable"];
    } & { [key: string]: unknown };
    /**
     * IncomeVerificationTaxformsGetResponse
     * @description IncomeVerificationTaxformsGetResponse defines the response schema for `/income/verification/taxforms/get`
     */
    IncomeVerificationTaxformsGetResponse: {
      request_id?: components["schemas"]["RequestID"];
      document_metadata: components["schemas"]["DocumentMetadata"][];
      /** @description A list of forms. */
      taxforms: components["schemas"]["Taxform"][];
      error?: components["schemas"]["PlaidError"];
    } & { [key: string]: unknown };
    /**
     * Taxform
     * @description Data about an official document used to report the user's income to the IRS.
     */
    Taxform: {
      /** @description An identifier of the document referenced by the document metadata. */
      doc_id?: string;
      /** @description The type of tax document. Currently, the only supported value is `w2`. */
      document_type: string;
      w2?: components["schemas"]["W2"];
    } & { [key: string]: unknown };
    /**
     * W2
     * @description W2 is an object that represents income data taken from a W2 tax document.
     */
    W2: {
      employer?: components["schemas"]["PaystubEmployer"];
      employee?: components["schemas"]["Employee"];
      /** @description The tax year of the W2 document. */
      tax_year?: string | null;
      /** @description An employee identification number or EIN. */
      employer_id_number?: string | null;
      /** @description Wages from tips and other compensation. */
      wages_tips_other_comp?: string | null;
      /** @description Federal income tax withheld for the tax year. */
      federal_income_tax_withheld?: string | null;
      /** @description Wages from social security. */
      social_security_wages?: string | null;
      /** @description Social security tax withheld for the tax year. */
      social_security_tax_withheld?: string | null;
      /** @description Wages and tips from medicare. */
      medicare_wages_and_tips?: string | null;
      /** @description Medicare tax withheld for the tax year. */
      medicare_tax_withheld?: string | null;
      /** @description Tips from social security. */
      social_security_tips?: string | null;
      /** @description Allocated tips. */
      allocated_tips?: string | null;
      /** @description Contents from box 9 on the W2. */
      box_9?: string | null;
      /** @description Dependent care benefits. */
      dependent_care_benefits?: string | null;
      /** @description Nonqualified plans. */
      nonqualified_plans?: string | null;
      box_12?: components["schemas"]["W2Box12"][];
      /** @description Statutory employee. */
      statutory_employee?: string | null;
      /** @description Retirement plan. */
      retirement_plan?: string | null;
      /** @description Third party sick pay. */
      third_party_sick_pay?: string | null;
      /** @description Other. */
      other?: string | null;
      state_and_local_wages?: components["schemas"]["W2StateAndLocalWages"][];
    } & { [key: string]: unknown };
    /**
     * W2Box12
     * @description Data on the W2 Box 12
     */
    W2Box12: {
      /** @description W2 Box 12 code. */
      code?: string | null;
      /** @description W2 Box 12 amount. */
      amount?: string | null;
    } & { [key: string]: unknown };
    /**
     * W2StateAndLocalWages
     * @description W2 state and local wages
     */
    W2StateAndLocalWages: {
      /** @description State associated with the wage. */
      state?: string | null;
      /** @description State identification number of the employer. */
      employer_state_id_number?: string | null;
      /** @description Wages and tips from the specified state. */
      state_wages_tips?: string | null;
      /** @description Income tax from the specified state. */
      state_income_tax?: string | null;
      /** @description Wages and tips from the locality. */
      local_wages_tips?: string | null;
      /** @description Income tax from the locality. */
      local_income_tax?: string | null;
      /** @description Name of the locality. */
      locality_name?: string | null;
    } & { [key: string]: unknown };
    /**
     * IncomeVerificationWebhookStatus
     * @description Status of the income verification webhook
     */
    IncomeVerificationWebhookStatus: {
      id: string;
    } & { [key: string]: unknown };
    /**
     * EmploymentVerificationGetRequest
     * @description EmploymentVerificationGetRequest defines the request schema for `/employment/verification/get`.
     */
    EmploymentVerificationGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /**
     * EmploymentVerificationGetResponse
     * @description EmploymentVerificationGetResponse defines the response schema for `/employment/verification/get`.
     */
    EmploymentVerificationGetResponse: {
      /** @description A list of employment verification summaries. */
      employments: components["schemas"]["EmploymentVerification"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * EmploymentVerification
     * @description An object containing proof of employment data for an individual
     */
    EmploymentVerification: {
      status?: components["schemas"]["EmploymentVerificationStatus"];
      /**
       * Format: date
       * @description Start of employment in ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string | null;
      /**
       * Format: date
       * @description End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).
       */
      end_date?: string | null;
      employer?: components["schemas"]["EmployerVerification"];
      /** @description Current title of employee. */
      title?: string | null;
      platform_ids?: components["schemas"]["PlatformIds"];
    } & { [key: string]: unknown };
    /**
     * @description Current employment status.
     * @enum {string|null}
     */
    EmploymentVerificationStatus:
      | ("EMPLOYMENT_STATUS_ACTIVE" | "EMPLOYMENT_STATUS_INACTIVE" | null)
      | null;
    /**
     * EmployerVerification
     * @description An object containing employer data.
     */
    EmployerVerification: {
      /** @description Name of employer. */
      name?: string | null;
    } & { [key: string]: unknown };
    /**
     * PlatformIds
     * @description An object containing a set of ids related to an employee
     */
    PlatformIds: {
      /** @description The ID of an employee as given by their employer */
      employee_id?: string | null;
      /** @description The ID of an employee as given by their payroll */
      payroll_id?: string | null;
      /** @description The ID of the position of the employee */
      position_id?: string | null;
    } & { [key: string]: unknown };
    /**
     * AssetReportTransaction
     * @description A transaction on the asset report
     */
    AssetReportTransaction: components["schemas"]["TransactionBase"] &
      ({
        /** @description The date on which the transaction took place, in IS0 8601 format. */
        date_transacted?: string | null;
        credit_category?: components["schemas"]["CreditCategory"];
      } & { [key: string]: unknown }) & {
        original_description: unknown;
      };
    /**
     * HealthIncident
     * @description A status health incident
     */
    HealthIncident: {
      /**
       * Format: date-time
       * @description The start date of the incident, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2020-10-30T15:26:48Z"`.
       */
      start_date: string;
      /**
       * Format: date-time
       * @description The end date of the incident, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2020-10-30T15:26:48Z"`.
       */
      end_date?: string;
      /** @description The title of the incident */
      title: string;
      /** @description Updates on the health incident. */
      incident_updates: components["schemas"]["IncidentUpdate"][];
    } & { [key: string]: unknown };
    /**
     * IncidentUpdate
     * @description An update on the health incident
     */
    IncidentUpdate: {
      /** @description The content of the update. */
      description?: string;
      /**
       * @description The status of the incident.
       * @enum {string}
       */
      status?:
        | "INVESTIGATING"
        | "IDENTIFIED"
        | "SCHEDULED"
        | "RESOLVED"
        | "UNKNOWN";
      /**
       * Format: date-time
       * @description The date when the update was published, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2020-10-30T15:26:48Z"`.
       */
      updated_date?: string;
    } & { [key: string]: unknown };
    /**
     * DepositSwitchAltCreateRequest
     * @description DepositSwitchAltCreateRequest defines the request schema for `/deposit_switch/alt/create`
     */
    DepositSwitchAltCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      target_account: components["schemas"]["DepositSwitchTargetAccount"];
      target_user: components["schemas"]["DepositSwitchTargetUser"];
      options?: components["schemas"]["DepositSwitchCreateRequestOptions"];
      /**
       * CountryCode
       * @description ISO-3166-1 alpha-2 country code standard.
       * @enum {string|null}
       */
      country_code?: ("US" | "CA") | null;
    };
    /**
     * DepositSwitchAltCreateResponse
     * @description DepositSwitchAltCreateResponse defines the response schema for `/deposit_switch/alt/create`
     */
    DepositSwitchAltCreateResponse: {
      /** @description ID of the deposit switch. This ID is persisted throughout the lifetime of the deposit switch. */
      deposit_switch_id: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * DepositSwitchTargetAccount
     * @description The deposit switch destination account
     */
    DepositSwitchTargetAccount: {
      /** @description Account number for deposit switch destination */
      account_number: string;
      /** @description Routing number for deposit switch destination */
      routing_number: string;
      /** @description The name of the deposit switch destination account, as it will be displayed to the end user in the Deposit Switch interface. It is not required to match the name used in online banking. */
      account_name: string;
      /**
       * @description The account subtype of the account, either `checking` or `savings`.
       * @enum {string}
       */
      account_subtype: "checking" | "savings";
    } & { [key: string]: unknown };
    /**
     * DepositSwitchTargetUser
     * @description The deposit switch target user
     */
    DepositSwitchTargetUser: {
      /** @description The given name (first name) of the user. */
      given_name: string;
      /** @description The family name (last name) of the user. */
      family_name: string;
      /** @description The phone number of the user. The endpoint can accept a variety of phone number formats, including E.164. */
      phone: string;
      /** @description The email address of the user. */
      email: string;
      address?: components["schemas"]["DepositSwitchAddressData"];
      /** @description The taxpayer ID of the user, generally their SSN, EIN, or TIN. */
      tax_payer_id?: string;
    } & { [key: string]: unknown };
    /**
     * DepositSwitchAddressData
     * @description The user's address.
     */
    DepositSwitchAddressData: {
      /** @description The full city name */
      city: string;
      /**
       * @description The region or state
       * Example: `"NC"`
       */
      region: string;
      /**
       * @description The full street address
       * Example: `"564 Main Street, APT 15"`
       */
      street: string;
      /** @description The postal code */
      postal_code: string;
      /** @description The ISO 3166-1 alpha-2 country code */
      country: string;
    } & { [key: string]: unknown };
    /**
     * CreditBankIncomeGetRequest
     * @description CreditBankIncomeGetRequest defines the request schema for `/credit/bank_income/get`.
     */
    CreditBankIncomeGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token?: components["schemas"]["UserToken"];
      options?: components["schemas"]["CreditBankIncomeGetRequestOptions"];
    };
    /** @description An optional object for `/credit/bank_income/get` request options. */
    CreditBankIncomeGetRequestOptions: {
      /**
       * @description How many Bank Income Reports should be fetched. Multiple reports may be available if the report has been re-created or refreshed. If more than one report is available, the most recent reports will be returned first.
       * @default 1
       */
      count?: number;
    };
    /**
     * CreditBankIncomeGetResponse
     * @description CreditBankIncomeGetResponse defines the response schema for `/credit/bank_income/get`
     */
    CreditBankIncomeGetResponse: {
      bank_income?: components["schemas"]["CreditBankIncome"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * CreditBankIncomePDFGetRequest
     * @description CreditBankIncomePDFGetRequest defines the request schema for `/credit/bank_income/pdf/get`
     */
    CreditBankIncomePDFGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
    };
    /**
     * CreditBankIncomePDFGetResponse
     * Format: binary
     * @description CreditBankIncomePDFGetResponse defines the response schema for `/credit/bank_income/pdf/get`
     */
    CreditBankIncomePDFGetResponse: string;
    /** @description The report of the Bank Income data for an end user. */
    CreditBankIncome: {
      /** @description The unique identifier associated with the Bank Income Report. */
      bank_income_id?: string;
      /**
       * Format: date-time
       * @description The time when the Bank Income Report was generated.
       */
      generated_time?: string;
      /** @description The number of days requested by the customer for the Bank Income Report. */
      days_requested?: number;
      /** @description The list of Items in the report along with the associated metadata about the Item. */
      items?: components["schemas"]["CreditBankIncomeItem"][];
      bank_income_summary?: components["schemas"]["CreditBankIncomeSummary"];
      /** @description If data from the Bank Income report was unable to be retrieved, the warnings will contain information about the error that caused the data to be incomplete. */
      warnings?: components["schemas"]["CreditBankIncomeWarning"][];
    };
    /** @description The details and metadata for an end user's Item. */
    CreditBankIncomeItem: {
      /** @description The Item's accounts that have Bank Income data. */
      bank_income_accounts?: components["schemas"]["CreditBankIncomeAccount"][];
      /** @description The income sources for this Item. Each entry in the array is a single income source. */
      bank_income_sources?: components["schemas"]["CreditBankIncomeSource"][];
      /**
       * Format: date-time
       * @description The time when this Item's data was last retrieved from the financial institution.
       */
      last_updated_time?: string;
      /** @description The unique identifier of the institution associated with the Item. */
      institution_id?: string;
      /** @description The name of the institution associated with the Item. */
      institution_name?: string;
      /** @description The unique identifier for the Item. */
      item_id?: string;
    };
    /** @description The Item's accounts that have Bank Income data. */
    CreditBankIncomeAccount: {
      /** @description Plaid's unique identifier for the account. */
      account_id?: string;
      /**
       * @description The last 2-4 alphanumeric characters of an account's official account number.
       * Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
       */
      mask?: string | null;
      /** @description The name of the bank account. */
      name?: string;
      /** @description The official name of the bank account. */
      official_name?: string | null;
      subtype?: components["schemas"]["DepositoryAccountSubtype"];
      type?: components["schemas"]["CreditBankIncomeAccountType"];
      owners?: components["schemas"]["Owner"][];
    };
    /**
     * @description The account type. This will always be `depository`.
     * @enum {string}
     */
    CreditBankIncomeAccountType: "depository";
    /** @description Detailed information for the income source. */
    CreditBankIncomeSource: {
      /** @description A unique identifier for an income source. */
      income_source_id?: string;
      /** @description The most common name or original description for the underlying income transactions. */
      income_description?: string;
      income_category?: components["schemas"]["CreditBankIncomeCategory"];
      /** @description Plaid's unique idenfier for the account. */
      account_id?: string;
      /**
       * Format: date
       * @description Minimum of all dates within the specific income sources in the user's bank account for days requested by the client.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string;
      /**
       * Format: date
       * @description Maximum of all dates within the specific income sources in the user’s bank account for days requested by the client.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      end_date?: string;
      pay_frequency?: components["schemas"]["CreditBankIncomePayFrequency"];
      /** @description Total amount of earnings in the user’s bank account for the specific income source for days requested by the client. */
      total_amount?: number;
      /** @description Number of transactions for the income source within the start and end date. */
      transaction_count?: number;
      historical_summary?: components["schemas"]["CreditBankIncomeHistoricalSummary"][];
    };
    /**
     * @description The income category.
     * @enum {string}
     */
    CreditBankIncomeCategory:
      | "SALARY"
      | "UNEMPLOYMENT"
      | "CASH"
      | "GIG_ECONOMY"
      | "RENTAL"
      | "CHILD_SUPPORT"
      | "MILITARY"
      | "RETIREMENT"
      | "LONG_TERM_DISABILITY"
      | "BANK_INTEREST"
      | "OTHER";
    /**
     * @description The income pay frequency.
     * @enum {string}
     */
    CreditBankIncomePayFrequency:
      | "WEEKLY"
      | "BIWEEKLY"
      | "SEMI_MONTHLY"
      | "MONTHLY"
      | "UNKNOWN";
    /** @description The ISO 4217 currency code of the amount or balance. */
    CreditIsoCurrencyCode: string | null;
    /**
     * @description The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null.
     * Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
     */
    CreditUnofficialCurrencyCode: string | null;
    /** @description Summary for bank income across all income sources and items (max history of 730 days). */
    CreditBankIncomeSummary: {
      /** @description Total amount of earnings across all the income sources in the end user's Items for the days requested by the client. */
      total_amount?: number;
      iso_currency_code?: components["schemas"]["CreditIsoCurrencyCode"];
      unofficial_currency_code?: components["schemas"]["CreditUnofficialCurrencyCode"];
      /**
       * Format: date
       * @description The earliest date within the days requested in which all income sources identified by Plaid appear in a user's account.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string;
      /**
       * Format: date
       * @description The latest date in which all income sources identified by Plaid appear in the user's account.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      end_date?: string;
      /** @description Number of income sources per end user. */
      income_sources_count?: number;
      /** @description Number of income categories per end user. */
      income_categories_count?: number;
      /** @description Number of income transactions per end user. */
      income_transactions_count?: number;
      historical_summary?: components["schemas"]["CreditBankIncomeHistoricalSummary"][];
    };
    /** @description The end user's monthly summary for the income source(s). */
    CreditBankIncomeHistoricalSummary: {
      /** @description Total amount of earnings for the income source(s) of the user for the month in the summary. */
      total_amount?: number;
      iso_currency_code?: components["schemas"]["CreditIsoCurrencyCode"];
      unofficial_currency_code?: components["schemas"]["CreditUnofficialCurrencyCode"];
      /**
       * Format: date
       * @description The start date of the period covered in this monthly summary.
       * This date will be the first day of the month, unless the month being covered is a partial month because it is the first month included in the summary and the date range being requested does not begin with the first day of the month.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string;
      /**
       * Format: date
       * @description The end date of the period included in this monthly summary.
       * This date will be the last day of the month, unless the month being covered is a partial month because it is the last month included in the summary and the date range being requested does not end with the last day of the month.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      end_date?: string;
      transactions?: components["schemas"]["CreditBankIncomeTransaction"][];
    };
    /** @description The transactions data for the end user's income source(s). */
    CreditBankIncomeTransaction: {
      /**
       * @description The settled value of the transaction, denominated in the transactions's currency as stated in `iso_currency_code` or `unofficial_currency_code`.
       * Positive values when money moves out of the account; negative values when money moves in.
       * For example, credit card purchases are positive; credit card payment, direct deposits, and refunds are negative.
       */
      amount?: number;
      /**
       * Format: date
       * @description For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted.
       * Both dates are returned in an ISO 8601 format (YYYY-MM-DD).
       */
      date?: string;
      /** @description The merchant name or transaction description. */
      name?: string;
      /** @description The string returned by the financial institution to describe the transaction. */
      original_description?: string | null;
      /**
       * @description When true, identifies the transaction as pending or unsettled.
       * Pending transaction details (name, type, amount, category ID) may change before they are settled.
       */
      pending?: boolean;
      /** @description The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive. */
      transaction_id?: string;
      /** @description The check number of the transaction. This field is only populated for check transactions. */
      check_number?: string | null;
      iso_currency_code?: components["schemas"]["CreditIsoCurrencyCode"];
      unofficial_currency_code?: components["schemas"]["CreditUnofficialCurrencyCode"];
    };
    /**
     * CreditBankIncomeRefreshRequest
     * @description CreditBankIncomeRefreshRequest defines the request schema for `/credit/bank_income/refresh`.
     */
    CreditBankIncomeRefreshRequest: {
      client_id: components["schemas"]["APIClientID"];
      secret: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
      options?: components["schemas"]["CreditBankIncomeRefreshRequestOptions"];
    };
    /** @description An optional object for `/credit/bank_income/refresh` request options. */
    CreditBankIncomeRefreshRequestOptions: {
      /** @description How many days of data to include in the refresh. If not specified, this will default to the days requested in the most recently generated bank income report for the user. */
      days_requested?: number;
      /** @description The URL where Plaid will send the bank income webhook. */
      webhook?: string;
    };
    /**
     * CreditBankIncomeRefreshResponse
     * @description CreditBankIncomeRefreshResponse defines the response schema for `/credit/bank_income/refresh`.
     */
    CreditBankIncomeRefreshResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * CreditPayrollIncomeRiskSignalsGetRequest
     * @description CreditPayrollIncomeRiskSignalsGetRequest defines the request schema for `/beta/credit/payroll_income/risk_signals/get`
     */
    CreditPayrollIncomeRiskSignalsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token?: components["schemas"]["UserToken"];
    } & { [key: string]: unknown };
    /**
     * CreditPayrollIncomeRiskSignalsGetReponse
     * @description CreditPayrollIncomeRiskSignalsGetRequest defines the response schema for `/beta/credit/payroll_income/risk_signals/get`
     */
    CreditPayrollIncomeRiskSignalsGetResponse: {
      /** @description Array of payroll items. */
      items: components["schemas"]["PayrollRiskSignalsItem"][];
      error?: components["schemas"]["PlaidError"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * PayrollRiskSignalsItem
     * @description Object containing fraud risk data pertaining to the item linked as part of the verification
     */
    PayrollRiskSignalsItem: {
      item_id: components["schemas"]["ItemId"];
      /** @description Array of payroll income document authenticity data retrieved for each of the user's accounts */
      verification_risk_signals: components["schemas"]["DocumentRiskSignalsObject"][];
    } & { [key: string]: unknown };
    /**
     * DocumentRiskSignalsObject
     * @description Object containing fraud risk data for a set of income documents
     */
    DocumentRiskSignalsObject: {
      /** @description ID of the payroll provider account. */
      account_id: string | null;
      /** @description Array of document metadata and associated risk signals per document */
      single_document_risk_signals: components["schemas"]["SingleDocumentRiskSignal"][];
      /** @description Array of risk signals computed from a set of uploaded documents and the associated documents' metadata */
      multi_document_risk_signals: components["schemas"]["MultiDocumentRiskSignal"][];
    } & { [key: string]: unknown };
    /**
     * RiskSignalDocumentReference
     * @description Object containing metadata for the document
     */
    RiskSignalDocumentReference: {
      /** @description An identifier of the document referenced by the document metadata. */
      document_id?: string | null;
      /** @description The name of the document */
      document_name?: string;
    } & { [key: string]: unknown };
    /**
     * SingleDocumentRiskSignal
     * @description Object containing all risk signals and relevant metadata for a single document
     */
    SingleDocumentRiskSignal: {
      document_reference: components["schemas"]["RiskSignalDocumentReference"];
      /** @description Array of attributes that indicate whether or not there is fraud risk with a document */
      risk_signals: components["schemas"]["DocumentRiskSignal"][];
    } & { [key: string]: unknown };
    /**
     * MultiDocumentRiskSignal
     * @description Object containing risk signals and relevant metadata for a set of uploaded documents
     */
    MultiDocumentRiskSignal: {
      /** @description Array of objects containing attributes that could indicate if a document is fraudulent */
      document_references: components["schemas"]["RiskSignalDocumentReference"][];
      /** @description Array of attributes that indicate whether or not there is fraud risk with a set of documents */
      risk_signals: components["schemas"]["DocumentRiskSignal"][];
    } & { [key: string]: unknown };
    /** @description CreditAuditCopyTokenCreateRequest defines the request schema for `/credit/audit_copy_token/create` */
    CreditAuditCopyTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description List of report tokens; can include both Asset Report tokens and Income Report tokens. */
      report_tokens: components["schemas"]["ReportToken"][];
      /** @description The `auditor_id` of the third party with whom you would like to share the Asset Report and/or Income Report. */
      auditor_id: string;
    };
    /** @description CreditAuditCopyTokenCreateResponse defines the response schema for `/credit/audit_copy_token/get` */
    CreditAuditCopyTokenCreateResponse: {
      /** @description A token that can be shared with a third party auditor to allow them to obtain access to the Asset or Income Report. This token should be stored securely. */
      audit_copy_token: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description CreditAuditCopyTokenRemoveRequest defines the request schema for `/credit/audit_copy_token/remove` */
    CreditAuditCopyTokenRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `audit_copy_token` granting access to the Audit Copy you would like to revoke. */
      audit_copy_token: string;
    };
    /** @description CreditAuditCopyTokenRemoveResponse defines the response schema for `/credit/audit_copy_token/remove` */
    CreditAuditCopyTokenRemoveResponse: {
      /** @description `true` if the Audit Copy was successfully removed. */
      removed: boolean;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * CreditPayrollIncomeGetRequest
     * @description CreditPayrollIncomeGetRequest defines the request schema for `/credit/payroll_income/get`.
     */
    CreditPayrollIncomeGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token?: components["schemas"]["UserToken"];
    };
    /**
     * CreditPayrollIncomeGetResponse
     * @description Defines the response body for `/credit/payroll_income/get`.
     */
    CreditPayrollIncomeGetResponse: {
      /** @description Array of payroll items. */
      items: components["schemas"]["PayrollItem"][];
      error?: components["schemas"]["PlaidError"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * CreditDocumentMetadata
     * @description Object representing metadata pertaining to the document.
     */
    CreditDocumentMetadata: {
      /** @description The name of the document. */
      name: string;
      document_type: components["schemas"]["CreditDocumentType"];
      /** @description Signed URL to retrieve the underlying file. */
      download_url: string | null;
      /** @description The processing status of the document. */
      status: string | null;
    } & { [key: string]: unknown };
    /**
     * CreditDocumentType
     * @description The type of document.
     *
     * `PAYSTUB`: A paystub.
     *
     * `BANK_STATEMENT`: A bank statement.
     *
     * `US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.
     *
     * `US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.
     *
     * `US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.
     *
     * `US_MILITARY_CLES`: A Civilian Leave and Earnings Statment (CLES) issued by the US military.
     *
     * `GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.
     *
     * `NONE`: Used to indicate that there is no underlying document for the data.
     *
     * `UNKNOWN`: Document type could not be determined.
     */
    CreditDocumentType: string | null;
    /**
     * PayrollItem
     * @description An object containing information about the payroll item.
     */
    PayrollItem: {
      item_id: components["schemas"]["ItemId"];
      accounts: components["schemas"]["PayrollIncomeAccountData"][];
      payroll_income: components["schemas"]["PayrollIncomeObject"][];
      status: components["schemas"]["PayrollItemStatus"];
    };
    /**
     * PayrollIncomeAccountData
     * @description An object containing account level data.
     */
    PayrollIncomeAccountData:
      | ({
          /** @description ID of the payroll provider account. */
          account_id: string | null;
          rate_of_pay: components["schemas"]["PayrollIncomeRateOfPay"];
          /** @description The frequency at which an individual is paid. */
          pay_frequency: string | null;
        } & { [key: string]: unknown })
      | null;
    /**
     * PayrollIncomeObject
     * @description An object representing payroll data.
     */
    PayrollIncomeObject: {
      /** @description ID of the payroll provider account. */
      account_id: string | null;
      /** @description Array of pay stubs for the user. */
      pay_stubs: components["schemas"]["CreditPayStub"][];
      /** @description Array of tax form W-2s. */
      w2s: components["schemas"]["CreditW2"][];
      /** @description Array of tax form 1099s. */
      form1099s: components["schemas"]["Credit1099"][];
    } & { [key: string]: unknown };
    /**
     * Credit1099
     * @description An object representing an end user's 1099 tax form
     */
    Credit1099: {
      /** @description An identifier of the document referenced by the document metadata. */
      document_id: string | null;
      document_metadata?: components["schemas"]["CreditDocumentMetadata"];
      form_1099_type?: components["schemas"]["Form1099Type"];
      recipient?: components["schemas"]["Credit1099Recipient"];
      payer?: components["schemas"]["Credit1099Payer"];
      filer?: components["schemas"]["Credit1099Filer"];
      /** @description Tax year of the tax form. */
      tax_year?: string | null;
      /**
       * Format: double
       * @description Amount in rent by payer.
       */
      rents?: number | null;
      /**
       * Format: double
       * @description Amount in royalties by payer.
       */
      royalties?: number | null;
      /**
       * Format: double
       * @description Amount in other income by payer.
       */
      other_income?: number | null;
      /**
       * Format: double
       * @description Amount of federal income tax withheld from payer.
       */
      federal_income_tax_withheld?: number | null;
      /**
       * Format: double
       * @description Amount of fishing boat proceeds from payer.
       */
      fishing_boat_proceeds?: number | null;
      /**
       * Format: double
       * @description Amount of medical and healthcare payments from payer.
       */
      medical_and_healthcare_payments?: number | null;
      /**
       * Format: double
       * @description Amount of nonemployee compensation from payer.
       */
      nonemployee_compensation?: number | null;
      /**
       * Format: double
       * @description Amount of substitute payments made by payer.
       */
      substitute_payments_in_lieu_of_dividends_or_interest?: number | null;
      /** @description Whether or not payer made direct sales over $5000 of consumer products. */
      payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer?:
        | string
        | null;
      /**
       * Format: double
       * @description Amount of crop insurance proceeds.
       */
      crop_insurance_proceeds?: number | null;
      /**
       * Format: double
       * @description Amount of golden parachute payments made by payer.
       */
      excess_golden_parachute_payments?: number | null;
      /**
       * Format: double
       * @description Amount of gross proceeds paid to an attorney by payer.
       */
      gross_proceeds_paid_to_an_attorney?: number | null;
      /**
       * Format: double
       * @description Amount of 409A deferrals earned by payer.
       */
      section_409a_deferrals?: number | null;
      /**
       * Format: double
       * @description Amount of 409A income earned by payer.
       */
      section_409a_income?: number | null;
      /**
       * Format: double
       * @description Amount of state tax withheld of payer for primary state.
       */
      state_tax_withheld?: number | null;
      /**
       * Format: double
       * @description Amount of state tax withheld of payer for secondary state.
       */
      state_tax_withheld_lower?: number | null;
      /** @description Primary state ID. */
      payer_state_number?: string | null;
      /** @description Secondary state ID. */
      payer_state_number_lower?: string | null;
      /**
       * Format: double
       * @description State income reported for primary state.
       */
      state_income?: number | null;
      /**
       * Format: double
       * @description State income reported for secondary state.
       */
      state_income_lower?: number | null;
      /** @description One of the values will be provided Payment card Third party network */
      transactions_reported?: string | null;
      /** @description Name of the PSE (Payment Settlement Entity). */
      pse_name?: string | null;
      /** @description Formatted (XXX) XXX-XXXX. Phone number of the PSE (Payment Settlement Entity). */
      pse_telephone_number?: string | null;
      /**
       * Format: double
       * @description Gross amount reported.
       */
      gross_amount?: number | null;
      /**
       * Format: double
       * @description Amount in card not present transactions.
       */
      card_not_present_transaction?: number | null;
      /** @description Merchant category of filer. */
      merchant_category_code?: string | null;
      /** @description Number of payment transactions made. */
      number_of_payment_transactions?: string | null;
      /**
       * Format: double
       * @description Amount reported for January.
       */
      january_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for February.
       */
      february_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for March.
       */
      march_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for April.
       */
      april_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for May.
       */
      may_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for June.
       */
      june_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for July.
       */
      july_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for August.
       */
      august_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for September.
       */
      september_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for October.
       */
      october_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for November.
       */
      november_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for December.
       */
      december_amount?: number | null;
      /** @description Primary state of business. */
      primary_state?: string | null;
      /** @description Secondary state of business. */
      secondary_state?: string | null;
      /** @description Primary state ID. */
      primary_state_id?: string | null;
      /** @description Secondary state ID. */
      secondary_state_id?: string | null;
      /**
       * Format: double
       * @description State income tax reported for primary state.
       */
      primary_state_income_tax?: number | null;
      /**
       * Format: double
       * @description State income tax reported for secondary state.
       */
      secondary_state_income_tax?: number | null;
    } & { [key: string]: unknown };
    /**
     * Form1099Type
     * @description Form 1099 Type
     * @enum {string}
     */
    Form1099Type:
      | "FORM_1099_TYPE_UNKNOWN"
      | "FORM_1099_TYPE_MISC"
      | "FORM_1099_TYPE_K";
    /**
     * Credit1099Payer
     * @description An object representing a payer used by 1099-MISC tax documents.
     */
    Credit1099Payer: {
      address?: components["schemas"]["CreditPayStubAddress"];
      /** @description Name of payer. */
      name?: string | null;
      /** @description Tax identification number of payer. */
      tin?: string | null;
      /** @description Telephone number of payer. */
      telephone_number?: string | null;
    } & { [key: string]: unknown };
    /**
     * Credit1099Recipient
     * @description An object representing a recipient used in both 1099-K and 1099-MISC tax documents.
     */
    Credit1099Recipient: {
      address?: components["schemas"]["CreditPayStubAddress"];
      /** @description Name of recipient. */
      name?: string | null;
      /** @description Tax identification number of recipient. */
      tin?: string | null;
      /** @description Account number number of recipient. */
      account_number?: string | null;
      /** @description Checked if FACTA is a filing requirement. */
      facta_filing_requirement?: string | null;
      /** @description Checked if 2nd TIN exists. */
      second_tin_exists?: string | null;
    } & { [key: string]: unknown };
    /**
     * Credit1099Filer
     * @description An object representing a filer used by 1099-K tax documents.
     */
    Credit1099Filer: {
      address?: components["schemas"]["CreditPayStubAddress"];
      /** @description Name of filer. */
      name?: string | null;
      /** @description Tax identification number of filer. */
      tin?: string | null;
      /** @description One of the following values will be provided: Payment Settlement Entity (PSE), Electronic Payment Fecilitator (EPF), Other Third Party */
      type?: string | null;
    } & { [key: string]: unknown };
    /**
     * CreditPayStub
     * @description An object representing an end user's pay stub.
     */
    CreditPayStub: {
      deductions: components["schemas"]["CreditPayStubDeductions"];
      /** @description An identifier of the document referenced by the document metadata. */
      document_id: string | null;
      document_metadata: components["schemas"]["CreditDocumentMetadata"];
      earnings: components["schemas"]["CreditPayStubEarnings"];
      employee: components["schemas"]["CreditPayStubEmployee"];
      employer: components["schemas"]["CreditPayStubEmployer"];
      net_pay: components["schemas"]["CreditPayStubNetPay"];
      pay_period_details: components["schemas"]["PayStubPayPeriodDetails"];
    } & { [key: string]: unknown };
    /**
     * CreditPayStubDeductions
     * @description An object with the deduction information found on a pay stub.
     */
    CreditPayStubDeductions: {
      breakdown: components["schemas"]["PayStubDeductionsBreakdown"][];
      total: components["schemas"]["PayStubDeductionsTotal"];
    } & { [key: string]: unknown };
    /**
     * PayStubDeductionsBreakdown
     * @description An object representing the deduction line items for the pay period
     */
    PayStubDeductionsBreakdown: {
      /**
       * Format: double
       * @description Raw amount of the deduction
       */
      current_amount: number | null;
      /** @description Description of the deduction line item */
      description: string | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * Format: double
       * @description The year-to-date amount of the deduction
       */
      ytd_amount: number | null;
    } & { [key: string]: unknown };
    /**
     * PayStubDeductionsTotal
     * @description An object representing the total deductions for the pay period
     */
    PayStubDeductionsTotal: {
      /**
       * Format: double
       * @description Raw amount of the deduction
       */
      current_amount: number | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * Format: double
       * @description The year-to-date total amount of the deductions
       */
      ytd_amount: number | null;
    } & { [key: string]: unknown };
    /**
     * CreditPayStubEarnings
     * @description An object representing both a breakdown of earnings on a pay stub and the total earnings.
     */
    CreditPayStubEarnings: {
      breakdown: components["schemas"]["PayStubEarningsBreakdown"][];
      total: components["schemas"]["PayStubEarningsTotal"];
    } & { [key: string]: unknown };
    /**
     * PayStubEarningsBreakdown
     * @description An object representing the earnings line items for the pay period.
     */
    PayStubEarningsBreakdown: {
      canonical_description: components["schemas"]["PayStubEarningsBreakdownCanonicalDescription"];
      /**
       * Format: double
       * @description Raw amount of the earning line item.
       */
      current_amount: number | null;
      /** @description Description of the earning line item. */
      description: string | null;
      /** @description Number of hours applicable for this earning. */
      hours: number | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * Format: double
       * @description Hourly rate applicable for this earning.
       */
      rate: number | null;
      /**
       * @description The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * Format: double
       * @description The year-to-date amount of the deduction.
       */
      ytd_amount: number | null;
    } & { [key: string]: unknown };
    /** @description Commonly used term to describe the earning line item. */
    PayStubEarningsBreakdownCanonicalDescription: string | null;
    /**
     * PayStubEarningsTotal
     * @description An object representing both the current pay period and year to date amount for an earning category.
     */
    PayStubEarningsTotal: {
      /**
       * Format: double
       * @description Total amount of the earnings for this pay period.
       */
      current_amount: number | null;
      /** @description Total number of hours worked for this pay period. */
      hours: number | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * Format: double
       * @description The total year-to-date amount of the earnings.
       */
      ytd_amount: number | null;
    } & { [key: string]: unknown };
    /**
     * CreditPayStubEmployee
     * @description Data about the employee.
     */
    CreditPayStubEmployee: {
      address: components["schemas"]["CreditPayStubAddress"];
      /** @description The name of the employee. */
      name: string | null;
      /** @description Marital status of the employee - either `SINGLE` or `MARRIED`. */
      marital_status: string | null;
      taxpayer_id: components["schemas"]["PayStubTaxpayerID"];
    } & { [key: string]: unknown };
    /**
     * CreditPayStubAddress
     * @description Address on the pay stub.
     */
    CreditPayStubAddress: {
      /** @description The full city name. */
      city: string | null;
      /** @description The ISO 3166-1 alpha-2 country code. */
      country: string | null;
      /** @description The postal code of the address. */
      postal_code: string | null;
      /**
       * @description The region or state.
       * Example: `"NC"`
       */
      region: string | null;
      /** @description The full street address. */
      street: string | null;
    } & { [key: string]: unknown };
    /**
     * PayStubTaxpayerID
     * @description Taxpayer ID of the individual receiving the paystub.
     */
    PayStubTaxpayerID: {
      /** @description Type of ID, e.g. 'SSN'. */
      id_type: string | null;
      /** @description ID mask; i.e. last 4 digits of the taxpayer ID. */
      id_mask: string | null;
    } & { [key: string]: unknown };
    /**
     * CreditPayStubEmployer
     * @description Information about the employer on the pay stub.
     */
    CreditPayStubEmployer: {
      address: components["schemas"]["CreditPayStubAddress"];
      /** @description The name of the employer on the pay stub. */
      name: string | null;
    } & { [key: string]: unknown };
    /**
     * CreditPayStubNetPay
     * @description An object representing information about the net pay amount on the pay stub.
     */
    CreditPayStubNetPay: {
      /**
       * Format: double
       * @description Raw amount of the net pay for the pay period.
       */
      current_amount: number | null;
      /** @description Description of the net pay. */
      description: string | null;
      /** @description The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * Format: double
       * @description The year-to-date amount of the net pay.
       */
      ytd_amount: number | null;
    } & { [key: string]: unknown };
    /**
     * PayStubPayPeriodDetails
     * @description Details about the pay period.
     */
    PayStubPayPeriodDetails: {
      /**
       * Format: double
       * @description The amount of the paycheck.
       */
      pay_amount: number | null;
      distribution_breakdown: components["schemas"]["PayStubDistributionBreakdown"][];
      /**
       * Format: date
       * @description The date on which the pay period ended, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
       */
      end_date: string | null;
      /**
       * Format: double
       * @description Total earnings before tax/deductions.
       */
      gross_earnings: number | null;
      /** @description The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * Format: date
       * @description The date on which the pay stub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
       */
      pay_date: string | null;
      /** @description The frequency at which an individual is paid. */
      pay_frequency: string | null;
      /**
       * Format: date
       * @description The date on which the pay period started, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
       */
      start_date: string | null;
      /**
       * @description The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
    } & { [key: string]: unknown };
    /**
     * PayStubDistributionBreakdown
     * @description Information about the accounts that the payment was distributed to.
     */
    PayStubDistributionBreakdown: {
      /** @description Name of the account for the given distribution. */
      account_name: string | null;
      /** @description The name of the bank that the payment is being deposited to. */
      bank_name: string | null;
      /**
       * Format: double
       * @description The amount distributed to this account.
       */
      current_amount: number | null;
      /** @description The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /** @description The last 2-4 alphanumeric characters of an account's official account number. */
      mask: string | null;
      /** @description Type of the account that the paystub was sent to (e.g. 'checking'). */
      type: string | null;
      /**
       * @description The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
    } & { [key: string]: unknown };
    /**
     * ReportToken
     * @description ReportToken is a representation of a token that has a `report_type` field that can be one of `assets` or `income` and a `token` field which is the associated token with the `report_type`. The `token` can be an Asset Report token or Income Report token.
     */
    ReportToken: {
      report_type?: components["schemas"]["ReportType"];
      /**
       * Token
       * @description The report token. It can be an asset report token or an income report token.
       */
      token?: string;
    } & { [key: string]: unknown };
    /**
     * ReportType
     * @description The report type. It can be `assets` or `income`.
     * @enum {string}
     */
    ReportType: "assets" | "income";
    /**
     * DocumentRiskSignal
     * @description Details about a certain reason as to why a document could potentially be fraudulent.
     */
    DocumentRiskSignal:
      | ({
          /**
           * DocumentRiskSignalResultType
           * @description The result from the risk signal check.
           */
          type: string | null;
          /**
           * DocumentRiskSignalField
           * @description The field which the risk signal was computed for
           */
          field: string | null;
          /**
           * DocumentRiskSignalHasFraudRisk
           * @description A flag used to quickly identify if the signal indicates that this field is authentic or fraudulent
           */
          has_fraud_risk: boolean | null;
          institution_metadata: components["schemas"]["DocumentRiskSignalInstitutionMetadata"];
          /**
           * DocumentRiskSignalExpectedValue
           * @description The expected value of the field, as seen on the document
           */
          expected_value: string | null;
          /**
           * DocumentRiskSignalActualValue
           * @description The derived value obtained in the risk signal calculation process for this field
           */
          actual_value: string | null;
          /**
           * DocumentRiskSignalDescription
           * @description A human-readable explanation providing more detail into the particular risk signal
           */
          signal_description: string | null;
        } & { [key: string]: unknown })
      | null;
    /**
     * DocumentRiskSignalInstitutionMetadata
     * @description An object which contains additional metadata about the institution used to compute the verification attribute
     */
    DocumentRiskSignalInstitutionMetadata:
      | ({
          item_id: components["schemas"]["ItemId"];
        } & { [key: string]: unknown })
      | null;
    /**
     * PayrollItemStatus
     * @description Details about the status of the payroll item.
     */
    PayrollItemStatus:
      | ({
          /**
           * PayrollItemStatusProcessingStatus
           * @description Denotes the processing status for the verification.
           *
           * `UNKNOWN`: The processing status could not be determined.
           *
           * `PROCESSING_COMPLETE`: The processing has completed and the user has approved for sharing. The data is available to be retrieved.
           *
           * `PROCESSING`: The verification is still processing. The data is not available yet.
           *
           * `FAILED`: The processing failed to complete successfully.
           *
           * `APPROVAL_STATUS_PENDING`: The processing has completed but the user has not yet approved the sharing of the data.
           */
          processing_status?: string | null;
        } & { [key: string]: unknown })
      | null;
    /**
     * CreditW2
     * @description W2 is an object that represents income data taken from a W2 tax document.
     */
    CreditW2: {
      document_metadata: components["schemas"]["CreditDocumentMetadata"];
      /** @description An identifier of the document referenced by the document metadata. */
      document_id: string;
      employer: components["schemas"]["CreditPayStubEmployer"];
      employee: components["schemas"]["CreditPayStubEmployee"];
      /** @description The tax year of the W2 document. */
      tax_year: string | null;
      /** @description An employee identification number or EIN. */
      employer_id_number: string | null;
      /** @description Wages from tips and other compensation. */
      wages_tips_other_comp: string | null;
      /** @description Federal income tax withheld for the tax year. */
      federal_income_tax_withheld: string | null;
      /** @description Wages from social security. */
      social_security_wages: string | null;
      /** @description Social security tax withheld for the tax year. */
      social_security_tax_withheld: string | null;
      /** @description Wages and tips from medicare. */
      medicare_wages_and_tips: string | null;
      /** @description Medicare tax withheld for the tax year. */
      medicare_tax_withheld: string | null;
      /** @description Tips from social security. */
      social_security_tips: string | null;
      /** @description Allocated tips. */
      allocated_tips: string | null;
      /** @description Contents from box 9 on the W2. */
      box_9: string | null;
      /** @description Dependent care benefits. */
      dependent_care_benefits: string | null;
      /** @description Nonqualified plans. */
      nonqualified_plans: string | null;
      box_12: components["schemas"]["W2Box12"][];
      /** @description Statutory employee. */
      statutory_employee: string | null;
      /** @description Retirement plan. */
      retirement_plan: string | null;
      /** @description Third party sick pay. */
      third_party_sick_pay: string | null;
      /** @description Other. */
      other: string | null;
      state_and_local_wages: components["schemas"]["W2StateAndLocalWages"][];
    } & { [key: string]: unknown };
    /**
     * PayrollIncomeRateOfPay
     * @description An object representing the rate at which an individual is paid.
     */
    PayrollIncomeRateOfPay: {
      /** @description The rate at which an employee is paid. */
      pay_rate?: string | null;
      /**
       * Format: double
       * @description The amount at which an employee is paid.
       */
      pay_amount?: number | null;
    } & { [key: string]: unknown };
    /**
     * CreditPayrollIncomePrecheckRequest
     * @description Defines the request schema for `/credit/payroll_income/precheck`.
     */
    CreditPayrollIncomePrecheckRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token?: components["schemas"]["UserToken"];
      /** @description An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with `transactions`, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product. */
      access_tokens?: components["schemas"]["AccessToken"][];
      employer?: components["schemas"]["IncomeVerificationPrecheckEmployer"];
      us_military_info?: components["schemas"]["IncomeVerificationPrecheckMilitaryInfo"];
    };
    /**
     * CreditPayrollIncomePrecheckResponse
     * @description Defines the response schema for `/credit/payroll_income/precheck`.
     */
    CreditPayrollIncomePrecheckResponse: {
      request_id: components["schemas"]["RequestID"];
      confidence: components["schemas"]["IncomeVerificationPrecheckConfidence"];
    } & { [key: string]: unknown };
    /**
     * CreditPayrollIncomeRefreshRequest
     * @description CreditPayrollIncomeRefreshRequest defines the request schema for `/credit/payroll_income/refresh`
     */
    CreditPayrollIncomeRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token?: components["schemas"]["UserToken"];
    };
    /**
     * CreditPayrollIncomeRefreshResponse
     * @description CreditPayrollIncomeRefreshResponse defines the response schema for `/credit/payroll_income/refresh`
     */
    CreditPayrollIncomeRefreshResponse: {
      request_id: components["schemas"]["RequestID"];
      verification_refresh_status: components["schemas"]["CreditPayrollIncomeRefreshStatus"];
    } & { [key: string]: unknown };
    /**
     * CreditEmploymentGetRequest
     * @description CreditEmploymentGetRequest defines the request schema for `/credit/employment/get`.
     */
    CreditEmploymentGetRequest: {
      client_id: components["schemas"]["APIClientID"];
      secret: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
    };
    /**
     * CreditEmploymentGetResponse
     * @description CreditEmploymentGetResponse defines the response schema for `/credit/employment/get`.
     */
    CreditEmploymentGetResponse: {
      /** @description Array of employment items. */
      items: components["schemas"]["CreditEmploymentItem"][];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * CreditEmploymentItem
     * @description The object containing employment items.
     */
    CreditEmploymentItem: {
      item_id: components["schemas"]["ItemId"];
      employments: components["schemas"]["CreditEmploymentVerification"][];
      /**
       * EmploymentReportToken
       * @description Token to represent the underlying Employment data
       */
      employment_report_token: string;
    } & { [key: string]: unknown };
    /**
     * CreditEmploymentVerification
     * @description The object containing proof of employment data for an individual.
     */
    CreditEmploymentVerification: {
      /** @description ID of the payroll provider account. */
      account_id: string | null;
      status: components["schemas"]["CreditEmploymentVerificationStatus"];
      /**
       * Format: date
       * @description Start of employment in ISO 8601 format (YYYY-MM-DD).
       */
      start_date: string | null;
      /**
       * Format: date
       * @description End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).
       */
      end_date: string | null;
      employer: components["schemas"]["CreditEmployerVerification"];
      /** @description Current title of employee. */
      title: string | null;
      platform_ids: components["schemas"]["CreditPlatformIds"];
      employee_type: components["schemas"]["CreditEmploymentEmployeeType"];
      /**
       * Format: date
       * @description The date of the employee's most recent paystub in ISO 8601 format (YYYY-MM-DD).
       */
      last_paystub_date: string | null;
    } & { [key: string]: unknown };
    /**
     * CreditEmploymentEmployeeType
     * @description The type of employment for the individual.
     * `"FULL_TIME"`: A full-time employee.
     * `"PART_TIME"`: A part-time employee.
     * `"CONTRACTOR"`: An employee typically hired externally through a contracting group.
     * `"TEMPORARY"`: A temporary employee.
     * `"OTHER"`: The employee type is not one of the above defined types.
     */
    CreditEmploymentEmployeeType: string | null;
    /**
     * CreditEmploymentVerificationStatus
     * @description Current employment status.
     */
    CreditEmploymentVerificationStatus: string | null;
    /**
     * CreditEmployerVerification
     * @description An object containing employer data.
     */
    CreditEmployerVerification: {
      /** @description Name of employer. */
      name: string | null;
    } & { [key: string]: unknown };
    /**
     * CreditPlatformIds
     * @description The object containing a set of ids related to an employee.
     */
    CreditPlatformIds: {
      /** @description The ID of an employee as given by their employer. */
      employee_id: string | null;
      /** @description The ID of an employee as given by their payroll. */
      payroll_id: string | null;
      /** @description The ID of the position of the employee. */
      position_id: string | null;
    } & { [key: string]: unknown };
    /** @description The warning associated with the data that was unavailable for the Bank Income Report. */
    CreditBankIncomeWarning: {
      warning_type?: components["schemas"]["CreditBankIncomeWarningType"];
      warning_code?: components["schemas"]["CreditBankIncomeWarningCode"];
      cause?: components["schemas"]["CreditBankIncomeCause"];
    };
    /**
     * @description The warning type which will always be `BANK_INCOME_WARNING`.
     * @enum {string}
     */
    CreditBankIncomeWarningType: "BANK_INCOME_WARNING";
    /**
     * @description The warning code identifies a specific kind of warning.
     * `IDENTITY_UNAVAILABLE`: Unable to extract identity for the Item
     * `TRANSACTIONS_UNAVAILABLE`: Unable to extract transactions for the Item
     * `ITEM_UNAPPROVED`: User did not grant permission to share income data for the Item
     * `REPORT_DELETED`: Report deleted due to customer or consumer request
     * @enum {string}
     */
    CreditBankIncomeWarningCode:
      | "IDENTITY_UNAVAILABLE"
      | "TRANSACTIONS_UNAVAILABLE"
      | "ITEM_UNAPPROVED"
      | "REPORT_DELETED";
    /** @description An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items. */
    CreditBankIncomeCause: {
      error_type?: components["schemas"]["CreditBankIncomeErrorType"];
      /** @description We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. Error fields will be `null` if no error has occurred. */
      error_code?: string;
      /** @description A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use. */
      error_message?: string;
      /**
       * @description A user-friendly representation of the error code. null if the error is not related to user action.
       * This may change over time and is not safe for programmatic use.
       */
      display_message?: string;
      /** @description The `item_id` of the Item associated with this warning. */
      item_id?: string;
    };
    /**
     * @description A broad categorization of the error. Safe for programmatic use.
     * @enum {string}
     */
    CreditBankIncomeErrorType:
      | "INTERNAL_SERVER_ERROR"
      | "INSUFFICIENT_CREDENTIALS"
      | "ITEM_LOCKED"
      | "USER_SETUP_REQUIRED"
      | "COUNTRY_NOT_SUPPORTED"
      | "INSTITUTION_DOWN"
      | "INSTITUTION_NO_LONGER_SUPPORTED"
      | "INSTITUTION_NOT_RESPONDING"
      | "INVALID_CREDENTIALS"
      | "INVALID_MFA"
      | "INVALID_SEND_METHOD"
      | "ITEM_LOGIN_REQUIRED"
      | "MFA_NOT_SUPPORTED"
      | "NO_ACCOUNTS"
      | "ITEM_NOT_SUPPORTED"
      | "ACCESS_NOT_GRANTED";
    /** @description CreditRelayCreateRequest defines the request schema for `/credit/relay/create` */
    CreditRelayCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description List of report tokens, with at most one token of each report type. Currently only Asset Report token is supported. */
      report_tokens: components["schemas"]["ReportToken"][];
      /** @description The `secondary_client_id` is the client id of the third party with whom you would like to share the Relay Token. */
      secondary_client_id: string;
      /** @description URL to which Plaid will send webhooks when the Secondary Client successfully retrieves an Asset Report by calling `/credit/relay/get`. */
      webhook?: string | null;
    };
    /** @description CreditRelayCreateResponse defines the response schema for `/credit/relay/create` */
    CreditRelayCreateResponse: {
      /** @description A token that can be shared with a third party to allow them to access the Asset Report. This token should be stored securely. */
      relay_token: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * CreditRelayGetRequest
     * @description CreditRelayGetRequest defines the request schema for `/credit/relay/get`
     */
    CreditRelayGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `relay_token` granting access to the report you would like to get. */
      relay_token: string;
      report_type: components["schemas"]["ReportType"];
    };
    /** @description CreditRelayRefreshRequest defines the request schema for `/credit/relay/refresh` */
    CreditRelayRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `relay_token` granting access to the report you would like to refresh. */
      relay_token: string;
      report_type: components["schemas"]["ReportType"];
      /** @description The URL registered to receive webhooks when the report of a Relay Token has been refreshed. */
      webhook?: string | null;
    };
    /** @description CreditRelayRefreshResponse defines the response schema for `/credit/relay/refresh` */
    CreditRelayRefreshResponse: {
      relay_token: string;
      asset_report_id?: components["schemas"]["AssetReportId"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description CreditRelayRemoveRequest defines the request schema for `/credit/relay/remove` */
    CreditRelayRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `relay_token` you would like to revoke. */
      relay_token: string;
    };
    /** @description CreditRelayRemoveResponse defines the response schema for `/credit/relay/remove` */
    CreditRelayRemoveResponse: {
      /** @description `true` if the Relay token was successfully removed. */
      removed: boolean;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * SandboxBankTransferFireWebhookRequest
     * @description Defines the request schema for `/sandbox/bank_transfer/fire_webhook`
     */
    SandboxBankTransferFireWebhookRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The URL to which the webhook should be sent. */
      webhook: string;
    };
    /**
     * SandboxBankTransferFireWebhookResponse
     * @description Defines the response schema for `/sandbox/bank_transfer/fire_webhook`
     */
    SandboxBankTransferFireWebhookResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * SandboxTransferFireWebhookRequest
     * @description Defines the request schema for `/sandbox/transfer/fire_webhook`
     */
    SandboxTransferFireWebhookRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The URL to which the webhook should be sent. */
      webhook: string;
    };
    /**
     * SandboxTransferFireWebhookResponse
     * @description Defines the response schema for `/sandbox/transfer/fire_webhook`
     */
    SandboxTransferFireWebhookResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * ApplicationID
     * @description This field will map to the application ID that is returned from /item/applications/list, or provided to the institution in an oauth redirect.
     */
    ApplicationID: string;
    /** @description Metadata about the application */
    Application: {
      application_id: components["schemas"]["ApplicationID"];
      /** @description The name of the application */
      name: string;
      /** @description A human-readable name of the application for display purposes */
      display_name: string | null;
      /**
       * Format: date
       * @description The date this application was granted production access at Plaid in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
       */
      join_date: string;
      /** @description A URL that links to the application logo image. */
      logo_url: string | null;
      /** @description The URL for the application's website */
      application_url: string | null;
      /** @description A string provided by the connected app stating why they use their respective enabled products. */
      reason_for_access: string | null;
      /** @description A string representing client’s broad use case as assessed by Plaid. */
      use_case: string | null;
      /** @description A string representing the name of client’s legal entity. */
      company_legal_name: string | null;
      /** @description A string representing the city of the client’s headquarters. */
      city: string | null;
      /** @description A string representing the region of the client’s headquarters. */
      region: string | null;
      /** @description A string representing the postal code of the client’s headquarters. */
      postal_code: string | null;
      /** @description A string representing the country code of the client’s headquarters. */
      country_code: string | null;
    };
    /** @description ApplicationGetRequest defines the schema for `/application/get` */
    ApplicationGetRequest: {
      client_id: components["schemas"]["APIClientID"];
      secret: components["schemas"]["APISecret"];
      application_id: components["schemas"]["ApplicationID"];
    };
    /** @description ApplicationGetResponse defines the response schema for `/application/get` */
    ApplicationGetResponse: {
      request_id: components["schemas"]["RequestID"];
      application: components["schemas"]["Application"];
    } & { [key: string]: unknown };
    /** @description The product access being requested. Used to or disallow product access across all accounts. If unset, defaults to all products allowed. */
    ProductAccess: {
      /**
       * @description Allow access to statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      statements?: boolean | null;
      /**
       * @description Allow access to the Identity product (name, email, phone, address). Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      identity?: boolean | null;
      /**
       * @description Allow access to account number details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      auth?: boolean | null;
      /**
       * @description Allow access to transaction details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      transactions?: boolean | null;
      /**
       * @description Allow access to "accounts_details_transactions". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      accounts_details_transactions?: boolean | null;
      /**
       * @description Allow access to "accounts_routing_number". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      accounts_routing_number?: boolean | null;
      /**
       * @description Allow access to "accounts_statements". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      accounts_statements?: boolean | null;
      /**
       * @description Allow access to "accounts_tax_statements". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      accounts_tax_statements?: boolean | null;
      /**
       * @description Allow access to "customers_profiles". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      customers_profiles?: boolean | null;
    } & { [key: string]: unknown };
    /** @description Allow or disallow product access by account. Unlisted (e.g. missing) accounts will be considered `new_accounts`. */
    AccountAccess: {
      /** @description The unique account identifier for this account. This value must match that returned by the data access API for this account. */
      unique_id: string;
      /**
       * @description Allow the application to see this account (and associated details, including balance) in the list of accounts  If unset, defaults to `true`.
       * @default true
       */
      authorized?: boolean | null;
      account_product_access?: components["schemas"]["AccountProductAccessNullable"];
    };
    /** @description Allow the application to access specific products on this account */
    AccountProductAccessNullable:
      | (components["schemas"]["AccountProductAccess"] & {
          [key: string]: unknown;
        })
      | null;
    /** @description Allow the application to access specific products on this account */
    AccountProductAccess: {
      /**
       * @description Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      account_data?: boolean | null;
      /**
       * @description Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      statements?: boolean | null;
      /**
       * @description Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      tax_documents?: boolean | null;
    };
    /** @description The scopes object */
    ScopesNullable:
      | (components["schemas"]["Scopes"] & { [key: string]: unknown })
      | null;
    /** @description The scopes object */
    Scopes: {
      product_access?: components["schemas"]["ProductAccess"];
      accounts?: components["schemas"]["AccountAccess"][];
      /**
       * @description Allow access to newly opened accounts as they are opened. If unset, defaults to `true`.
       * @default true
       */
      new_accounts?: boolean | null;
    };
    /** @description When scopes are updated during enrollment, this field must be populated with the state sent to the partner in the OAuth Login URI. This field is required when the context is `ENROLLMENT`. */
    ScopesState: string;
    /**
     * @description An indicator for when scopes are being updated. When scopes are updated via enrollment (i.e. OAuth), the partner must send `ENROLLMENT`. When scopes are updated in a post-enrollment view, the partner must send `PORTAL`.
     * @enum {string}
     */
    ScopesContext: "ENROLLMENT" | "PORTAL";
    /** @description ItemApplicationScopesUpdateRequest defines the request schema for `/item/application/scopes/update` */
    ItemApplicationScopesUpdateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      application_id: components["schemas"]["ApplicationID"];
      scopes: components["schemas"]["Scopes"];
      state?: components["schemas"]["ScopesState"];
      context: components["schemas"]["ScopesContext"];
    };
    /** @description ItemApplicationScopesUpdateResponse defines the response schema for `/item/application/scopes/update` */
    ItemApplicationScopesUpdateResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Request to list connected applications for a user. */
    ItemApplicationListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token?: components["schemas"]["AccessTokenNullable"];
    };
    /** @description Describes the connected application for a particular end user. */
    ItemApplicationListResponse: {
      request_id?: components["schemas"]["RequestID"];
      /** @description A list of connected applications. */
      applications: components["schemas"]["ConnectedApplication"][];
    } & { [key: string]: unknown };
    /** @description Describes the connected application for a particular end user. */
    ConnectedApplication: {
      application_id: components["schemas"]["ApplicationID"];
      /** @description The name of the application */
      name: string;
      /** @description A human-readable name of the application for display purposes */
      display_name?: string | null;
      /** @description A URL that links to the application logo image. */
      logo_url?: string | null;
      /** @description The URL for the application's website */
      application_url?: string | null;
      /** @description A string provided by the connected app stating why they use their respective enabled products. */
      reason_for_access?: string | null;
      /**
       * Format: date
       * @description The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
       * @example 2020-01-01
       */
      created_at: string;
      scopes?: components["schemas"]["ScopesNullable"];
    };
    /**
     * @description The application requires that accounts be limited to a specific cardinality.
     * `MULTI_SELECT`: indicates that the user should be allowed to pick multiple accounts.
     * `SINGLE_SELECT`: indicates that the user should be allowed to pick only a single account.
     * `ALL`: indicates that the user must share all of their accounts and should not be given the opportunity to de-select
     * @enum {string}
     */
    AccountSelectionCardinality: "SINGLE_SELECT" | "MULTI_SELECT" | "ALL";
    /** @description Enumerates the account subtypes that the application wishes for the user to be able to select from. For more details refer to Plaid documentation on account filters. */
    AccountFilter: {
      depository?: components["schemas"]["AccountFilterSubtypes"];
      credit?: components["schemas"]["AccountFilterSubtypes"];
      loan?: components["schemas"]["AccountFilterSubtypes"];
      investment?: components["schemas"]["AccountFilterSubtypes"];
    };
    /** @description A list of account subtypes to be filtered. */
    AccountFilterSubtypes: string[];
    /**
     * SandboxIncomeFireWebhookRequest
     * @description SandboxIncomeFireWebhookRequest defines the request schema for `/sandbox/income/fire_webhook`
     */
    SandboxIncomeFireWebhookRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The Item ID associated with the verification. */
      item_id: string;
      user_id?: components["schemas"]["UserId"];
      /** @description The URL to which the webhook should be sent. */
      webhook: string;
      /**
       * @description `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.
       *
       * `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.
       *
       * `VERIFICATION_STATUS_PENDING_APPROVAL`: The income verification has been sent to the user for review.
       * @enum {string}
       */
      verification_status:
        | "VERIFICATION_STATUS_PROCESSING_COMPLETE"
        | "VERIFICATION_STATUS_PROCESSING_FAILED"
        | "VERIFICATION_STATUS_PENDING_APPROVAL";
    };
    /**
     * SandboxIncomeFireWebhookResponse
     * @description SandboxIncomeFireWebhookResponse defines the response schema for `/sandbox/income/fire_webhook`
     */
    SandboxIncomeFireWebhookResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description User authentication parameters, for clients making a request without an `access_token`. This is only allowed for select clients and will not be supported in the future. Most clients should call /item/import to obtain an access token before making a request. */
    ItemApplicationListUserAuth: {
      /** @description Account username. */
      user_id?: string | null;
      /** @description Account username hashed by FI. */
      fi_username_hash?: string | null;
    } | null;
    /**
     * SignalEvaluateRequest
     * @description SignalEvaluateRequest defines the request schema for `/signal/evaluate`
     */
    SignalEvaluateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /** @description The `account_id` of the account whose verification status is to be modified */
      account_id: string;
      /** @description The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters. */
      client_transaction_id: string;
      /**
       * Format: double
       * @description The transaction amount, in USD (e.g. `102.05`)
       */
      amount: number;
      /** @description `true` if the end user is present while initiating the ACH transfer and the endpoint is being called; `false` otherwise (for example, when the ACH transfer is scheduled and the end user is not present, or you call this endpoint after the ACH transfer but before submitting the Nacha file for ACH processing). */
      user_present?: boolean | null;
      /** @description A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple Items. The max length for this field is 36 characters. */
      client_user_id?: string;
      user?: components["schemas"]["SignalUser"];
      device?: components["schemas"]["SignalDevice"];
    };
    /**
     * SignalUser
     * @description Details about the end user initiating the transaction (i.e., the account holder).
     */
    SignalUser: {
      name?: components["schemas"]["SignalPersonName"];
      /** @description The user's phone number, in E.164 format: +{countrycode}{number}. For example: "+14151234567" */
      phone_number?: string | null;
      /** @description The user's email address. */
      email_address?: string | null;
      address?: components["schemas"]["SignalAddressData"];
    };
    /**
     * SignalPersonName
     * @description The user's legal name
     */
    SignalPersonName: {
      /** @description The user's name prefix (e.g. "Mr.") */
      prefix?: string | null;
      /** @description The user's given name. If the user has a one-word name, it should be provided in this field. */
      given_name?: string | null;
      /** @description The user's middle name */
      middle_name?: string | null;
      /** @description The user's family name / surname */
      family_name?: string | null;
      /** @description The user's name suffix (e.g. "II") */
      suffix?: string | null;
    } | null;
    /**
     * AddressData
     * @description Data about the components comprising an address.
     */
    SignalAddressData:
      | ({
          /** @description The full city name */
          city?: string;
          /**
           * @description The region or state
           * Example: `"NC"`
           */
          region?: string | null;
          /**
           * @description The full street address
           * Example: `"564 Main Street, APT 15"`
           */
          street?: string;
          /** @description The postal code */
          postal_code?: string | null;
          /** @description The ISO 3166-1 alpha-2 country code */
          country?: string | null;
        } & { [key: string]: unknown })
      | null;
    /**
     * SignalEvaluateDevice
     * @description Details about the end user's device
     */
    SignalDevice: {
      /** @description The IP address of the device that initiated the transaction */
      ip_address?: string | null;
      /** @description The user agent of the device that initiated the transaction (e.g. "Mozilla/5.0") */
      user_agent?: string | null;
    };
    /**
     * SignalEvaluateResponse
     * @description SignalEvaluateResponse defines the response schema for `/signal/income/evaluate`
     */
    SignalEvaluateResponse: {
      request_id: components["schemas"]["RequestID"];
      scores: components["schemas"]["SignalScores"];
      core_attributes?: components["schemas"]["SignalEvaluateCoreAttributes"];
    } & { [key: string]: unknown };
    /**
     * SignalEvaluateScores
     * @description Risk scoring details broken down by risk category.
     */
    SignalScores: {
      customer_initiated_return_risk?: components["schemas"]["CustomerInitiatedReturnRisk"];
      bank_initiated_return_risk?: components["schemas"]["BankInitiatedReturnRisk"];
    } & { [key: string]: unknown };
    /** @description A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood. */
    SignalScore: number;
    /**
     * @description A tier corresponding to the projected likelihood that the transaction, if initiated, will be subject to a return.
     *
     * In the `customer_initiated_return_risk` object, there are five risk tiers corresponding to the scores:
     *   1: Predicted customer-initiated return incidence rate between 0.00% - 0.02%
     *   2: Predicted customer-initiated return incidence rate between 0.02% - 0.05%
     *   3: Predicted customer-initiated return incidence rate between 0.05% - 0.1%
     *   4: Predicted customer-initiated return incidence rate between 0.1% - 0.5%
     *   5: Predicted customer-initiated return incidence rate greater than 0.5%
     */
    CustomerInitiatedRiskTier: number;
    /**
     * CustomerInitiatedReturnRisk
     * @description The object contains a risk score and a risk tier that evaluate the transaction return risk of an unauthorized debit. Common return codes in this category include: "R05", "R07", "R10", "R11", "R29". These returns typically have a return time frame of up to 60 calendar days. During this period, the customer of financial institutions can dispute a transaction as unauthorized.
     */
    CustomerInitiatedReturnRisk: {
      score: components["schemas"]["SignalScore"];
      risk_tier: components["schemas"]["CustomerInitiatedRiskTier"];
    };
    /**
     * @description In the `bank_initiated_return_risk` object, there are eight risk tiers corresponding to the scores:
     *   1: Predicted bank-initiated return incidence rate between 0.0% - 0.5%
     *   2: Predicted bank-initiated return incidence rate between 0.5% - 1.5%
     *   3: Predicted bank-initiated return incidence rate between 1.5% - 3%
     *   4: Predicted bank-initiated return incidence rate between 3% - 5%
     *   5: Predicted bank-initiated return incidence rate between 5% - 10%
     *   6: Predicted bank-initiated return incidence rate between 10% - 15%
     *   7: Predicted bank-initiated return incidence rate between 15% and 50%
     *   8: Predicted bank-initiated return incidence rate greater than 50%
     */
    BankInitiatedRiskTier: number;
    /**
     * BankInitiatedReturnRisk
     * @description The object contains a risk score and a risk tier that evaluate the transaction return risk because an account is overdrawn or because an ineligible account is used. Common return codes in this category include: "R01", "R02", "R03", "R04", "R06", "R08",  "R09", "R13", "R16", "R17", "R20", "R23". These returns have a turnaround time of 2 banking days.
     */
    BankInitiatedReturnRisk: {
      score: components["schemas"]["SignalScore"];
      risk_tier: components["schemas"]["BankInitiatedRiskTier"];
    };
    /**
     * SignalEvaluateCoreAttributes
     * @description The core attributes object contains additional data that can be used to assess the ACH return risk. Examples of data include:
     *
     * `days_since_first_plaid_connection`: The number of days since the first time the Item was connected to an application via Plaid
     * `plaid_connections_count_7d`: The number of times the Item has been connected to applications via Plaid over the past 7 days
     * `plaid_connections_count_30d`: The number of times the Item has been connected to applications via Plaid over the past 30 days
     * `total_plaid_connections_count`: The number of times the Item has been connected to applications via Plaid
     * `is_savings_or_money_market_account`: Indicates whether the ACH transaction funding account is a savings/money market account
     *
     * For the full list and detailed documentation of core attributes available, or to request that core attributes not be returned, contact Sales or your Plaid account manager
     */
    SignalEvaluateCoreAttributes: {
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 7 days from the account that will be debited. */
      unauthorized_transactions_count_7d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 30 days from the account that will be debited. */
      unauthorized_transactions_count_30d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 60 days from the account that will be debited. */
      unauthorized_transactions_count_60d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 90 days from the account that will be debited. */
      unauthorized_transactions_count_90d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 7 days from the account that will be debited. */
      nsf_overdraft_transactions_count_7d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 30 days from the account that will be debited. */
      nsf_overdraft_transactions_count_30d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 60 days from the account that will be debited. */
      nsf_overdraft_transactions_count_60d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 90 days from the account that will be debited. */
      nsf_overdraft_transactions_count_90d?: number | null;
      /** @description The number of days since the first time the Item was connected to an application via Plaid */
      days_since_first_plaid_connection?: number | null;
      /** @description The number of times the Item has been connected to applications via Plaid over the past 7 days */
      plaid_connections_count_7d?: number | null;
      /** @description The number of times the Item has been connected to applications via Plaid over the past 30 days */
      plaid_connections_count_30d?: number | null;
      /** @description The total number of times the Item has been connected to applications via Plaid */
      total_plaid_connections_count?: number | null;
      /** @description Indicates if the ACH transaction funding account is a savings/money market account */
      is_savings_or_money_market_account?: boolean | null;
      /**
       * Format: double
       * @description The total credit (inflow) transaction amount over the past 10 days from the account that will be debited
       */
      total_credit_transactions_amount_10d?: number | null;
      /**
       * Format: double
       * @description The total debit (outflow) transaction amount over the past 10 days from the account that will be debited
       */
      total_debit_transactions_amount_10d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited
       */
      p50_credit_transactions_amount_28d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited
       */
      p50_debit_transactions_amount_28d?: number | null;
      /**
       * Format: double
       * @description The 95th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited
       */
      p95_credit_transactions_amount_28d?: number | null;
      /**
       * Format: double
       * @description The 95th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited
       */
      p95_debit_transactions_amount_28d?: number | null;
      /** @description The number of days within the past 90 days when the account that will be debited had a negative end-of-day available balance */
      days_with_negative_balance_count_90d?: number | null;
      /**
       * Format: double
       * @description The 90th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
       */
      p90_eod_balance_30d?: number | null;
      /**
       * Format: double
       * @description The 90th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
       */
      p90_eod_balance_60d?: number | null;
      /**
       * Format: double
       * @description The 90th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
       */
      p90_eod_balance_90d?: number | null;
      /**
       * Format: double
       * @description The 10th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
       */
      p10_eod_balance_30d?: number | null;
      /**
       * Format: double
       * @description The 10th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
       */
      p10_eod_balance_60d?: number | null;
      /**
       * Format: double
       * @description The 10th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
       */
      p10_eod_balance_90d?: number | null;
      /**
       * Format: double
       * @description Available balance, as of the `balance_last_updated` time. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.
       */
      available_balance?: number | null;
      /**
       * Format: double
       * @description Current balance, as of the `balance_last_updated` time. The current balance is the total amount of funds in the account.
       */
      current_balance?: number | null;
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the balance for the given account has been updated.
       */
      balance_last_updated?: string | null;
      /** @description The number of times the account's phone numbers on file have changed over the past 28 days */
      phone_change_count_28d?: number | null;
      /** @description The number of times the account's phone numbers on file have changed over the past 90 days */
      phone_change_count_90d?: number | null;
      /** @description The number of times the account's email addresses on file have changed over the past 28 days */
      email_change_count_28d?: number | null;
      /** @description The number of times the account's email addresses on file have changed over the past 90 days */
      email_change_count_90d?: number | null;
      /** @description The number of times the account's addresses on file have changed over the past 28 days */
      address_change_count_28d?: number | null;
      /** @description The number of times the account's addresses on file have changed over the past 90 days */
      address_change_count_90d?: number | null;
      /** @description The number of non-OAuth authentication attempts via Plaid for this bank account over the past 3 days */
      plaid_non_oauth_authentication_attempts_count_3d?: number | null;
      /** @description The number of non-OAuth authentication attempts via Plaid for this bank account over the past 7 days */
      plaid_non_oauth_authentication_attempts_count_7d?: number | null;
      /** @description The number of non-OAuth authentication attempts via Plaid for this bank account over the past 30 days */
      plaid_non_oauth_authentication_attempts_count_30d?: number | null;
      /** @description The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 3 days */
      failed_plaid_non_oauth_authentication_attempts_count_3d?: number | null;
      /** @description The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 7 days */
      failed_plaid_non_oauth_authentication_attempts_count_7d?: number | null;
      /** @description The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 30 days */
      failed_plaid_non_oauth_authentication_attempts_count_30d?: number | null;
      /** @description The total number of debit (outflow) transactions over the past 10 days from the account that will be debited */
      debit_transactions_count_10d?: number | null;
      /** @description The total number of credit (inflow) transactions over the past 10 days from the account that will be debited */
      credit_transactions_count_10d?: number | null;
      /** @description The total number of debit (outflow) transactions over the past 30 days from the account that will be debited */
      debit_transactions_count_30d?: number | null;
      /** @description The total number of credit (inflow) transactions over the past 30 days from the account that will be debited */
      credit_transactions_count_30d?: number | null;
      /** @description The total number of debit (outflow) transactions over the past 60 days from the account that will be debited */
      debit_transactions_count_60d?: number | null;
      /** @description The total number of credit (inflow) transactions over the past 60 days from the account that will be debited */
      credit_transactions_count_60d?: number | null;
      /** @description The total number of debit (outflow) transactions over the past 90 days from the account that will be debited */
      debit_transactions_count_90d?: number | null;
      /** @description The total number of credit (inflow) transactions over the past 90 days from the account that will be debited */
      credit_transactions_count_90d?: number | null;
      /**
       * Format: double
       * @description The total debit (outflow) transaction amount over the past 30 days from the account that will be debited
       */
      total_debit_transactions_amount_30d?: number | null;
      /**
       * Format: double
       * @description The total credit (inflow) transaction amount over the past 30 days from the account that will be debited
       */
      total_credit_transactions_amount_30d?: number | null;
      /**
       * Format: double
       * @description The total debit (outflow) transaction amount over the past 60 days from the account that will be debited
       */
      total_debit_transactions_amount_60d?: number | null;
      /**
       * Format: double
       * @description The total credit (inflow) transaction amount over the past 60 days from the account that will be debited
       */
      total_credit_transactions_amount_60d?: number | null;
      /**
       * Format: double
       * @description The total debit (outflow) transaction amount over the past 90 days from the account that will be debited
       */
      total_debit_transactions_amount_90d?: number | null;
      /**
       * Format: double
       * @description The total credit (inflow) transaction amount over the past 90 days from the account that will be debited
       */
      total_credit_transactions_amount_90d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
       */
      p50_eod_balance_30d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
       */
      p50_eod_balance_60d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
       */
      p50_eod_balance_90d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
       */
      p50_eod_balance_31d_to_60d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
       */
      p50_eod_balance_61d_to_90d?: number | null;
      /**
       * Format: double
       * @description The 90th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
       */
      p90_eod_balance_31d_to_60d?: number | null;
      /**
       * Format: double
       * @description The 90th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
       */
      p90_eod_balance_61d_to_90d?: number | null;
      /**
       * Format: double
       * @description The 10th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
       */
      p10_eod_balance_31d_to_60d?: number | null;
      /**
       * Format: double
       * @description The 10th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
       */
      p10_eod_balance_61d_to_90d?: number | null;
    };
    /**
     * SignalDecisionReportRequest
     * @description SignalDecisionReportRequest defines the request schema for `/signal/decision/report`
     */
    SignalDecisionReportRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate` */
      client_transaction_id: string;
      /** @description `true` if the ACH transaction was initiated, `false` otherwise. */
      initiated: boolean;
      /** @description The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate. For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization. */
      days_funds_on_hold?: number | null;
    };
    /**
     * SignalDecisionReportResponse
     * @description SignalDecisionReportResponse defines the response schema for `/signal/decision/report`
     */
    SignalDecisionReportResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * SignalReturnReportRequest
     * @description SignalReturnReportRequest defines the request schema for `/signal/return/report`
     */
    SignalReturnReportRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate` */
      client_transaction_id: string;
      /** @description Must be a valid ACH return code (e.g. "R01") */
      return_code: string;
    };
    /**
     * SignalReturnReportResponse
     * @description SignalReturnReportResponse defines the response schema for `/signal/return/report`
     */
    SignalReturnReportResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * SignalPrepareRequest
     * @description SignalPrepareRequest defines the request schema for `/signal/prepare`
     */
    SignalPrepareRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /**
     * SignalPrepareResponse
     * @description SignalPrepareResponse defines the response schema for `/signal/prepare`
     */
    SignalPrepareResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * SandboxOauthSelectAccountsRequest
     * @description Defines the request schema for `sandbox/oauth/select_accounts`
     */
    SandboxOauthSelectAccountsRequest: {
      oauth_state_id: string;
      accounts: string[];
    };
    /**
     * SandboxOauthSelectAccountsResponse
     * @description Defines the response schema for `/sandbox/oauth/select_accounts`
     */
    SandboxOauthSelectAccountsResponse: { [key: string]: unknown };
    /**
     * NewAccountsAvailableWebhook
     * @description Fired when Plaid detects a new account for Items created or updated with [Account Select v2](https://plaid.com/docs/link/customization/#account-select). Upon receiving this webhook, you can prompt your users to share new accounts with you through [Account Select v2 update mode](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts).
     */
    NewAccountsAvailableWebhook: {
      /** @description `ITEM` */
      webhook_type?: string;
      /** @description `NEW_ACCOUNTS_AVAILABLE` */
      webhook_code?: string;
      item_id?: components["schemas"]["ItemId"];
      error?: components["schemas"]["PlaidError"];
    };
    /** @description WalletCreateRequest defines the request schema for `/wallet/create` */
    WalletCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      iso_currency_code: components["schemas"]["WalletISOCurrencyCode"];
    };
    /** @description WalletCreateResponse defines the response schema for `/wallet/create` */
    WalletCreateResponse: components["schemas"]["Wallet"] & {
      request_id?: components["schemas"]["RequestID"];
    } & {
      wallet_id: unknown;
      balance: unknown;
      request_id: unknown;
    } & { [key: string]: unknown };
    /** @description WalletGetRequest defines the request schema for `/wallet/get` */
    WalletGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the e-wallet */
      wallet_id: string;
    };
    /** @description WalletGetResponse defines the response schema for `/wallet/get` */
    WalletGetResponse: components["schemas"]["Wallet"] & {
      request_id?: components["schemas"]["RequestID"];
    } & {
      wallet_id: unknown;
      balance: unknown;
      request_id: unknown;
    } & { [key: string]: unknown };
    /** @description WalletListRequest defines the request schema for `/wallet/list` */
    WalletListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      iso_currency_code?: components["schemas"]["WalletISOCurrencyCode"];
      /** @description A base64 value representing the latest e-wallet that has already been requested. Set this to `next_cursor` received from the previous `/wallet/list` request. If provided, the response will only contain e-wallets created before that e-wallet. If omitted, the response will contain e-wallets starting from the most recent, and in descending order. */
      cursor?: string;
      /**
       * @description The number of e-wallets to fetch
       * @default 10
       */
      count?: number;
    };
    /** @description WalletListResponse defines the response schema for `/wallet/list` */
    WalletListResponse: {
      /** @description An array of e-wallets */
      wallets: components["schemas"]["Wallet"][];
      /** @description Cursor used for fetching e-wallets created before the latest e-wallet provided in this response */
      next_cursor?: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * Wallet
     * @description An object representing the e-wallet
     */
    Wallet: {
      /** @description A unique ID identifying the e-wallet */
      wallet_id: string;
      balance: components["schemas"]["WalletBalance"];
      numbers: components["schemas"]["WalletNumbers"];
    } & { [key: string]: unknown };
    /**
     * WalletNumbers
     * @description An object representing the e-wallet account numbers
     */
    WalletNumbers: {
      bacs?: components["schemas"]["RecipientBACS"];
      international?: components["schemas"]["NumbersInternationalIBAN"];
    } & { [key: string]: unknown };
    /**
     * WalletBalance
     * @description An object representing the e-wallet balance
     */
    WalletBalance: {
      /** @description The ISO-4217 currency code of the balance */
      iso_currency_code: string;
      /**
       * Format: double
       * @description The total amount of funds in the account
       */
      current: number;
    } & { [key: string]: unknown };
    /**
     * ISO Currency Code
     * @description An ISO-4217 currency code, used with e-wallets and transactions.
     * @enum {string}
     */
    WalletISOCurrencyCode: "GBP" | "EUR";
    /** @description WalletTransactionExecuteRequest defines the request schema for `/wallet/transaction/execute` */
    WalletTransactionExecuteRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      idempotency_key: components["schemas"]["WalletTransactionIdempotencyKey"];
      /** @description The ID of the e-wallet to debit from */
      wallet_id: string;
      counterparty: components["schemas"]["WalletTransactionCounterparty"];
      amount: components["schemas"]["WalletTransactionAmount"];
      /**
       * @description A reference for the transaction. This must be an alphanumeric string with at most 18 characters and must not contain any special characters or spaces.
       * Ensure that the `reference` field is unique for each transaction.
       */
      reference: string;
    };
    /**
     * WalletTransactionIdempotencyKey
     * @description A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.
     *
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
     */
    WalletTransactionIdempotencyKey: string;
    /**
     * WalletTransactionCounterparty
     * @description An object representing the e-wallet transaction's counterparty
     */
    WalletTransactionCounterparty: {
      /** @description The name of the counterparty */
      name: string;
      numbers: components["schemas"]["WalletTransactionCounterpartyNumbers"];
    } & { [key: string]: unknown };
    /**
     * WalletTransactionCounterpartyNumbers
     * @description The counterparty's bank account numbers. Exactly one of IBAN or BACS data is required.
     */
    WalletTransactionCounterpartyNumbers: {
      bacs?: components["schemas"]["WalletTransactionCounterpartyBACS"];
      international?: components["schemas"]["WalletTransactionCounterpartyInternational"];
    } & { [key: string]: unknown };
    /** @description The account number and sort code of the counterparty's account */
    WalletTransactionCounterpartyBACS: components["schemas"]["RecipientBACS"] & {
      [key: string]: unknown;
    };
    /** @description International Bank Account Number for a Wallet Transaction */
    WalletTransactionCounterpartyInternational:
      | ({
          iban?: components["schemas"]["NumbersIBAN"];
        } & { [key: string]: unknown })
      | null;
    /**
     * WalletTransactionAmount
     * @description The amount and currency of a transaction
     */
    WalletTransactionAmount: {
      iso_currency_code: components["schemas"]["WalletISOCurrencyCode"];
      /**
       * Format: double
       * @description The amount of the transaction. Must contain at most two digits of precision e.g. `1.23`.
       */
      value: number;
    } & { [key: string]: unknown };
    /** @description WalletTransactionExecuteResponse defines the response schema for `/wallet/transaction/execute` */
    WalletTransactionExecuteResponse: {
      /** @description A unique ID identifying the transaction */
      transaction_id: string;
      status: components["schemas"]["WalletTransactionStatus"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * @description The status of the transaction.
     *
     * `INITIATED`: This is the initial state of all transactions. It indicates that the transaction has been initiated and is currently being processed.
     *
     * `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.
     *
     * `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.
     *
     * `FAILED`: The transaction failed to process successfully. This is a terminal status.
     *
     * `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
     * @enum {string}
     */
    WalletTransactionStatus:
      | "INITIATED"
      | "EXECUTED"
      | "SETTLED"
      | "BLOCKED"
      | "FAILED";
    /** @description WalletTransactionGetRequest defines the request schema for `/wallet/transaction/get` */
    WalletTransactionGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the transaction to fetch */
      transaction_id: string;
    };
    /**
     * WalletTransactionGetResponse
     * @description WalletTransactionGetResponse defines the response schema for `/wallet/transaction/get`
     */
    WalletTransactionGetResponse: components["schemas"]["WalletTransaction"] & {
      request_id?: components["schemas"]["RequestID"];
    } & {
      transaction_id: unknown;
      reference: unknown;
      type: unknown;
      amount: unknown;
      counterparty: unknown;
      status: unknown;
      created_at: unknown;
      request_id: unknown;
    } & { [key: string]: unknown };
    /** @description WalletTransactionsListRequest defines the request schema for `/wallet/transactions/list` */
    WalletTransactionsListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the e-wallet to fetch transactions from */
      wallet_id: string;
      /** @description A base64 value representing the latest transaction that has already been requested. Set this to `next_cursor` received from the previous `/wallet/transactions/list` request. If provided, the response will only contain transactions created before that transaction. If omitted, the response will contain transactions starting from the most recent, and in descending order by the `created_at` time. */
      cursor?: string;
      /**
       * @description The number of transactions to fetch
       * @default 10
       */
      count?: number;
    };
    /** @description WalletTransactionsListResponse defines the response schema for `/wallet/transactions/list` */
    WalletTransactionsListResponse: {
      /** @description An array of transactions of an e-wallet, associated with the given `wallet_id` */
      transactions: components["schemas"]["WalletTransaction"][];
      /** @description Cursor used for fetching transactions created before the latest transaction provided in this response */
      next_cursor?: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * WalletTransaction
     * @description The transaction details
     */
    WalletTransaction: {
      /** @description A unique ID identifying the transaction */
      transaction_id: string;
      /** @description A reference for the transaction */
      reference: string;
      /**
       * @description The type of the transaction. The supported transaction types that are returned are:
       * `BANK_TRANSFER:` a transaction which credits an e-wallet through an external bank transfer.
       *
       * `PAYOUT:` a transaction which debits an e-wallet by disbursing funds to a counterparty.
       *
       * `PIS_PAY_IN:` a payment which credits an e-wallet through Plaid's Payment Initiation Services (PIS) APIs. For more information see the [Payment Initiation endpoints](https://plaid.com/docs/api/products/payment-initiation/).
       *
       * `REFUND:` a transaction which debits an e-wallet by refunding a previously initated payment made through Plaid's [PIS APIs](https://plaid.com/docs/api/products/payment-initiation/).
       * @enum {string}
       */
      type: "BANK_TRANSFER" | "PAYOUT" | "PIS_PAY_IN" | "REFUND";
      amount: components["schemas"]["WalletTransactionAmount"];
      counterparty: components["schemas"]["WalletTransactionCounterparty"];
      status: components["schemas"]["WalletTransactionStatus"];
      /**
       * Format: date-time
       * @description Timestamp when the transaction was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      created_at: string;
    } & { [key: string]: unknown };
    /** @description TransactionsEnhanceGetRequest defines the request schema for `/transactions/enhance`. */
    TransactionsEnhanceGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The type of account for the requested transactions (`depository` or `credit`). */
      account_type: string;
      /** @description An array of raw transactions to be enhanced. */
      transactions: components["schemas"]["ClientProvidedRawTransaction"][];
    };
    /**
     * ClientProvidedRawTransaction
     * @description A client-provided transaction for Plaid to enhance.
     */
    ClientProvidedRawTransaction: {
      /** @description Unique transaction identifier to tie transactions back to clients' systems. */
      id: string;
      /** @description The raw description of the transaction. */
      description: string;
      /**
       * Format: double
       * @description The value of the transaction, denominated in the account's currency, as stated in `iso_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
       */
      amount: number;
      /** @description The ISO-4217 currency code of the transaction. */
      iso_currency_code: string;
    } & { [key: string]: unknown };
    /** @description TransactionsEnhanceGetResponse defines the response schema for `/transactions/enhance`. */
    TransactionsEnhanceGetResponse: {
      /** @description An array of enhanced transactions. */
      enhanced_transactions: components["schemas"]["ClientProvidedEnhancedTransaction"][];
    } & { [key: string]: unknown };
    /**
     * ClientProvidedEnhancedTransaction
     * @description A client-provided transaction that Plaid has enhanced.
     */
    ClientProvidedEnhancedTransaction: {
      /** @description Unique transaction identifier to tie transactions back to clients' systems. */
      id: string;
      /** @description The raw description of the transaction. */
      description: string;
      /**
       * Format: double
       * @description The value of the transaction, denominated in the account's currency, as stated in `iso_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
       */
      amount: number;
      /** @description The ISO-4217 currency code of the transaction. */
      iso_currency_code: string;
      enhancements: components["schemas"]["Enhancements"];
    } & { [key: string]: unknown };
    /**
     * Transaction Payment Channel
     * @description The channel used to make a payment.
     * `online:` transactions that took place online.
     *
     * `in store:` transactions that were made at a physical location.
     *
     * `other:` transactions that relate to banks, e.g. fees or deposits.
     * @enum {string}
     */
    PaymentChannel: "online" | "in store" | "other";
    /**
     * Enhancements
     * @description A grouping of the Plaid produced transaction enhancement fields.
     */
    Enhancements: {
      /** @description The merchant name, as extracted by Plaid from the raw description. */
      merchant_name?: string | null;
      /** @description The website associated with this transaction. */
      website?: string | null;
      /** @description A link to the logo associated with this transaction. The logo will always be 100x100 resolution. */
      logo_url?: string | null;
      /** @description The check number of the transaction. This field is only populated for check transactions. */
      check_number?: string | null;
      payment_channel: components["schemas"]["PaymentChannel"];
      /** @description The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget). */
      category_id: string | null;
      /** @description A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget). */
      category: string[];
      location: components["schemas"]["Location"];
      personal_finance_category?: components["schemas"]["PersonalFinanceCategory"];
      /** @description A link to the icon associated with the primary personal finance category. The logo will always be 100x100 resolution. */
      personal_finance_category_icon_url?: string;
    } & { [key: string]: unknown };
    /** @description PaymentProfileCreateRequest defines the request schema for `/payment_profile/create` */
    PaymentProfileCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description PaymentProfileCreateResponse defines the response schema for `/payment_profile/create` */
    PaymentProfileCreateResponse: {
      payment_profile_id: components["schemas"]["PaymentProfileID"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * PaymentProfileID
     * @description Plaid’s unique identifier for a payment profile.
     */
    PaymentProfileID: string;
    /** @description PaymentProfileGetRequest defines the request schema for `/payment_profile/get` */
    PaymentProfileGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      payment_profile_id: components["schemas"]["PaymentProfileID"];
    };
    /** @description PaymentProfileGetResponse defines the response schema for `/payment_profile/get` */
    PaymentProfileGetResponse: {
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time the given Payment Profile was updated at
       */
      updated_at: string;
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Payment Profile was created at
       */
      created_at: string;
      status: components["schemas"]["PaymentProfileStatus"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * @description The status of the given Payment Profile.
     *
     * `READY`: This Payment Profile is ready to be used to create transfers using `/transfer/authorization/create` and /transfer/create`.
     *
     * `PENDING`: This Payment Profile is not ready to be used. You’ll need to call `/link/token/create` and provide the Payment Profile ID in the `transfer.payment_profile_id` field and go through the account linking flow to activate it.
     *
     * `REMOVED`: This Payment Profile has been removed.
     * @enum {string}
     */
    PaymentProfileStatus: "PENDING" | "READY" | "REMOVED";
    /** @description PaymentProfileRemoveRequest defines the request schema for `/payment_profile/remove` */
    PaymentProfileRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      payment_profile_id: components["schemas"]["PaymentProfileID"];
    };
    /** @description PaymentProfileRemoveResponse defines the response schema for `/payment_profile/remove` */
    PaymentProfileRemoveResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Request schema for `/partner/v1/customers/create`. */
    PartnerCustomersCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The company name of the end customer being created. */
      company_name: string;
      /** @description Denotes whether or not the partner has completed attestation of diligence for the end customer to be created. */
      is_diligence_attested: boolean;
      /** @description The products to be enabled on for the end customer. */
      products: components["schemas"]["Products"][];
      /** @description If true, sets end customer's link customization to match partner's link customization. */
      create_link_customization?: boolean;
    };
    /** @description Response schema for `/partner/v1/customers/create`. */
    PartnerCustomersCreateResponse: {
      end_customer?: components["schemas"]["PartnerEndCustomerClient"];
      production_secret?: string;
      request_id?: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description The end customer details for the newly-created customer client. */
    PartnerEndCustomerClient: {
      client_id?: components["schemas"]["APIClientID"];
      company_name?: string;
    };
    /**
     * @description The status of the given Link Delivery Session.
     *
     * `CREATED`: The session is created but not yet accessed by the user
     *
     * `OPENED`: The session is opened by the user but not yet completed
     *
     * `COMPLETED`: The session has been completed by the user
     *
     * `EXPIRED`: The session has expired
     * @enum {string}
     */
    LinkDeliverySessionStatus: "CREATED" | "OPENED" | "COMPLETED" | "EXPIRED";
    /**
     * @description The delivery method to be used to deliver the Link Delivery URL.
     *
     * `SMS`: The URL will be delivered through SMS
     *
     * `EMAIL`: The URL will be delivered through email
     * @enum {string}
     */
    LinkDeliveryDeliveryMethod: "SMS" | "EMAIL";
    /** @description LinkDeliveryCreateRequest defines the request schema for `/link_delivery/create` */
    LinkDeliveryCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description A `link_token` from a previous invocation of `/link/token/create` with Link Delivery enabled */
      link_token: string;
      delivery_method: components["schemas"]["LinkDeliveryDeliveryMethod"];
      /** @description The email or phone number to be used to delivery the URL of the Link Delivery session */
      delivery_destination: string;
    };
    /** @description LinkDeliveryCreateResponse defines the response schema for `/link_delivery/create` */
    LinkDeliveryCreateResponse: {
      /** @description The URL to the Link Delivery session, which will be delivered by the specified delivery method. */
      link_delivery_url: string;
      /** @description The ID for the link delivery session. Same as the link token string excluding the "link-{env}-" prefix */
      link_delivery_session_id: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description LinkDeliveryGetRequest defines the request schema for `/link_delivery/get` */
    LinkDeliveryGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID for the link delivery session from a previous invocation of `/link_delivery/create` */
      link_delivery_session_id: string;
    };
    /** @description LinkDeliveryGetRequest defines the response schema for `/link_delivery/get` */
    LinkDeliveryGetResponse: {
      status: components["schemas"]["LinkDeliverySessionStatus"];
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Link Delivery Session was created at
       */
      created_at: string;
      /** @description The public tokens returned by the Link session upon completion */
      public_tokens?: string[];
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Link Delivery Session was completed at
       */
      completed_at?: string | null;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * CreditCategory
     * @description Information describing the intent of the transaction. Most relevant for credit use cases, but not limited to such use cases.
     */
    CreditCategory:
      | ({
          /** @description A high level category that communicates the broad category of the transaction. */
          primary: string;
          /** @description A granular category conveying the transaction's intent. This field can also be used as a unique identifier for the category. */
          detailed: string;
        } & { [key: string]: unknown })
      | null;
    /**
     * @description Field describing whether the associated address is being used for commercial or residential purposes.
     *
     * Note: This value will be `no_data` when Plaid does not have sufficient data to determine the address's use.
     * @example residential
     * @enum {string}
     */
    AddressPurposeLabel: "residential" | "commercial" | "no_data";
    /**
     * CityName
     * @description City from the end user's address
     * @example Pawnee
     */
    City: string;
    /**
     * ClientUserID
     * @description An identifier to help you connect this object to your internal systems. For example, your database ID corresponding to this object.
     * @example your-db-id-3b24110
     */
    ClientUserID: string;
    /** @description Request input for creating an entity screening review */
    CreateEntityScreeningRequest: {
      search_terms: components["schemas"]["EntityWatchlistSearchTerms"];
      client_user_id?: components["schemas"]["ClientUserID"] | null;
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description Request input for creating a review for an entity screening */
    CreateEntityWatchlistScreeningReviewRequest: {
      /** @description Hits to mark as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected. */
      confirmed_hits: components["schemas"]["EntityWatchlistScreeningHitID"][];
      /** @description Hits to mark as a false positive after thorough manual review. These hits will never recur or be updated once dismissed. */
      dismissed_hits: components["schemas"]["EntityWatchlistScreeningHitID"][];
      comment?: components["schemas"]["ReviewComment"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      entity_watchlist_screening_id: components["schemas"]["EntityWatchlistScreeningID"];
    };
    /** @description Request input for creating a screening review */
    CreateIndividualWatchlistScreeningReviewRequest: {
      /** @description Hits to mark as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected. */
      confirmed_hits: components["schemas"]["WatchlistScreeningHitID"][];
      /** @description Hits to mark as a false positive after thorough manual review. These hits will never recur or be updated once dismissed. */
      dismissed_hits: components["schemas"]["WatchlistScreeningHitID"][];
      comment?: components["schemas"]["ReviewComment"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualID"];
    };
    /**
     * @description An identifier that determines which page of results you receive.
     * @example eyJkaXJlY3Rpb24iOiJuZXh0Iiwib2Zmc2V0IjoiMTU5NDM
     */
    Cursor: string | null;
    /**
     * DashboardUser
     * @description Account information associated with a team member with access to the Plaid dashboard.
     */
    DashboardUser: {
      id: components["schemas"]["DashboardUserID"];
      created_at: components["schemas"]["Timestamp"];
      email_address: components["schemas"]["EmailAddress"];
      status: components["schemas"]["DashboardUserStatus"];
    };
    /**
     * DashboardUserID
     * @description ID of the associated user.
     * @example 54350110fedcbaf01234ffee
     */
    DashboardUserID: string;
    /** @description Account information associated with a team member with access to the Plaid dashboard. */
    DashboardUserResponse: {
      id: components["schemas"]["DashboardUserID"];
      created_at: components["schemas"]["Timestamp"];
      email_address: components["schemas"]["EmailAddress"];
      status: components["schemas"]["DashboardUserStatus"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * @description The current status of the user.
     * @example active
     * @enum {string}
     */
    DashboardUserStatus: "invited" | "active" | "deactivated";
    /**
     * Date
     * Format: date
     * @description A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @example 1990-05-29
     */
    Date: string;
    /**
     * DateRange
     * @description A date range with a start and end date
     * @example {
     *   "ending": "1966-06-30",
     *   "beginning": "1966-06-01"
     * }
     */
    DateRange: {
      beginning: components["schemas"]["Date"];
      ending: components["schemas"]["Date"];
    };
    /** @description High level descriptions of how the associated document was processed. If a document fails verification, the details in the `analysis` object should help clarify why the document was rejected. */
    DocumentAnalysis: {
      authenticity: components["schemas"]["DocumentAuthenticityMatchCode"];
      image_quality: components["schemas"]["ImageQuality"];
      extracted_data: components["schemas"]["PhysicalDocumentExtractedDataAnalysis"];
    };
    /**
     * @description High level summary of whether the document in the provided image matches the formatting rules and security checks for the associated jurisdiction.
     *
     * For example, most identity documents have formatting rules like the following:
     *
     *
     * The image of the person's face must have a certain contrast in order to highlight skin tone
     *
     *
     * The subject in the document's image must remove eye glasses and pose in a certain way
     *
     *
     * The informational fields (name, date of birth, ID number, etc.) must be colored and aligned according to specific rules
     *
     *
     * Security features like watermarks and background patterns must be present
     *
     * So a `match` status for this field indicates that the document in the provided image seems to conform to the various formatting and security rules associated with the detected document.
     * @example match
     * @enum {string}
     */
    DocumentAuthenticityMatchCode:
      | "match"
      | "partial_match"
      | "no_match"
      | "no_data";
    /**
     * @description A match summary describing the cross comparison between the subject's date of birth, extracted from the document image, and the date of birth they separately provided to the identity verification attempt.
     * @example match
     * @enum {string}
     */
    DocumentDateOfBirthMatchCode: "match" | "partial_match" | "no_match";
    /**
     * @description Temporary URL that expires after 60 seconds for downloading the original image of the back of the document. Might be null if the back of the document was not collected.
     * @example https://example.plaid.com/verifications/idv_52xR9LKo77r1Np/documents/1/original_back.jpeg
     */
    DocumentImage__Back: string | null;
    /**
     * @description Temporary URL that expires after 60 seconds for downloading a cropped image containing just the back of the document. Might be null if the back of the document was not collected.
     * @example https://example.plaid.com/verifications/idv_52xR9LKo77r1Np/documents/1/cropped_back.jpeg
     */
    DocumentImage__CroppedBack: string | null;
    /**
     * @description Temporary URL that expires after 60 seconds for downloading a cropped image containing just the front of the document.
     * @example https://example.plaid.com/verifications/idv_52xR9LKo77r1Np/documents/1/cropped_front.jpeg
     */
    DocumentImage__CroppedFront: string | null;
    /**
     * @description Temporary URL that expires after 60 seconds for downloading a crop of just the user's face from the document image. Might be null if the document does not contain a face photo.
     * @example https://example.plaid.com/verifications/idv_52xR9LKo77r1Np/documents/1/face.jpeg
     */
    DocumentImage__Face: string | null;
    /**
     * @description Temporary URL that expires after 60 seconds for downloading the uncropped original image of the front of the document.
     * @example https://example.plaid.com/verifications/idv_52xR9LKo77r1Np/documents/1/original_front.jpeg
     */
    DocumentImage__Front: string;
    /**
     * @description A match summary describing the cross comparison between the subject's name, extracted from the document image, and the name they separately provided to identity verification attempt.
     * @example match
     * @enum {string}
     */
    DocumentNameMatchCode: "match" | "partial_match" | "no_match";
    /**
     * DocumentStatus
     * @description An outcome status for this specific document submission. Distinct from the overall `documentary_verification.status` that summarizes the verification outcome from one or more documents.
     * @example success
     * @enum {string}
     */
    DocumentStatus: "success" | "failed" | "manually_approved";
    /**
     * DocumentaryVerification
     * @description data, images, analysis, and results from the `documentary_verification` step.
     */
    DocumentaryVerification: {
      /**
       * @description The outcome status for the associated Identity Verification attempt's `documentary_verification` step. This field will always have the same value as `steps.documentary_verification`.
       * @example success
       */
      status: string;
      /**
       * @description An array of documents submitted to the `documentary_verification` step. Each entry represents one user submission, where each submission will contain both a front and back image, or just a front image, depending on the document type.
       *
       * Note: Plaid will automatically let a user submit a new set of document images up to three times if we detect that a previous attempt might have failed due to user error. For example, if the first set of document images are blurry or obscured by glare, the user will be asked to capture their documents again, resulting in at least two separate entries within `documents`. If the overall `documentary_verification` is `failed`, the user has exhausted their retry attempts.
       */
      documents: components["schemas"]["DocumentaryVerificationDocument"][];
    } | null;
    /** @description Images, extracted data, and analysis from a user's identity document */
    DocumentaryVerificationDocument: {
      status: components["schemas"]["DocumentStatus"];
      /**
       * @description The `attempt` field begins with 1 and increments with each subsequent document upload.
       * @example 1
       */
      attempt: number;
      images: components["schemas"]["PhysicalDocumentImages"];
      extracted_data: components["schemas"]["PhysicalDocumentExtractedData"];
      analysis: components["schemas"]["DocumentAnalysis"];
    };
    /**
     * EmailAddress
     * Format: email
     * @description A valid email address.
     * @example user@example.com
     */
    EmailAddress: string;
    /**
     * EntityDocument
     * @description An official document, usually issued by a governing body or institution, with an associated identifier.
     */
    EntityDocument: {
      type: components["schemas"]["EntityDocumentType"];
      number: components["schemas"]["WatchlistScreeningDocumentValue"];
    };
    /**
     * EntityDocumentType
     * @description The kind of official document represented by this object.
     *
     * `bik` - Russian bank code
     *
     * `business_number` - A number that uniquely identifies the business within a category of businesses
     *
     * `imo` - Number assigned to the entity by the International Maritime Organization
     *
     * `other` - Any document not covered by other categories
     *
     * `swift` - Number identifying a bank and branch.
     *
     * `tax_id` - Identification issued for the purpose of collecting taxes
     * @example swift
     * @enum {string}
     */
    EntityDocumentType:
      | "bik"
      | "business_number"
      | "imo"
      | "other"
      | "swift"
      | "tax_id";
    /** @description Analysis information describing why a screening hit matched the provided entity information */
    EntityScreeningHitAnalysis: {
      documents?: components["schemas"]["MatchSummaryCode"];
      email_addresses?: components["schemas"]["MatchSummaryCode"];
      locations?: components["schemas"]["MatchSummaryCode"];
      names?: components["schemas"]["MatchSummaryCode"];
      phone_numbers?: components["schemas"]["MatchSummaryCode"];
      urls?: components["schemas"]["MatchSummaryCode"];
      /**
       * @description The version of the entity screening's `search_terms` that were compared when the entity screening hit was added. entity screening hits are immutable once they have been reviewed. If changes are detected due to updates to the entity screening's `search_terms`, the associated entity program, or the list's source data prior to review, the entity screening hit will be updated to reflect those changes.
       * @example 1
       */
      search_terms_version: number;
    };
    /** @description Information associated with the entity watchlist hit */
    EntityScreeningHitData: {
      /** @description Documents associated with the watchlist hit */
      documents?: components["schemas"]["EntityScreeningHitDocumentsItems"][];
      /** @description Email addresses associated with the watchlist hit */
      email_addresses?: components["schemas"]["EntityScreeningHitEmailsItems"][];
      /** @description Locations associated with the watchlist hit */
      locations?: components["schemas"]["GenericScreeningHitLocationItems"][];
      /** @description Names associated with the watchlist hit */
      names?: components["schemas"]["EntityScreeningHitNamesItems"][];
      /** @description Phone numbers associated with the watchlist hit */
      phone_numbers?: components["schemas"]["EntityScreeningHitsPhoneNumberItems"][];
      /** @description URLs associated with the watchlist hit */
      urls?: components["schemas"]["EntityScreeningHitUrlsItems"][];
    };
    /** @description Analyzed documents for the associated hit */
    EntityScreeningHitDocumentsItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["EntityDocument"];
    };
    /** @description Email address information for the associated entity watchlist hit */
    EntityScreeningHitEmails: {
      email_address: components["schemas"]["EmailAddress"];
    };
    /** @description Analyzed emails for the associated hit */
    EntityScreeningHitEmailsItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["EntityScreeningHitEmails"];
    };
    /** @description Name information for the associated entity watchlist hit */
    EntityScreeningHitNames: {
      /**
       * @description The full name of the entity.
       * @example Al Qaida
       */
      full: string;
      /**
       * @description Primary names are those most commonly used to refer to this entity. Only one name will ever be marked as primary.
       * @example false
       */
      is_primary: boolean;
      weak_alias_determination: components["schemas"]["WeakAliasDetermination"];
    };
    /** @description Analyzed names for the associated hit */
    EntityScreeningHitNamesItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["EntityScreeningHitNames"];
    };
    /** @description Phone number information associated with the entity screening hit */
    EntityScreeningHitPhoneNumbers: {
      type: components["schemas"]["PhoneType"];
      phone_number: components["schemas"]["WatchlistScreeningPhoneNumber"];
    };
    /** @description URLs associated with the entity screening hit */
    EntityScreeningHitUrls: {
      url: components["schemas"]["URL"];
    };
    /** @description Analyzed URLs for the associated hit */
    EntityScreeningHitUrlsItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["EntityScreeningHitUrls"];
    };
    /** @description Analyzed phone numbers for the associated hit */
    EntityScreeningHitsPhoneNumberItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["EntityScreeningHitPhoneNumbers"];
    };
    /**
     * EntityWatchlistCode
     * @description Shorthand identifier for a specific screening list for entities.
     * @example EU_CON
     * @enum {string}
     */
    EntityWatchlistCode:
      | "CA_CON"
      | "EU_CON"
      | "IZ_SOE"
      | "IZ_UNC"
      | "US_CAP"
      | "US_FSE"
      | "US_MBS"
      | "US_SDN"
      | "US_SSI"
      | "US_CMC"
      | "US_UVL"
      | "AU_CON"
      | "UK_HMC";
    /**
     * EntityWatchlistProgram
     * @description A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of entities.
     */
    EntityWatchlistProgram: {
      id: components["schemas"]["EntityWatchlistProgramID"];
      created_at: components["schemas"]["Timestamp"];
      /**
       * @description Indicator specifying whether the program is enabled and will perform daily rescans.
       * @example true
       */
      is_rescanning_enabled: boolean;
      /**
       * @description Watchlists enabled for the associated program
       * @example [
       *   "EU_CON"
       * ]
       */
      lists_enabled: components["schemas"]["EntityWatchlistCode"][];
      name: components["schemas"]["EntityWatchlistScreeningProgramName"];
      name_sensitivity: components["schemas"]["ProgramNameSensitivity"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      is_archived: components["schemas"]["ProgramArchived"];
    };
    /**
     * EntityWatchlistProgramID
     * @description ID of the associated entity program.
     * @example entprg_2eRPsDnL66rZ7H
     */
    EntityWatchlistProgramID: string;
    /** @description A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of entities. */
    EntityWatchlistProgramResponse: {
      id: components["schemas"]["EntityWatchlistProgramID"];
      created_at: components["schemas"]["Timestamp"];
      /**
       * @description Indicator specifying whether the program is enabled and will perform daily rescans.
       * @example true
       */
      is_rescanning_enabled: boolean;
      /**
       * @description Watchlists enabled for the associated program
       * @example [
       *   "EU_CON"
       * ]
       */
      lists_enabled: components["schemas"]["EntityWatchlistCode"][];
      name: components["schemas"]["EntityWatchlistScreeningProgramName"];
      name_sensitivity: components["schemas"]["ProgramNameSensitivity"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      is_archived: components["schemas"]["ProgramArchived"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * EntityWatchlistScreening
     * @description The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration.
     */
    EntityWatchlistScreening: {
      id: components["schemas"]["EntityWatchlistScreeningID"];
      search_terms: components["schemas"]["EntityWatchlistScreeningSearchTerms"];
      assignee: components["schemas"]["DashboardUserID"] | null;
      status: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id: components["schemas"]["ClientUserID"] | null;
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
    };
    /**
     * EntityWatchlistScreeningHit
     * @description Data from a government watchlist that has been attached to the screening.
     */
    EntityWatchlistScreeningHit: {
      id: components["schemas"]["EntityWatchlistScreeningHitID"];
      review_status: components["schemas"]["WatchlistScreeningHitStatus"];
      first_active: components["schemas"]["Timestamp"];
      inactive_since: components["schemas"]["TimestampNullable"];
      historical_since: components["schemas"]["TimestampNullable"];
      list_code: components["schemas"]["EntityWatchlistCode"];
      plaid_uid: components["schemas"]["InternalUID"];
      source_uid: components["schemas"]["SourceUID"];
      analysis?: components["schemas"]["EntityScreeningHitAnalysis"];
      data?: components["schemas"]["EntityScreeningHitData"];
    };
    /**
     * EntityWatchlistScreeningHitID
     * @description ID of the associated entity screening hit.
     * @example enthit_52xR9LKo77r1Np
     */
    EntityWatchlistScreeningHitID: string;
    /**
     * EntityWatchlistScreeningID
     * @description ID of the associated entity screening.
     * @example entscr_52xR9LKo77r1Np
     */
    EntityWatchlistScreeningID: string;
    /**
     * EntityWatchlistScreeningName
     * @description The name of the organization being screened.
     * @example Al-Qaida
     */
    EntityWatchlistScreeningName: string;
    /**
     * EntityWatchlistScreeningProgramName
     * @description A name for the entity program to define its purpose. For example, "High Risk Organizations" or "Applicants".
     * @example Sample Program
     */
    EntityWatchlistScreeningProgramName: string;
    /** @description The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration. */
    EntityWatchlistScreeningResponse: {
      id: components["schemas"]["EntityWatchlistScreeningID"];
      search_terms: components["schemas"]["EntityWatchlistScreeningSearchTerms"];
      assignee: components["schemas"]["DashboardUserID"] | null;
      status: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id: components["schemas"]["ClientUserID"] | null;
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * EntityWatchlistScreeningReview
     * @description A review submitted by a team member for an entity watchlist screening. A review can be either a comment on the current screening state, actions taken
     * against hits attached to the watchlist screening, or both.
     */
    EntityWatchlistScreeningReview: {
      id: components["schemas"]["EntityWatchlistScreeningReviewID"];
      /** @description Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected. */
      confirmed_hits: components["schemas"]["EntityWatchlistScreeningHitID"][];
      /** @description Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed. */
      dismissed_hits: components["schemas"]["EntityWatchlistScreeningHitID"][];
      comment: components["schemas"]["ReviewComment"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
    };
    /**
     * EntityWatchlistScreeningReviewID
     * @description ID of the associated entity review.
     * @example entrev_aCLNRxK3UVzn2r
     */
    EntityWatchlistScreeningReviewID: string;
    /**
     * @description A review submitted by a team member for an entity watchlist screening. A review can be either a comment on the current screening state, actions taken
     * against hits attached to the watchlist screening, or both.
     */
    EntityWatchlistScreeningReviewResponse: {
      id: components["schemas"]["EntityWatchlistScreeningReviewID"];
      /** @description Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected. */
      confirmed_hits: components["schemas"]["EntityWatchlistScreeningHitID"][];
      /** @description Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed. */
      dismissed_hits: components["schemas"]["EntityWatchlistScreeningHitID"][];
      comment: components["schemas"]["ReviewComment"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Search terms associated with an entity used for searching against watchlists */
    EntityWatchlistScreeningSearchTerms: {
      entity_watchlist_program_id: components["schemas"]["EntityWatchlistProgramID"];
      legal_name: components["schemas"]["EntityWatchlistScreeningName"];
      document_number:
        | components["schemas"]["WatchlistScreeningDocumentValue"]
        | null;
      email_address: components["schemas"]["EmailAddress"] | null;
      country: components["schemas"]["GenericCountryCode"] | null;
      phone_number:
        | components["schemas"]["WatchlistScreeningPhoneNumber"]
        | null;
      url: components["schemas"]["URL"] | null;
      /**
       * @description The current version of the search terms. Starts at `1` and increments with each edit to `search_terms`.
       * @example 1
       */
      version: number;
    };
    /** @description Search inputs for creating an entity watchlist screening */
    EntityWatchlistSearchTerms: {
      entity_watchlist_program_id: components["schemas"]["EntityWatchlistProgramID"];
      legal_name: components["schemas"]["EntityWatchlistScreeningName"];
      document_number?:
        | components["schemas"]["WatchlistScreeningDocumentValue"]
        | null;
      email_address?: components["schemas"]["EmailAddress"] | null;
      country?: components["schemas"]["GenericCountryCode"] | null;
      phone_number?:
        | components["schemas"]["WatchlistScreeningPhoneNumber"]
        | null;
      url?: components["schemas"]["URL"] | null;
    };
    /**
     * @description A description of whether the associated document was expired when the verification was performed.
     *
     * Note: In the case where an expiration date is not present on the document or failed to be extracted, this value will be `no_data`.
     * @example not_expired
     * @enum {string}
     */
    ExpirationDate: "not_expired" | "expired" | "no_data";
    /**
     * FamilyName
     * @description A string with at least one non-whitespace character, with a max length of 100 characters.
     * @example Knope
     */
    FamilyNameField: string;
    /**
     * GenericCountryCode
     * @description Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @example US
     */
    GenericCountryCode: string;
    /** @description Analyzed location information for the associated hit */
    GenericScreeningHitLocationItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["WatchlistScreeningHitLocations"];
    };
    /** @description Request input for fetching a dashboard user */
    GetDashboardUserRequest: {
      dashboard_user_id: components["schemas"]["DashboardUserID"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
    };
    /** @description Request input for fetching an entity watchlist screening */
    GetEntityWatchlistScreeningRequest: {
      entity_watchlist_screening_id: components["schemas"]["EntityWatchlistScreeningID"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
    };
    /** @description Request input for fetching an identity verification */
    GetIdentityVerificationRequest: {
      identity_verification_id: components["schemas"]["IdentityVerificationID"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
    };
    /** @description Request input for fetching an individual watchlist screening */
    GetIndividualWatchlistScreeningRequest: {
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualID"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
    };
    /** @description Request input for fetching an entity watchlist program */
    GetWatchlistScreeningEntityProgramRequest: {
      entity_watchlist_program_id: components["schemas"]["EntityWatchlistProgramID"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
    };
    /** @description Request input for fetching an individual watchlist program */
    GetWatchlistScreeningIndividualProgramRequest: {
      watchlist_program_id: components["schemas"]["WatchlistProgramID"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
    };
    /**
     * GivenName
     * @description A string with at least one non-whitespace character, with a max length of 100 characters.
     * @example Leslie
     */
    GivenNameField: string;
    /**
     * IDNumberType
     * @description A globally unique and human readable ID type, specific to the country and document category. For more context on this field, see [Hybrid Input Validation](https://cognitohq.com/docs/flow/flow-hybrid-input-validation)
     * @example us_ssn
     * @enum {string}
     */
    IDNumberType:
      | "ar_dni"
      | "au_drivers_license"
      | "au_passport"
      | "br_cpf"
      | "ca_sin"
      | "cl_run"
      | "cn_resident_card"
      | "co_nit"
      | "dk_cpr"
      | "eg_national_id"
      | "es_dni"
      | "es_nie"
      | "hk_hkid"
      | "in_pan"
      | "it_cf"
      | "jo_civil_id"
      | "jp_my_number"
      | "ke_huduma_namba"
      | "kw_civil_id"
      | "mx_curp"
      | "mx_rfc"
      | "my_nric"
      | "ng_nin"
      | "nz_drivers_license"
      | "om_civil_id"
      | "ph_psn"
      | "pl_pesel"
      | "ro_cnp"
      | "sa_national_id"
      | "se_pin"
      | "sg_nric"
      | "tr_tc_kimlik"
      | "us_ssn"
      | "us_ssn_last_4"
      | "za_smart_id";
    /**
     * IDNumberValue
     * @description Value of identity document value typed in by user. Alpha-numeric, with all formatting characters stripped.
     * @example 123456789
     */
    IDNumberValue: string;
    /**
     * IPAddress
     * @description An IPv4 or IPV6 address.
     * @example 192.0.2.42
     */
    IPAddress: string | null;
    /**
     * Date
     * Format: date
     * @description A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @example 1990-05-29
     */
    ISO8601Date: string | null;
    /**
     * IdempotencyFlag
     * @description An optional flag specifying how you would like Plaid to handle attempts to create an Identity Verification when an Identity Verification already exists for the provided `client_user_id` and `template_id`.
     * If idempotency is enabled, Plaid will return the existing Identity Verification. If idempotency is disabled, Plaid will reject the request with a `400 Bad Request` status code if an Identity Verification already exists for the supplied `client_user_id` and `template_id`.
     * @example true
     */
    IdempotencyFlag: boolean | null;
    /** @description A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
    IdentityVerification: {
      id: components["schemas"]["IdentityVerificationID"];
      client_user_id: components["schemas"]["ClientUserID"];
      created_at: components["schemas"]["Timestamp"];
      completed_at: components["schemas"]["TimestampNullable"];
      previous_attempt_id: components["schemas"]["PreviousIdentityVerificationAttemptID"];
      shareable_url: components["schemas"]["ShareableURL"];
      template: components["schemas"]["IdentityVerificationTemplateReference"];
      user: components["schemas"]["IdentityVerificationUserData"];
      status: components["schemas"]["IdentityVerificationStatus"];
      steps: components["schemas"]["IdentityVerificationStepSummary"];
      documentary_verification: components["schemas"]["DocumentaryVerification"];
      kyc_check: components["schemas"]["KYCCheckDetails"];
      watchlist_screening_id:
        | components["schemas"]["WatchlistScreeningIndividualID"]
        | null;
    };
    /**
     * IdentityVerificationConsent
     * @description A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.
     *
     * If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement.
     * @default false
     * @example true
     */
    IdentityVerificationConsent: boolean;
    /** @description Request schema for '/identity_verification/create' */
    IdentityVerificationCreateRequest: {
      /**
       * EnableSharableLink
       * @description A flag specifying whether you would like Plaid to expose a shareable URL for the verification being created.
       * @example true
       */
      is_shareable: boolean;
      template_id: components["schemas"]["IdentityVerificationTemplateID"];
      gave_consent: components["schemas"]["IdentityVerificationConsent"];
      user: components["schemas"]["IdentityVerificationRequestUser"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      is_idempotent?: components["schemas"]["IdempotencyFlag"];
    };
    /**
     * IdentityVerificationID
     * @description ID of the associated Identity Verification attempt.
     * @example idv_52xR9LKo77r1Np
     */
    IdentityVerificationID: string;
    /**
     * @description User information collected outside of Link, most likely via your own onboarding process.
     *
     * Each of the following identity fields are optional:
     *
     * `email_address`
     *
     * `phone_number`
     *
     * `date_of_birth`
     *
     * `name`
     *
     * `address`
     *
     * `id_number`
     * Specifically, these fields are optional in that they can either be fully provided (satisfying every required field in their subschema)
     * or omitted from the request entirely by not providing the key or value.
     * Providing these fields via the API will result in Link skipping the data collection process for the associated user. All verification steps enabled in the associated Identity Verification Template will still be run. Verification steps will either be run immediately, or once the user completes the `accept_tos` step, depending on the value provided to the `gave_consent` field.
     */
    IdentityVerificationRequestUser: {
      client_user_id: components["schemas"]["ClientUserID"];
      email_address?: components["schemas"]["EmailAddress"] | null;
      phone_number?: components["schemas"]["IdentityVerificationUserPhoneNumber"];
      date_of_birth?: components["schemas"]["ISO8601Date"];
      name?: components["schemas"]["UserName"];
      address?: components["schemas"]["UserAddress"];
      id_number?: components["schemas"]["UserIDNumber"];
    };
    /** @description A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
    IdentityVerificationResponse: {
      id: components["schemas"]["IdentityVerificationID"];
      client_user_id: components["schemas"]["ClientUserID"];
      created_at: components["schemas"]["Timestamp"];
      completed_at: components["schemas"]["TimestampNullable"];
      previous_attempt_id: components["schemas"]["PreviousIdentityVerificationAttemptID"];
      shareable_url: components["schemas"]["ShareableURL"];
      template: components["schemas"]["IdentityVerificationTemplateReference"];
      user: components["schemas"]["IdentityVerificationUserData"];
      status: components["schemas"]["IdentityVerificationStatus"];
      steps: components["schemas"]["IdentityVerificationStepSummary"];
      documentary_verification: components["schemas"]["DocumentaryVerification"];
      kyc_check: components["schemas"]["KYCCheckDetails"];
      watchlist_screening_id:
        | components["schemas"]["WatchlistScreeningIndividualID"]
        | null;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Request input for retrying an identity verification attempt */
    IdentityVerificationRetryRequest: {
      client_user_id: components["schemas"]["ClientUserID"];
      template_id: components["schemas"]["IdentityVerificationTemplateID"];
      strategy: components["schemas"]["Strategy"];
      steps?: components["schemas"]["IdentityVerificationRetryRequestStepsObject"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /**
     * @description Instructions for the `custom` retry strategy specifying which steps should be required or skipped.
     *
     *
     * Note:
     *
     *
     * This field must be provided when the retry strategy is `custom` and must be omitted otherwise.
     *
     * Custom retries override settings in your Plaid Template. For example, if your Plaid Template has `verify_sms` disabled, a custom retry with `verify_sms` enabled will still require the step.
     *
     * The `selfie_check` step is currently not supported on the sandbox server. Sandbox requests will silently disable the `selfie_check` step when provided.
     */
    IdentityVerificationRetryRequestStepsObject: {
      /** @description A boolean field specifying whether the new session should require or skip the `verify_sms` step. */
      verify_sms: boolean;
      /** @description A boolean field specifying whether the new session should require or skip the `kyc_check` step. */
      kyc_check: boolean;
      /** @description A boolean field specifying whether the new session should require or skip the `documentary_verification` step. */
      documentary_verification: boolean;
      /** @description A boolean field specifying whether the new session should require or skip the `selfie_check` step. */
      selfie_check: boolean;
    } | null;
    /**
     * IdentityVerificationStatus
     * @description The status of this Identity Verification attempt.
     *
     *
     * `active` - The Identity Verification attempt is incomplete. The user may have completed part of the session, but has neither failed or passed.
     *
     * `success` - The Identity Verification attempt has completed, passing all steps defined to the associated Identity Verification template
     *
     * `failed` - The user failed one or more steps in the session and was told to contact support.
     *
     * `expired` - The Identity Verification attempt was active for more than 48 hours without being completed and was automatically marked as expired.
     *
     * `canceled` - The Identity Verification attempt was canceled, either via the dashboard by a user, or via API. The user may have completed part of the session, but has neither failed or passed.
     *
     * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
     * @example success
     * @enum {string}
     */
    IdentityVerificationStatus:
      | "active"
      | "success"
      | "failed"
      | "expired"
      | "canceled"
      | "pending_review";
    /**
     * IdentityVerificationStepStatus
     * @description The status of a step in the identity verification process.
     * @example success
     * @enum {string}
     */
    IdentityVerificationStepStatus:
      | "success"
      | "active"
      | "failed"
      | "waiting_for_prerequisite"
      | "not_applicable"
      | "skipped"
      | "expired"
      | "canceled"
      | "pending_review"
      | "manually_approved"
      | "manually_rejected";
    /**
     * @description Each step will be one of the following values:
     *
     *
     * `active` - This step is the user's current step. They are either in the process of completing this step, or they recently closed their Identity Verification attempt while in the middle of this step. Only one step will be marked as `active` at any given point.
     *
     * `success` - The Identity Verification attempt has completed this step.
     *
     * `failed` - The user failed this step. This can either call the user to fail the session as a whole, or cause them to fallback to another step depending on how the Identity Verification template is configured. A failed step does not imply a failed session.
     *
     * `waiting_for_prerequisite` - The user needs to complete another step first, before they progress to this step. This step may never run, depending on if the user fails an earlier step or if the step is only run as a fallback.
     *
     * `not_applicable` - This step will not be run for this session.
     *
     * `skipped` - The retry instructions that created this Identity Verification attempt specified that this step should be skipped.
     *
     * `expired` - This step had not yet been completed when the Identity Verification attempt as a whole expired.
     *
     * `canceled` - The Identity Verification attempt was canceled before the user completed this step.
     *
     * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
     *
     * `manually_approved` - The step was manually overridden to pass by a team member in the dashboard.
     *
     * `manually_rejected` - The step was manually overridden to fail by a team member in the dashboard.
     */
    IdentityVerificationStepSummary: {
      accept_tos: components["schemas"]["IdentityVerificationStepStatus"];
      verify_sms: components["schemas"]["IdentityVerificationStepStatus"];
      kyc_check: components["schemas"]["IdentityVerificationStepStatus"];
      documentary_verification: components["schemas"]["IdentityVerificationStepStatus"];
      selfie_check: components["schemas"]["IdentityVerificationStepStatus"];
      watchlist_screening: components["schemas"]["IdentityVerificationStepStatus"];
      risk_check: components["schemas"]["IdentityVerificationStepStatus"];
    };
    /**
     * IdentityVerificationTemplateID
     * @description ID of the associated Identity Verification template.
     * @example idvtmp_4FrXJvfQU3zGUR
     */
    IdentityVerificationTemplateID: string;
    /** @description The resource ID and version number of the template configuring the behavior of a given identity verification. */
    IdentityVerificationTemplateReference: {
      id: components["schemas"]["IdentityVerificationTemplateID"];
      version: components["schemas"]["IdentityVerificationTemplateVersion"];
    };
    /**
     * IdentityVerificationTemplateVersion
     * @description Version of the associated Identity Verification template.
     * @example 2
     */
    IdentityVerificationTemplateVersion: number;
    /** @description Even if an address has been collected, some fields may be null depending on the region's addressing system. For example: * Addresses from the United Kingdom will not include a region * Addresses from Hong Kong will not include postal code */
    IdentityVerificationUserAddress: {
      street: components["schemas"]["Street"] | null;
      street2: components["schemas"]["Street2"];
      city: components["schemas"]["City"] | null;
      region: components["schemas"]["Region"] | null;
      postal_code: components["schemas"]["PostalCode"] | null;
      country: components["schemas"]["GenericCountryCode"];
    } | null;
    /** @description The identity data that was either collected from the user or provided via API in order to perform an identity verification. */
    IdentityVerificationUserData: {
      phone_number: components["schemas"]["IdentityVerificationUserPhoneNumber"];
      date_of_birth: components["schemas"]["ISO8601Date"];
      ip_address: components["schemas"]["IPAddress"];
      email_address: components["schemas"]["EmailAddress"] | null;
      name: components["schemas"]["UserName"];
      address: components["schemas"]["IdentityVerificationUserAddress"];
      id_number: components["schemas"]["UserIDNumber"];
    };
    /**
     * PhoneNumber
     * @description A phone number in E.164 format.
     * @example +19876543212
     */
    IdentityVerificationUserPhoneNumber: string | null;
    /**
     * @description A high level description of the quality of the image the user submitted.
     *
     * For example, an image that is blurry, distorted by glare from a nearby light source, or improperly framed might be marked as low or medium quality. Poor quality images are more likely to fail OCR and/or template conformity checks.
     *
     * Note: By default, Plaid will let a user recapture document images twice before failing the entire session if we attribute the failure to low image quality.
     * @example high
     * @enum {string}
     */
    ImageQuality: "high" | "medium" | "low";
    /** @description Name information for the associated individual watchlist hit */
    IndividualScreeningHitNames: {
      /**
       * @description The full name of the individual, including all parts.
       * @example Aleksey Potemkin
       */
      full: string;
      /**
       * @description Primary names are those most commonly used to refer to this person. Only one name will ever be marked as primary.
       * @example false
       */
      is_primary: boolean;
      weak_alias_determination: components["schemas"]["WeakAliasDetermination"];
    };
    /**
     * IndividualWatchlistCode
     * @description Shorthand identifier for a specific screening list for individuals.
     * @example US_SDN
     * @enum {string}
     */
    IndividualWatchlistCode:
      | "AU_CON"
      | "CA_CON"
      | "EU_CON"
      | "IZ_CIA"
      | "IZ_IPL"
      | "IZ_PEP"
      | "IZ_UNC"
      | "UK_HMC"
      | "US_DPL"
      | "US_DTC"
      | "US_FBI"
      | "US_FSE"
      | "US_ISN"
      | "US_MBC"
      | "US_PLC"
      | "US_SDN"
      | "US_SSI"
      | "SG_SOF"
      | "TR_TWL"
      | "TR_DFD"
      | "TR_FOR"
      | "TR_WMD";
    /**
     * IndividualWatchlistProgram
     * @description A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of individuals.
     */
    IndividualWatchlistProgram: {
      id: components["schemas"]["WatchlistProgramID"];
      created_at: components["schemas"]["Timestamp"];
      /**
       * @description Indicator specifying whether the program is enabled and will perform daily rescans.
       * @example true
       */
      is_rescanning_enabled: boolean;
      /**
       * @description Watchlists enabled for the associated program
       * @example [
       *   "US_SDN"
       * ]
       */
      lists_enabled: components["schemas"]["IndividualWatchlistCode"][];
      name: components["schemas"]["IndividualWatchlistScreeningProgramName"];
      name_sensitivity: components["schemas"]["ProgramNameSensitivity"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      is_archived: components["schemas"]["ProgramArchived"];
    };
    /** @description A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of individuals. */
    IndividualWatchlistProgramResponse: {
      id: components["schemas"]["WatchlistProgramID"];
      created_at: components["schemas"]["Timestamp"];
      /**
       * @description Indicator specifying whether the program is enabled and will perform daily rescans.
       * @example true
       */
      is_rescanning_enabled: boolean;
      /**
       * @description Watchlists enabled for the associated program
       * @example [
       *   "US_SDN"
       * ]
       */
      lists_enabled: components["schemas"]["IndividualWatchlistCode"][];
      name: components["schemas"]["IndividualWatchlistScreeningProgramName"];
      name_sensitivity: components["schemas"]["ProgramNameSensitivity"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      is_archived: components["schemas"]["ProgramArchived"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * IndividualWatchlistScreeningProgramName
     * @description A name for the program to define its purpose. For example, "High Risk Individuals", "US Cardholders", or "Applicants".
     * @example Sample Program
     */
    IndividualWatchlistScreeningProgramName: string;
    /**
     * InternalUID
     * @description A universal identifier for a watchlist individual that is stable across searches and updates.
     * @example uid_3NggckTimGSJHS
     */
    InternalUID: string;
    /**
     * @description A binary match indicator specifying whether the country that issued the provided document matches the country that the user separately provided to Plaid.
     *
     * Note: You can configure whether a `no_match` on `issuing_country` fails the `documentary_verification` by editing your Plaid Template.
     * @enum {string}
     */
    IssuingCountry: "match" | "no_match";
    /** @description Result summary object specifying how the `address` field matched. */
    KYCCheckAddressSummary: {
      summary: components["schemas"]["MatchSummaryCode"];
      po_box: components["schemas"]["POBoxStatus"];
      type: components["schemas"]["AddressPurposeLabel"];
    };
    /** @description Result summary object specifying how the `date_of_birth` field matched. */
    KYCCheckDateOfBirthSummary: {
      summary: components["schemas"]["MatchSummaryCode"];
    };
    /** @description The outcome of the `kyc_check` step. */
    KYCCheckDetails: {
      /**
       * @description The outcome status for the associated Identity Verification attempt's `kyc_check` step. This field will always have the same value as `steps.kyc_check`.
       * @example success
       */
      status: string;
      address: components["schemas"]["KYCCheckAddressSummary"];
      name: components["schemas"]["KYCCheckNameSummary"];
      date_of_birth: components["schemas"]["KYCCheckDateOfBirthSummary"];
      id_number: components["schemas"]["KYCCheckIDNumberSummary"];
      phone_number: components["schemas"]["KYCCheckPhoneSummary"];
    } | null;
    /** @description Result summary object specifying how the `id_number` field matched. */
    KYCCheckIDNumberSummary: {
      summary: components["schemas"]["MatchSummaryCode"];
    };
    /** @description Result summary object specifying how the `name` field matched. */
    KYCCheckNameSummary: {
      summary: components["schemas"]["MatchSummaryCode"];
    };
    /** @description Result summary object specifying how the `phone` field matched. */
    KYCCheckPhoneSummary: {
      summary: components["schemas"]["MatchSummaryCode"];
    };
    /** @description Request input for listing dashboard users */
    ListDashboardUserRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Request input for listing entity watchlist screenings */
    ListEntityWatchlistScreeningRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      entity_watchlist_program_id: components["schemas"]["EntityWatchlistProgramID"];
      client_user_id?: components["schemas"]["ClientUserID"] | null;
      status?: components["schemas"]["WatchlistScreeningStatus"] | null;
      assignee?: components["schemas"]["DashboardUserID"] | null;
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Request input for listing identity verifications */
    ListIdentityVerificationRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      template_id: components["schemas"]["IdentityVerificationTemplateID"];
      client_user_id: components["schemas"]["ClientUserID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Request input for listinging watchlist screenings for individuals */
    ListIndividualWatchlistScreeningRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      watchlist_program_id: components["schemas"]["WatchlistProgramID"];
      client_user_id?: components["schemas"]["ClientUserID"] | null;
      status?: components["schemas"]["WatchlistScreeningStatus"] | null;
      assignee?: components["schemas"]["DashboardUserID"] | null;
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Request input for listing changes to entity watchlist screenings */
    ListWatchlistScreeningEntityHistoryRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      entity_watchlist_screening_id: components["schemas"]["EntityWatchlistScreeningID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Request input for listing hits for an entity watchlist screening */
    ListWatchlistScreeningEntityHitRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      entity_watchlist_screening_id: components["schemas"]["EntityWatchlistScreeningID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Request input for listing entity watchlist screening programs */
    ListWatchlistScreeningEntityProgramsRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Request input for listing reviews for an entity watchlist screening */
    ListWatchlistScreeningEntityReviewsRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      entity_watchlist_screening_id: components["schemas"]["EntityWatchlistScreeningID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Request input for listing changes to watchlist screenings for individuals */
    ListWatchlistScreeningIndividualHistoryRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Request input for listing hits for an individual watchlist screening */
    ListWatchlistScreeningIndividualHitRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Request input for listing watchlist screening programs for individuals */
    ListWatchlistScreeningIndividualProgramsRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Request input for listing reviews for an individual watchlist screening */
    ListWatchlistScreeningIndividualReviewsRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Summary object reflecting the match result of the associated data */
    MatchSummary: {
      summary: components["schemas"]["MatchSummaryCode"];
    };
    /**
     * MatchSummaryCode
     * @description An enum indicating the match type between data provided by user and data checked against an external data source.
     *
     *
     * `match` indicates that the provided input data was a strong match against external data.
     *
     * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
     *
     * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
     *
     * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
     *
     * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
     * @example match
     * @enum {string}
     */
    MatchSummaryCode:
      | "match"
      | "partial_match"
      | "no_match"
      | "no_data"
      | "no_input";
    /**
     * @description Field describing whether the associated address is a post office box. Will be `yes` when a P.O. box is detected, `no` when Plaid confirmed the address is not a P.O. box, and `no_data` when Plaid was not able to determine if the address is a P.O. box.
     * @example yes
     * @enum {string}
     */
    POBoxStatus: "yes" | "no" | "no_data";
    /** @description Paginated list of dashboard users */
    PaginatedDashboardUserListResponse: {
      /** @description List of dashboard users */
      dashboard_users: components["schemas"]["DashboardUser"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Paginated list of entity watchlist screening programs */
    PaginatedEntityWatchlistProgramListResponse: {
      /** @description List of entity watchlist screening programs */
      entity_watchlist_programs: components["schemas"]["EntityWatchlistProgram"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Paginated list of entity watchlist screening hits */
    PaginatedEntityWatchlistScreeningHitListResponse: {
      /** @description List of entity watchlist screening hits */
      entity_watchlist_screening_hits: components["schemas"]["EntityWatchlistScreeningHit"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Paginated list of entity watchlist screenings */
    PaginatedEntityWatchlistScreeningListResponse: {
      /** @description List of entity watchlist screening */
      entity_watchlist_screenings: components["schemas"]["EntityWatchlistScreening"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Paginated list of entity watchlist screening reviews */
    PaginatedEntityWatchlistScreeningReviewListResponse: {
      /** @description List of entity watchlist screening reviews */
      entity_watchlist_screening_reviews: components["schemas"]["EntityWatchlistScreeningReview"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Paginated list of Plaid sessions. */
    PaginatedIdentityVerificationListResponse: {
      /** @description List of Plaid sessions */
      identity_verifications: components["schemas"]["IdentityVerification"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Paginated list of individual watchlist screening programs */
    PaginatedIndividualWatchlistProgramListResponse: {
      /** @description List of individual watchlist screening programs */
      watchlist_programs: components["schemas"]["IndividualWatchlistProgram"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Paginated list of individual watchlist screening hits */
    PaginatedIndividualWatchlistScreeningHitListResponse: {
      /** @description List of individual watchlist screening hits */
      watchlist_screening_hits: components["schemas"]["WatchlistScreeningHit"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Paginated list of individual watchlist screenings. */
    PaginatedIndividualWatchlistScreeningListResponse: {
      /** @description List of individual watchlist screenings */
      watchlist_screenings: components["schemas"]["WatchlistScreeningIndividual"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Paginated list of screening reviews */
    PaginatedIndividualWatchlistScreeningReviewListResponse: {
      /** @description List of screening reviews */
      watchlist_screening_reviews: components["schemas"]["WatchlistScreeningReview"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * @description An enum indicating whether a phone number is a phone line or a fax line.
     * @enum {string}
     */
    PhoneType: "phone" | "fax";
    /**
     * @description The type of identity document detected in the images provided. Will always be one of the following values:
     *
     *   `drivers_license` - A driver's license for the associated country
     *
     *   `id_card` - A general national identification card, distinct from driver's licenses
     *
     *   `passport` - A passport for the associated country
     *
     *   `residence_permit_card` - An identity document permitting a foreign citizen to <em>temporarily</em> reside in the associated country
     *
     *   `resident_card` - An identity document permitting a foreign citizen to <em>permanently</em> reside in the associated country
     *
     * Note: This value may be different from the ID type that the user selects within Link. For example, if they select "Driver's License" but then submit a picture of a passport, this field will say `passport`
     * @example drivers_license
     * @enum {string}
     */
    PhysicalDocumentCategory:
      | "drivers_license"
      | "id_card"
      | "passport"
      | "residence_permit_card"
      | "resident_card";
    /** @description Data extracted from a user-submitted document. */
    PhysicalDocumentExtractedData: {
      id_number: components["schemas"]["PhysicalDocumentIDNumber"];
      category: components["schemas"]["PhysicalDocumentCategory"];
      expiration_date: components["schemas"]["Date"] | null;
      issuing_country: components["schemas"]["GenericCountryCode"];
    } | null;
    /** @description Analysis of the data extracted from the submitted document. */
    PhysicalDocumentExtractedDataAnalysis: {
      name: components["schemas"]["DocumentNameMatchCode"];
      date_of_birth: components["schemas"]["DocumentDateOfBirthMatchCode"];
      expiration_date: components["schemas"]["ExpirationDate"];
      issuing_country: components["schemas"]["IssuingCountry"];
    } | null;
    /**
     * @description Alpha-numeric ID number extracted via OCR from the user's document image.
     * @example AB123456
     */
    PhysicalDocumentIDNumber: string | null;
    /** @description URLs for downloading original and cropped images for this document submission. The URLs are designed to only allow downloading, not hot linking, so the URL will only serve the document image for 60 seconds before expiring. The expiration time is 60 seconds after the `GET` request for the associated Identity Verification attempt. A new expiring URL is generated with each request, so you can always rerequest the Identity Verification attempt if one of your URLs expires. */
    PhysicalDocumentImages: {
      original_front: components["schemas"]["DocumentImage__Front"];
      original_back: components["schemas"]["DocumentImage__Back"];
      cropped_front: components["schemas"]["DocumentImage__CroppedFront"];
      cropped_back: components["schemas"]["DocumentImage__CroppedBack"];
      face: components["schemas"]["DocumentImage__Face"];
    };
    /**
     * PostalCode
     * @description The postal code for the associated address. Between 2 and 10 alphanumeric characters.
     * @example 46001
     */
    PostalCode: string;
    /**
     * @description The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
     * @example idv_42cF1MNo42r9Xj
     */
    PreviousIdentityVerificationAttemptID: string | null;
    /**
     * Archived
     * @description Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
     * @example false
     */
    ProgramArchived: boolean;
    /**
     * ProgramNameSensitivity
     * @description The valid name matching sensitivity configurations for a screening program. Note that while certain matching techniques may be more prevalent on less strict settings, all matching algorithms are enabled for every sensitivity.
     *
     * `coarse` - See more potential matches. This sensitivity will see more broad phonetic matches across alphabets that make missing a potential hit very unlikely. This setting is noisier and will require more manual review.
     *
     * `balanced` - A good default for most companies. This sensitivity is balanced to show high quality hits with reduced noise.
     *
     * `strict` - Aggressive false positive reduction. This sensitivity will require names to be more similar than `coarse` and `balanced` settings, relying less on phonetics, while still accounting for character transpositions, missing tokens, and other common permutations.
     *
     * `exact` - Matches must be nearly exact. This sensitivity will only show hits with exact or nearly exact name matches with only basic correction such as extraneous symbols and capitalization. This setting is generally not recommended unless you have a very specific use case.
     * @example balanced
     * @enum {string}
     */
    ProgramNameSensitivity: "coarse" | "balanced" | "strict" | "exact";
    /**
     * Region
     * @description An ISO 3166-2 subdivision code. Related terms would be "state", "province", "prefecture", "zone", "subdivision", etc.
     * @example IN
     */
    Region: string;
    /**
     * ReviewComment
     * @description A comment submitted by a team member as part of reviewing a watchlist screening.
     * @example These look like legitimate matches, rejecting the customer.
     */
    ReviewComment: string | null;
    /** @description Analysis information describing why a screening hit matched the provided user information */
    ScreeningHitAnalysis: {
      dates_of_birth?: components["schemas"]["MatchSummaryCode"];
      documents?: components["schemas"]["MatchSummaryCode"];
      locations?: components["schemas"]["MatchSummaryCode"];
      names?: components["schemas"]["MatchSummaryCode"];
      /**
       * @description The version of the screening's `search_terms` that were compared when the screening hit was added. screening hits are immutable once they have been reviewed. If changes are detected due to updates to the screening's `search_terms`, the associated program, or the list's source data prior to review, the screening hit will be updated to reflect those changes.
       * @example 1
       */
      search_terms_version: number;
    };
    /** @description Information associated with the watchlist hit */
    ScreeningHitData: {
      /** @description Dates of birth associated with the watchlist hit */
      dates_of_birth?: components["schemas"]["ScreeningHitDateOfBirthItem"][];
      /** @description Documents associated with the watchlist hit */
      documents?: components["schemas"]["ScreeningHitDocumentsItems"][];
      /** @description Locations associated with the watchlist hit */
      locations?: components["schemas"]["GenericScreeningHitLocationItems"][];
      /** @description Names associated with the watchlist hit */
      names?: components["schemas"]["ScreeningHitNamesItems"][];
    };
    /** @description Analyzed date of birth for the associated hit */
    ScreeningHitDateOfBirthItem: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["DateRange"];
    };
    /** @description Analyzed document information for the associated hit */
    ScreeningHitDocumentsItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["WatchlistScreeningDocument"];
    };
    /** @description Analyzed name information for the associated hit */
    ScreeningHitNamesItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["IndividualScreeningHitNames"];
    };
    /**
     * @description A shareable URL that can be sent directly to the user to complete verification
     * @example https://flow.plaid.com/verify/idv_4FrXJvfQU3zGUR?key=e004115db797f7cc3083bff3167cba30644ef630fb46f5b086cde6cc3b86a36f
     */
    ShareableURL: string | null;
    /**
     * @description A type indicating whether a dashboard user, an API-based user, or Plaid last touched this object.
     * @enum {string}
     */
    Source: "dashboard" | "link" | "api" | "system";
    /**
     * @description The identifier provided by the source sanction or watchlist. When one is not provided by the source, this is `null`.
     * @example 26192ABC
     */
    SourceUID: string | null;
    /**
     * @description An instruction specifying what steps the new Identity Verification attempt should require the user to complete:
     *
     *
     * `reset` - Restart the user at the beginning of the session, regardless of whether they successfully completed part of their previous session.
     *
     * `incomplete` - Start the new session at the step that the user failed in the previous session, skipping steps that have already been successfully completed.
     *
     * `infer` - If the most recent Identity Verification attempt associated with the given `client_user_id` has a status of `failed` or `expired`, retry using the `incomplete` strategy. Otherwise, use the `reset` strategy.
     *
     * `custom` - Start the new session with a custom configuration, specified by the value of the `steps` field
     *
     * Note:
     *
     * The `incomplete` strategy cannot be applied if the session's failing step is `screening` or `risk_check`.
     *
     * The `infer` strategy cannot be applied if the session's status is still `active`
     * @enum {string}
     */
    Strategy: "reset" | "incomplete" | "infer" | "custom";
    /**
     * Street
     * @description The primary street portion of an address. If the user has submitted their address, this field will always be filled.
     * @example 123 Main St.
     */
    Street: string;
    /**
     * Street2
     * @description Extra street information, like an apartment or suite number.
     * @example Unit 42
     */
    Street2: string | null;
    /**
     * Timestamp
     * Format: date-time
     * @description An ISO8601 formatted timestamp.
     * @example 2020-07-24T03:26:02Z
     */
    Timestamp: string;
    /**
     * Timestamp
     * Format: date-time
     * @description An ISO8601 formatted timestamp.
     * @example 2020-07-24T03:26:02Z
     */
    TimestampNullable: string | null;
    /**
     * URL
     * Format: uri
     * @description An 'http' or 'https' URL (must begin with either of those).
     * @example https://example.com
     */
    URL: string;
    /** @description Request input for editing an entity watchlist screening */
    UpdateEntityScreeningRequest: {
      entity_watchlist_screening_id: components["schemas"]["EntityWatchlistScreeningID"];
      search_terms?: components["schemas"]["UpdateEntityScreeningRequestSearchTerms"];
      assignee?: components["schemas"]["DashboardUserID"] | null;
      status?: components["schemas"]["WatchlistScreeningStatus"] | null;
      client_user_id?: components["schemas"]["ClientUserID"] | null;
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      reset_fields?: components["schemas"]["UpdateEntityScreeningRequestResettableFieldList"];
    };
    /**
     * @description The name of a field that can be reset back to null
     * @enum {string}
     */
    UpdateEntityScreeningRequestResettableField: "assignee";
    /** @description A list of fields to reset back to null */
    UpdateEntityScreeningRequestResettableFieldList:
      | components["schemas"]["UpdateEntityScreeningRequestResettableField"][]
      | null;
    /** @description Search terms for editing an entity watchlist screening */
    UpdateEntityScreeningRequestSearchTerms: {
      entity_watchlist_program_id: components["schemas"]["EntityWatchlistProgramID"];
      legal_name?: components["schemas"]["EntityWatchlistScreeningName"] | null;
      document_number?:
        | components["schemas"]["WatchlistScreeningDocumentValue"]
        | null;
      email_address?: components["schemas"]["EmailAddress"] | null;
      country?: components["schemas"]["GenericCountryCode"] | null;
      phone_number?:
        | components["schemas"]["WatchlistScreeningPhoneNumber"]
        | null;
      url?: components["schemas"]["URL"] | null;
      client_id: components["schemas"]["APIClientID"];
      secret: components["schemas"]["APISecret"];
    } | null;
    /** @description Request input for editing an individual watchlist screening */
    UpdateIndividualScreeningRequest: {
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualID"];
      search_terms?: components["schemas"]["UpdateIndividualScreeningRequestSearchTerms"];
      assignee?: components["schemas"]["DashboardUserID"] | null;
      status?: components["schemas"]["WatchlistScreeningStatus"] | null;
      client_user_id?: components["schemas"]["ClientUserID"] | null;
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      reset_fields?: components["schemas"]["UpdateIndividualScreeningRequestResettableFieldList"];
    };
    /**
     * @description The name of a field that can be reset back to null
     * @enum {string}
     */
    UpdateIndividualScreeningRequestResettableField: "assignee";
    /** @description A list of fields to reset back to null */
    UpdateIndividualScreeningRequestResettableFieldList:
      | components["schemas"]["UpdateIndividualScreeningRequestResettableField"][]
      | null;
    /** @description Search terms for editing an individual watchlist screening */
    UpdateIndividualScreeningRequestSearchTerms: {
      watchlist_program_id?: components["schemas"]["WatchlistProgramID"] | null;
      legal_name?:
        | components["schemas"]["WatchlistScreeningIndividualName"]
        | null;
      date_of_birth?: components["schemas"]["Date"] | null;
      document_number?:
        | components["schemas"]["WatchlistScreeningDocumentValue"]
        | null;
      country?: components["schemas"]["GenericCountryCode"] | null;
    } | null;
    /** @description Home address for the user. */
    UserAddress: {
      street: components["schemas"]["Street"];
      street2?: components["schemas"]["Street2"];
      city: components["schemas"]["City"];
      region: components["schemas"]["Region"];
      postal_code: components["schemas"]["PostalCode"];
      country: components["schemas"]["GenericCountryCode"];
    } | null;
    /** @description ID number submitted by the user, currently used only for the Identity Verification product. If the user has not submitted this data yet, this field will be `null`. Otherwise, both fields are guaranteed to be filled. */
    UserIDNumber: {
      value: components["schemas"]["IDNumberValue"];
      type: components["schemas"]["IDNumberType"];
    } | null;
    /** @description The full name provided by the user. If the user has not submitted their name, this field will be null. Otherwise, both fields are guaranteed to be filled. */
    UserName: {
      given_name: components["schemas"]["GivenNameField"];
      family_name: components["schemas"]["FamilyNameField"];
    } | null;
    /**
     * WatchlistProgramID
     * @description ID of the associated program.
     * @example prg_2eRPsDnL66rZ7H
     */
    WatchlistProgramID: string;
    /**
     * WatchlistScreeningAuditTrail
     * @description Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
     */
    WatchlistScreeningAuditTrail: {
      source: components["schemas"]["Source"];
      dashboard_user_id: components["schemas"]["DashboardUserID"] | null;
      timestamp: components["schemas"]["Timestamp"];
    };
    /** @description Request input for creating an individual watchlist screening */
    WatchlistScreeningCreateRequest: {
      search_terms: components["schemas"]["WatchlistScreeningRequestSearchTerms"];
      client_user_id?: components["schemas"]["ClientUserID"] | null;
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /**
     * WatchlistScreeningDocument
     * @description An official document, usually issued by a governing body or institution, with an associated identifier.
     */
    WatchlistScreeningDocument: {
      type: components["schemas"]["WatchlistScreeningDocumentType"];
      number: components["schemas"]["WatchlistScreeningDocumentValue"];
    };
    /**
     * WatchlistScreeningDocumentType
     * @description The kind of official document represented by this object.
     *
     * `birth_certificate` - A certificate of birth
     *
     * `drivers_license` - A license to operate a motor vehicle
     *
     * `immigration_number` - Immigration or residence documents
     *
     * `military_id` - Identification issued by a military group
     *
     * `other` - Any document not covered by other categories
     *
     * `passport` - An official passport issue by a government
     *
     * `personal_identification` - Any generic personal identification that is not covered by other categories
     *
     * `ration_card` - Identification that entitles the holder to rations
     *
     * `ssn` - United States Social Security Number
     *
     * `student_id` - Identification issued by an educational institution
     *
     * `tax_id` - Identification issued for the purpose of collecting taxes
     *
     * `travel_document` - Visas, entry permits, refugee documents, etc.
     *
     * `voter_id` - Identification issued for the purpose of voting
     * @example passport
     * @enum {string}
     */
    WatchlistScreeningDocumentType:
      | "birth_certificate"
      | "drivers_license"
      | "immigration_number"
      | "military_id"
      | "other"
      | "passport"
      | "personal_identification"
      | "ration_card"
      | "ssn"
      | "student_id"
      | "tax_id"
      | "travel_document"
      | "voter_id";
    /**
     * WatchlistScreeningDocumentValue
     * @description The numeric or alphanumeric identifier associated with this document.
     * @example C31195855
     */
    WatchlistScreeningDocumentValue: string;
    /**
     * WatchlistScreeningHit
     * @description Data from a government watchlist or PEP list that has been attached to the screening.
     */
    WatchlistScreeningHit: {
      id: components["schemas"]["WatchlistScreeningHitID"];
      review_status: components["schemas"]["WatchlistScreeningHitStatus"];
      first_active: components["schemas"]["Timestamp"];
      inactive_since: components["schemas"]["TimestampNullable"];
      historical_since: components["schemas"]["TimestampNullable"];
      list_code: components["schemas"]["IndividualWatchlistCode"];
      plaid_uid: components["schemas"]["InternalUID"];
      source_uid: components["schemas"]["SourceUID"];
      analysis?: components["schemas"]["ScreeningHitAnalysis"];
      data?: components["schemas"]["ScreeningHitData"];
    };
    /**
     * WatchlistScreeningHitID
     * @description ID of the associated screening hit.
     * @example scrhit_52xR9LKo77r1Np
     */
    WatchlistScreeningHitID: string;
    /** @description Location information for the associated individual watchlist hit */
    WatchlistScreeningHitLocations: {
      /**
       * @description The full location string, potentially including elements like street, city, postal codes and country codes. Note that this is not necessarily a complete or well-formatted address.
       * @example Florida, US
       */
      full: string;
      country: components["schemas"]["GenericCountryCode"];
    };
    /**
     * WatchlistScreeningHitStatus
     * @description The current state of review. All watchlist screening hits begin in a `pending_review` state but can be changed by creating a review. When a hit is in the `pending_review` state, it will always show the latest version of the watchlist data Plaid has available and be compared against the latest customer information saved in the watchlist screening. Once a hit has been marked as `confirmed` or `dismissed` it will no longer be updated so that the state is as it was when the review was first conducted.
     * @example pending_review
     * @enum {string}
     */
    WatchlistScreeningHitStatus: "confirmed" | "pending_review" | "dismissed";
    /**
     * WatchlistScreeningIndividual
     * @description The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration.
     */
    WatchlistScreeningIndividual: {
      id: components["schemas"]["WatchlistScreeningIndividualID"];
      search_terms: components["schemas"]["WatchlistScreeningSearchTerms"];
      assignee: components["schemas"]["DashboardUserID"] | null;
      status: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id: components["schemas"]["ClientUserID"] | null;
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
    };
    /**
     * WatchlistScreeningIndividualID
     * @description ID of the associated screening.
     * @example scr_52xR9LKo77r1Np
     */
    WatchlistScreeningIndividualID: string;
    /**
     * WatchlistScreeningIndividualName
     * @description The legal name of the individual being screened.
     * @example Aleksey Potemkin
     */
    WatchlistScreeningIndividualName: string;
    /** @description The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration. */
    WatchlistScreeningIndividualResponse: {
      id: components["schemas"]["WatchlistScreeningIndividualID"];
      search_terms: components["schemas"]["WatchlistScreeningSearchTerms"];
      assignee: components["schemas"]["DashboardUserID"] | null;
      status: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id: components["schemas"]["ClientUserID"] | null;
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * WatchlistScreeningPhoneNumber
     * @description A phone number in E.164 format.
     * @example +14025671234
     */
    WatchlistScreeningPhoneNumber: string;
    /** @description Search inputs for creating a watchlist screening */
    WatchlistScreeningRequestSearchTerms: {
      watchlist_program_id: components["schemas"]["WatchlistProgramID"];
      legal_name: components["schemas"]["WatchlistScreeningIndividualName"];
      date_of_birth?: components["schemas"]["Date"] | null;
      document_number?:
        | components["schemas"]["WatchlistScreeningDocumentValue"]
        | null;
      country?: components["schemas"]["GenericCountryCode"] | null;
    };
    /**
     * WatchlistScreeningReview
     * @description A review submitted by a team member for an individual watchlist screening. A review can be either a comment on the current screening state, actions taken
     * against hits attached to the watchlist screening, or both.
     */
    WatchlistScreeningReview: {
      id: components["schemas"]["WatchlistScreeningReviewID"];
      /** @description Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected. */
      confirmed_hits: components["schemas"]["WatchlistScreeningHitID"][];
      /** @description Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed. */
      dismissed_hits: components["schemas"]["WatchlistScreeningHitID"][];
      comment: components["schemas"]["ReviewComment"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
    };
    /**
     * WatchlistScreeningReviewID
     * @description ID of the associated review.
     * @example rev_aCLNRxK3UVzn2r
     */
    WatchlistScreeningReviewID: string;
    /**
     * @description A review submitted by a team member for an individual watchlist screening. A review can be either a comment on the current screening state, actions taken
     * against hits attached to the watchlist screening, or both.
     */
    WatchlistScreeningReviewResponse: {
      id: components["schemas"]["WatchlistScreeningReviewID"];
      /** @description Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected. */
      confirmed_hits: components["schemas"]["WatchlistScreeningHitID"][];
      /** @description Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed. */
      dismissed_hits: components["schemas"]["WatchlistScreeningHitID"][];
      comment: components["schemas"]["ReviewComment"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Search terms for creating an individual watchlist screening */
    WatchlistScreeningSearchTerms: {
      watchlist_program_id: components["schemas"]["WatchlistProgramID"];
      legal_name: components["schemas"]["WatchlistScreeningIndividualName"];
      date_of_birth: components["schemas"]["Date"] | null;
      document_number:
        | components["schemas"]["WatchlistScreeningDocumentValue"]
        | null;
      country: components["schemas"]["GenericCountryCode"] | null;
      /**
       * @description The current version of the search terms. Starts at `1` and increments with each edit to `search_terms`.
       * @example 1
       */
      version: number;
    };
    /**
     * WatchlistScreeningStatus
     * @description A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
     * @example cleared
     * @enum {string}
     */
    WatchlistScreeningStatus: "rejected" | "pending_review" | "cleared";
    /**
     * WeakAliasDetermination
     * @description Names that are explicitly marked as low quality either by their `source` list, or by `plaid` by a series of additional checks done by Plaid. Plaid does not ever surface a hit as a result of a weak name alone. If a name has no quality issues, this value will be `none`.
     * @example none
     * @enum {string}
     */
    WeakAliasDetermination: "none" | "source" | "plaid";
    /**
     * AssetReportFreddieGetRequest
     * @description AssetReportFreddieGetResponse defines the request schema for `credit/asset_report/freddie_mac/get`
     */
    AssetReportFreddieGetRequest: {
      /** @description A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely. */
      audit_copy_token: string;
      client_id?: components["schemas"]["APIClientID"];
      /** @description A string ID provided by Freddie Mac which will be added to the Asset Report to help them identify the report (PLAD_.*) */
      report_identifier: string;
      report_type: components["schemas"]["ReportType"];
      secret?: components["schemas"]["APISecret"];
      /** @description A string ID provided by Freddie Mac which will be added to the Asset Report with Plaid's vendor ID. Will always be "PLAD" */
      vendor_identifier: string;
    } & { [key: string]: unknown };
    /**
     * AssetReportFreddieGetResponse
     * @description AssetReportFreddieGetResponse defines the response schema for `/asset_report/get`
     */
    AssetReportFreddieGetResponse: {
      DEAL: components["schemas"]["AssetReportFreddie"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /**
     * AssetReportFreddie
     * @description An object representing an Asset Report with Freddie Mac schema
     */
    AssetReportFreddie: {
      LOANS: components["schemas"]["Loans"];
      PARTIES: components["schemas"]["Parties"];
      SERVICES: components["schemas"]["Services"];
    } & { [key: string]: unknown };
    /**
     * Loans
     * @description A collection of loans that are part of a single deal.
     */
    Loans: {
      LOAN: components["schemas"]["Loan"];
    } & { [key: string]: unknown };
    /**
     * Loan
     * @description Information specific to a mortgage loan agreement between one or more borrowers and a mortgage lender.
     */
    Loan: {
      /** @description An attribute of LOAN used to identify the role the associated LOAN plays in the transaction. */
      LoanRoleType: string;
      LOAN_IDENTIFIERS: components["schemas"]["LoanIdentifiers"];
    } & { [key: string]: unknown };
    /**
     * LoanIdentifiers
     * @description Collection of current and previous identifiers for this loan.
     */
    LoanIdentifiers: {
      LOAN_IDENTIFIER: components["schemas"]["LoanIdentifier"];
    } & { [key: string]: unknown };
    /**
     * LoanIdentifier
     * @description The information used to identify this loan by various parties to the transaction or other organizations.
     */
    LoanIdentifier: {
      /** @description The value of the identifier for the specified type. */
      LoanIdentifier: string | null;
      LoanIdentifierType: components["schemas"]["LoanIdentifierType"];
    } & { [key: string]: unknown };
    /**
     * LoanIdentifierType
     * @description A value from a MISMO prescribed list that specifies the type of loan identifier.
     * @enum {string|null}
     */
    LoanIdentifierType: ("LenderLoan" | "UniversalLoan") | null;
    /**
     * Parties
     * @description A collection of objects that define specific parties to a deal. This includes the direct participating parties, such as borrower and seller and the indirect parties such as the credit report provider.
     */
    Parties: {
      PARTY: components["schemas"]["Party"][];
    } & { [key: string]: unknown };
    /**
     * Party
     * @description A collection of information about a single party to a transaction. Included direct participants like the borrower and seller as well as indirect participants such as the flood certificate provider.
     */
    Party: {
      INDIVIDUAL: components["schemas"]["PartyIndividual"];
      ROLES: components["schemas"]["Roles"];
      TAXPAYER_IDENTIFIERS: components["schemas"]["TaxpayerIdentifiers"];
    } & { [key: string]: unknown };
    /**
     * INDIVIDUAL
     * @description No documentation available
     */
    PartyIndividual: {
      NAME: components["schemas"]["IndividualName"];
    } & { [key: string]: unknown };
    /**
     * NAME
     * @description Parent container for name that allows for choice group between parsed and unparsed containers.Parent container for name that allows for choice group between parsed and unparsed containers.
     */
    IndividualName: {
      /** @description The first name of the individual represented by the parent object. */
      FirstName: string;
      /** @description The middle name of the individual represented by the parent object. */
      MiddleName: string | null;
      /** @description The last name of the individual represented by the parent object. */
      LastName: string;
    } & { [key: string]: unknown };
    /**
     * Roles
     * @description No documentation available
     */
    Roles: {
      ROLE: components["schemas"]["Role"];
    } & { [key: string]: unknown };
    /**
     * Role
     * @description ANo documentation available
     */
    Role: {
      ROLE_DETAIL: components["schemas"]["RoleDetail"];
    } & { [key: string]: unknown };
    /**
     * RoleDetail
     * @description No documentation available
     */
    RoleDetail: {
      PartyRoleType: components["schemas"]["PartyRoleType"];
    } & { [key: string]: unknown };
    /**
     * PartyRoleType
     * @description A value from a MISMO defined list that identifies the role that the party plays in the transaction. Parties may be either a person or legal entity. A party may play multiple roles in a transaction.A value from a MISMO defined list that identifies the role that the party plays in the transaction. Parties may be either a person or legal entity. A party may play multiple roles in a transaction.
     * @enum {string}
     */
    PartyRoleType: "Borrower";
    /**
     * TaxpayerIdentifiers
     * @description The collection of TAXPAYER_IDENTIFICATION elements
     */
    TaxpayerIdentifiers: {
      TAXPAYER_IDENTIFIER: components["schemas"]["TaxpayerIdentifier"];
    } & { [key: string]: unknown };
    /**
     * TaxpayerIdentifier
     * @description Information about the Taxpayer identification values assigned to the individual or legal entity.Information about the Taxpayer identification values assigned to the individual or legal entity.
     */
    TaxpayerIdentifier: {
      TaxpayerIdentifierType: components["schemas"]["TaxpayerIdentifierType"];
      /** @description The value of the taxpayer identifier as assigned by the IRS to the individual or legal entity. */
      TaxpayerIdentifierValue: string | null;
    } & { [key: string]: unknown };
    /**
     * TaxpayerIdentifierType
     * @description A value from a MISMO prescribed list that classifies identification numbers used by the Internal Revenue Service (IRS) in the administration of tax laws. A Social Security number (SSN) is issued by the SSA; all other taxpayer identification numbers are issued by the IRS.
     * @enum {string|null}
     */
    TaxpayerIdentifierType:
      | ("IndividualTaxpayerIdentificationNumber" | "SocialSecurityNumber")
      | null;
    /**
     * Services
     * @description A collection of objects that describe requests and responses for services.
     */
    Services: {
      SERVICE: components["schemas"]["Service"];
    } & { [key: string]: unknown };
    /**
     * Service
     * @description A collection of details related to a fulfillment service or product in terms of request, process and result.
     */
    Service: {
      VERIFICATION_OF_ASSET: components["schemas"]["VerificationOfAsset"];
      STATUSES: components["schemas"]["Statuses"];
    } & { [key: string]: unknown };
    /**
     * VerificationOfAsset
     * @description No documentation available
     */
    VerificationOfAsset: {
      REPORTING_INFORMATION: components["schemas"]["ReportingInformation"];
      SERVICE_PRODUCT_FULFILLMENT: components["schemas"]["ServiceProductFulfillment"];
      VERIFICATION_OF_ASSET_RESPONSE: components["schemas"]["VerificationOfAssetResponse"];
    } & { [key: string]: unknown };
    /**
     * ReportingInformation
     * @description Information about an report identifier and a report name.
     */
    ReportingInformation: {
      /** @description No documentation available */
      ReportIdentifierType: string;
      /** @description No documentation available */
      ReportingInformationIdentifier: string;
      /** @description No documentation available */
      ReportDateTime: string;
    } & { [key: string]: unknown };
    /**
     * ServiceProductFulfillment
     * @description A collection of details related to a fulfillment service or product in terms of request, process and result.
     */
    ServiceProductFulfillment: {
      SERVICE_PRODUCT_FULFILLMENT_DETAIL: components["schemas"]["ServiceProductFulfillmentDetail"];
    } & { [key: string]: unknown };
    /**
     * ServiceProductFulfillmentDetail
     * @description No documentation available
     */
    ServiceProductFulfillmentDetail: {
      /** @description A string that uniquely identifies a type of order Verification of Asset. */
      VendorOrderIdentifier: string | null;
      ServiceProductFulfillmentIdentifier: components["schemas"]["ServiceProductFulfillmentIdentifier"];
    } & { [key: string]: unknown };
    /**
     * ServiceProductFulfillmentIdentifier
     * @description No documentation available
     * @enum {string}
     */
    ServiceProductFulfillmentIdentifier: "VOA";
    /**
     * VerificationOfAssetResponse
     * @description No documentation available
     */
    VerificationOfAssetResponse: {
      ASSETS: components["schemas"]["Assets"];
    } & { [key: string]: unknown };
    /**
     * Assets
     * @description No documentation available
     */
    Assets: {
      /** @description No documentation available */
      ASSET: components["schemas"]["Asset"][];
    } & { [key: string]: unknown };
    /**
     * Asset
     * @description No documentation available
     */
    Asset: {
      ASSET_DETAIL: components["schemas"]["AssetDetail"];
      ASSET_OWNERS: components["schemas"]["AssetOwners"];
      ASSET_HOLDER: components["schemas"]["AssetHolder"];
      ASSET_TRANSACTIONS: components["schemas"]["AssetTransactions"];
    } & { [key: string]: unknown };
    /**
     * AssetDetail
     * @description Details about an asset.
     */
    AssetDetail: {
      /** @description A vendor creadted unique Identifier. */
      AssetUniqueIdentifier: string;
      /** @description A unique alphanumeric string identifying an asset. */
      AssetAccountIdentifier: string;
      /** @description Account Report As of Date / Create Date. Format YYYY-MM-DD */
      AssetAsOfDate: string;
      /** @description A text description that further defines the Asset. This could be used to describe the shares associated with the stocks, bonds or mutual funds, retirement funds or business owned that the borrower has disclosed (named) as an asset. */
      AssetDescription: string | null;
      /**
       * Format: double
       * @description Asset Account Available Balance.
       */
      AssetAvailableBalanceAmount: number;
      /**
       * Format: double
       * @description A vendor creadted unique Identifier
       */
      AssetCurrentBalanceAmount: number;
      AssetType: components["schemas"]["AssetType"];
      /** @description Additional Asset Decription some examples are Investment Tax-Deferred , Loan, 401K, 403B, Checking, Money Market, Credit Card,ROTH,529,Biller,ROLLOVER,CD,Savings,Investment Taxable, IRA, Mortgage, Line Of Credit. */
      AssetTypeAdditionalDescription: string | null;
      /** @description The Number of days requested made to the Financial Institution. Example When looking for 3 months of data from the FI, pass in 90 days. */
      AssetDaysRequestedCount: number;
      /** @description Ownership type of the asset account. */
      AssetOwnershipType: string | null;
    } & { [key: string]: unknown };
    /**
     * AssetType
     * @description A value from a MISMO prescribed list that specifies financial assets in a mortgage loan transaction. Assets may be either liquid or fixed and are associated with a corresponding asset amount.
     * @enum {string}
     */
    AssetType:
      | "CheckingAccount"
      | "SavingsAccount"
      | "Investment"
      | "MoneyMarketFund"
      | "Other";
    /**
     * AssetOwners
     * @description No documentation available
     */
    AssetOwners: {
      /** @description Multiple Occurances of Account Owners Full Name up to 4. */
      ASSET_OWNER: components["schemas"]["AssetOwner"][];
    } & { [key: string]: unknown };
    /**
     * AssetOwner
     * @description No documentation available
     */
    AssetOwner: {
      /** @description Account Owner Full Name. */
      AssetOwnerText: string | null;
    } & { [key: string]: unknown };
    /**
     * AssetHolder
     * @description No documentation available
     */
    AssetHolder: {
      NAME: components["schemas"]["AssetHolderName"];
    } & { [key: string]: unknown };
    /**
     * NAME
     * @description No documentation available
     */
    AssetHolderName: {
      /** @description The unparsed name of either an individual or a legal entity. */
      FullName: string;
    } & { [key: string]: unknown };
    /**
     * AssetTransactions
     * @description No documentation available
     */
    AssetTransactions: {
      ASSET_TRANSACTION: components["schemas"]["AssetTransaction"][];
    } & { [key: string]: unknown };
    /**
     * AssetTransaction
     * @description An object representing...
     */
    AssetTransaction: {
      ASSET_TRANSACTION_DETAIL: components["schemas"]["AssetTransactionDetail"];
      /** @description No documentation available */
      ASSET_TRANSACTION_DESCRIPTION: components["schemas"]["AssetTransactionDescription"][];
    } & { [key: string]: unknown };
    /**
     * AssetTransactionDetail
     * @description No documentation available
     */
    AssetTransactionDetail: {
      /** @description A vendor creadted unique Identifier. */
      AssetTransactionUniqueIdentifier: string;
      /** @description AssetTransactionAmountName. */
      AssetTransactionAmount: number;
      /**
       * Format: date
       * @description Asset Transaction Date.
       */
      AssetTransactionDate: string;
      /**
       * Format: date
       * @description Asset Transaction Post Date.
       */
      AssetTransactionPostDate: string;
      AssetTransactionType: components["schemas"]["AssetTransactionType"];
      /** @description Populate with who did the transaction. */
      AssetTransactionPaidByName: string | null;
      /** @description FI Provided - examples are atm, cash, check, credit, debit, deposit, directDebit, directDeposit, dividend, fee, interest, other, payment, pointOfSale, repeatPayment, serviceCharge, transfer. */
      AssetTransactionTypeAdditionalDescription: string | null;
      AssetTransactionCategoryType: components["schemas"]["AssetTransactionCategoryType"];
      /** @description FI provided Transaction Identifier. */
      FinancialInstitutionTransactionIdentifier: string | null;
    } & { [key: string]: unknown };
    /**
     * AssetTransactionType
     * @description Asset Transaction Type.
     * @enum {string}
     */
    AssetTransactionType: "Credit" | "Debit";
    /**
     * AssetTransactionCategoryType
     * @description Asset Transaction Category Type Enumerated derived by Vendor.
     * @enum {string|null}
     */
    AssetTransactionCategoryType:
      | (
          | "ATMFee"
          | "Advertising"
          | "AirTravel"
          | "AlcoholBars"
          | "Allowance"
          | "Amusement"
          | "Arts"
          | "AutoTransport"
          | "AutoInsurance"
          | "AutoPayment"
          | "BabySupplies"
          | "BabysitterDaycare"
          | "BankFee"
          | "BillsUtilities"
          | "Bonus"
          | "BooksSupplies"
          | "Business Services"
          | "Buy"
          | "CashATM"
          | "Charity"
          | "Check"
          | "ChildSupport"
          | "Clothing"
          | "CoffeeShops"
          | "CreditCardPayment"
          | "Dentist"
          | "Doctor"
          | "Education"
          | "ElectronicsSoftware"
          | "Entertainment"
          | "Eyecare"
          | "FastFood"
          | "FederalTax"
          | "FeesCharges"
          | "FinanceCharge"
          | "Financial"
          | "FinancialAdvisor"
          | "FoodDining"
          | "Furnishings"
          | "GasFuel"
          | "GiftsDonations"
          | "Groceries"
          | "Gym"
          | "Hair"
          | "HealthFitness"
          | "HealthInsurance"
          | "Hobbies"
          | "Home"
          | "HomeImprovement"
          | "HomeInsurance"
          | "HomePhone"
          | "HomeServices"
          | "HomeSupplies"
          | "Hotel"
          | "Income"
          | "InterestIncome"
          | "Internet"
          | "Investments"
          | "Kids"
          | "KidsActivities"
          | "LateFee"
          | "Laundry"
          | "LawnGarden"
          | "Legal"
          | "LifeInsurance"
          | "LoanInsurance"
          | "LoanPayment"
          | "Loans"
          | "MobilePhone"
          | "MortgageRent"
          | "MoviesDVDs"
          | "Music"
          | "NewspapersMagazines"
          | "OfficeSupplies"
          | "Parking"
          | "Paycheck"
          | "PersonalCare"
          | "PetFoodSupplies"
          | "PetGrooming"
          | "Pets"
          | "Pharmacy"
          | "Printing"
          | "Property Tax"
          | "Public Transportation"
          | "Reimbursement"
          | "RentalCarTaxi"
          | "Restaurants"
          | "SalesTax"
          | "ServiceParts"
          | "ServiceFee"
          | "Shipping"
          | "Shopping"
          | "SpaMassage"
          | "SportingGoods"
          | "Sports"
          | "StateTax"
          | "Student Loan"
          | "Taxes"
          | "Television"
          | "Toys"
          | "Transfer"
          | "Travel"
          | "Tuition"
          | "Uncategorized"
          | "Utilities"
          | "Vacation"
          | "Veterinary"
        )
      | null;
    /**
     * AssetTransactionDescription
     * @description No documentation available
     */
    AssetTransactionDescription: {
      /** @description Asset Transaction Description String up to 3 occurances 1 required. */
      AssetTransactionDescription: string;
    } & { [key: string]: unknown };
    /**
     * Statuses
     * @description A collection of STATUS containers.
     */
    Statuses: {
      STATUS: components["schemas"]["Status"];
    } & { [key: string]: unknown };
    /**
     * Status
     * @description No documentation available
     */
    Status: {
      /** @description Satus Code. */
      StatusCode: string | null;
      /** @description Status Description. */
      StatusDescription: string | null;
    } & { [key: string]: unknown };
    /** @description ItemGetRequest defines the request schema for `/item/get` */
    ItemGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /** @description ItemGetResponse defines the response schema for `/item/get` and `/item/webhook/update` */
    ItemGetResponse: {
      item: components["schemas"]["Item"];
      status?: components["schemas"]["ItemStatusNullable"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description ItemRemoveRequest defines the request schema for `/item/remove` */
    ItemRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /** @description ItemRemoveResponse defines the response schema for `/item/remove` */
    ItemRemoveResponse: {
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description ItemWebhookUpdateRequest defines the request schema for `/item/webhook/update` */
    ItemWebhookUpdateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /** @description The new webhook URL to associate with the Item. To remove a webhook from an Item, set to `null`. */
      webhook?: string | null;
    };
    /** @description ItemWebhookUpdateResponse defines the response schema for `/item/webhook/update` */
    ItemWebhookUpdateResponse: {
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description ItemAccessTokenInvalidateRequest defines the request schema for `/item/access_token/invalidate` */
    ItemAccessTokenInvalidateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /** @description ItemAccessTokenInvalidateResponse defines the response schema for `/item/access_token/invalidate` */
    ItemAccessTokenInvalidateResponse: {
      new_access_token: components["schemas"]["AccessToken"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description ItemPublicTokenExchangeRequest defines the request schema for `/item/public_token/exchange` */
    ItemPublicTokenExchangeRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Your `public_token`, obtained from the Link `onSuccess` callback or `/sandbox/item/public_token/create`. */
      public_token: string;
    };
    /** @description ItemPublicTokenExchangeResponse defines the response schema for `/item/public_token/exchange` */
    ItemPublicTokenExchangeResponse: {
      access_token: components["schemas"]["AccessToken"];
      /** @description The `item_id` value of the Item associated with the returned `access_token` */
      item_id: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description ItemPublicTokenCreateRequest defines the request schema for `/item/public_token/create` */
    ItemPublicTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /** @description ItemPublicTokenCreateResponse defines the response schema for `/item/public_token/create` */
    ItemPublicTokenCreateResponse: {
      /** @description A `public_token` for the particular Item corresponding to the specified `access_token` */
      public_token: string;
      /** Format: date-time */
      expiration?: string;
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description ItemImportRequest defines the request schema for `/item/import` */
    ItemImportRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Array of product strings */
      products: components["schemas"]["Products"][];
      user_auth: components["schemas"]["ItemImportRequestUserAuth"];
      options?: components["schemas"]["ItemImportRequestOptions"];
    };
    /** @description An optional object to configure `/item/import` request. */
    ItemImportRequestOptions: {
      /** @description Specifies a webhook URL to associate with an Item. Plaid fires a webhook if credentials fail. */
      webhook?: string;
    };
    /** @description Object of user ID and auth token pair, permitting Plaid to aggregate a user’s accounts */
    ItemImportRequestUserAuth: {
      /** @description Opaque user identifier */
      user_id: string;
      /** @description Authorization token Plaid will use to aggregate this user’s accounts */
      auth_token: string;
    };
    /** @description ItemImportResponse defines the response schema for `/item/import` */
    ItemImportResponse: {
      access_token: components["schemas"]["AccessToken"];
      request_id: components["schemas"]["RequestID"];
    } & { [key: string]: unknown };
    /** @description Metadata about the Item. */
    Item: {
      /** @description The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive. */
      item_id: string;
      /** @description The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits. */
      institution_id?: string | null;
      /** @description The URL registered to receive webhooks for the Item. */
      webhook: string | null;
      error: components["schemas"]["PlaidError"];
      /** @description A list of products available for the Item that have not yet been accessed. The contents of this array will be mutually exclusive with `billed_products`. */
      available_products: components["schemas"]["Products"][];
      /** @description A list of products that have been billed for the Item. The contents of this array will be mutually exclusive with `available_products`. Note - `billed_products` is populated in all environments but only requests in Production are billed. Also note that products that are billed on a pay-per-call basis rather than a pay-per-Item basis, such as `balance`, will not appear here. */
      billed_products: components["schemas"]["Products"][];
      /** @description A list of authorized products for the Item. */
      products?: components["schemas"]["Products"][];
      /** @description Beta: A list of products that have gone through consent collection for the Item. Only present for those enabled in the beta. */
      consented_products?: components["schemas"]["Products"][];
      /**
       * Format: date-time
       * @description The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the `ITEM_LOGIN_REQUIRED` error state. To circumvent the `ITEM_LOGIN_REQUIRED` error and maintain continuous consent, the end user can reauthenticate via Link’s update mode in advance of the consent expiration time.
       *
       * Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null.
       */
      consent_expiration_time: string | null;
      /**
       * @description Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.
       *
       * `background` - Item can be updated in the background
       *
       * `user_present_required` - Item requires user interaction to be updated
       * @enum {string}
       */
      update_type: "background" | "user_present_required";
    } & { [key: string]: unknown };
    /**
     * ItemStatus
     * @description An object with information about the status of the Item.
     */
    ItemStatus:
      | ({
          investments?: components["schemas"]["ItemStatusInvestments"];
          transactions?: components["schemas"]["ItemStatusTransactions"];
          last_webhook?: components["schemas"]["ItemStatusLastWebhook"];
        } & { [key: string]: unknown })
      | null;
    /** @description Information about the last successful and failed transactions update for the Item. */
    ItemStatusNullable:
      | (components["schemas"]["ItemStatus"] & { [key: string]: unknown })
      | null;
    /** @description Information about the last successful and failed transactions update for the Item. */
    ItemStatusTransactions:
      | ({
          /**
           * Format: date-time
           * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last successful transactions update for the Item. The status will update each time Plaid successfully connects with the institution, regardless of whether any new data is available in the update.
           */
          last_successful_update?: string | null;
          /**
           * Format: date-time
           * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last failed transactions update for the Item. The status will update each time Plaid fails an attempt to connect with the institution, regardless of whether any new data is available in the update.
           */
          last_failed_update?: string | null;
        } & { [key: string]: unknown })
      | null;
    /** @description Information about the last successful and failed investments update for the Item. */
    ItemStatusInvestments:
      | ({
          /**
           * Format: date-time
           * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last successful investments update for the Item. The status will update each time Plaid successfully connects with the institution, regardless of whether any new data is available in the update.
           */
          last_successful_update?: string | null;
          /**
           * Format: date-time
           * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last failed investments update for the Item. The status will update each time Plaid fails an attempt to connect with the institution, regardless of whether any new data is available in the update.
           */
          last_failed_update?: string | null;
        } & { [key: string]: unknown })
      | null;
    /** @description Information about the last webhook fired for the Item. */
    ItemStatusLastWebhook:
      | ({
          /**
           * Format: date-time
           * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of when the webhook was fired.
           */
          sent_at?: string | null;
          /** @description The last webhook code sent. */
          code_sent?: string | null;
        } & { [key: string]: unknown })
      | null;
  };
}

export interface operations {
  /** List a user’s connected applications */
  itemApplicationList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemApplicationListResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemApplicationListRequest"];
      };
    };
  };
  /** Enable consumers to update product access on selected accounts for an application. */
  itemApplicationScopesUpdate: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": components["schemas"]["ItemApplicationScopesUpdateResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemApplicationScopesUpdateRequest"];
      };
    };
  };
  /** Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences */
  applicationGet: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationGetResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationGetRequest"];
      };
    };
  };
  /** Returns information about the status of an Item. */
  itemGet: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": components["schemas"]["ItemGetResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemGetRequest"];
      };
    };
  };
  /**
   * The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item's checking and savings accounts, along with high-level account data and balances when available.
   *
   * Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
   *
   * Also note that `/auth/get` will not return data for any new accounts opened after the Item was created. To obtain data for new accounts, create a new Item.
   *
   * Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
   */
  authGet: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": components["schemas"]["AuthGetResponse"];
        };
      };
      /** Default error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthGetRequest"];
      };
    };
  };
  /**
   * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.
   *
   * Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).
   *
   * Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.
   *
   * Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.
   *
   * Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn't. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
   */
  transactionsGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsGetResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsGetRequest"];
      };
    };
  };
  /**
   * `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get`.
   *
   * Access to `/transactions/refresh` in Production is specific to certain pricing plans. If you cannot access `/transactions/refresh` in Production, [contact Sales](https://www.plaid.com/contact) for assistance.
   */
  transactionsRefresh: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsRefreshResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsRefreshRequest"];
      };
    };
  };
  /**
   * The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.
   *
   * This endpoint is not included by default as part of Transactions. To request access to this endpoint and learn more about pricing, contact your Plaid account manager.
   *
   * Note that unlike `/transactions/get`, `/transactions/recurring/get` will not initialize an Item with Transactions. The Item must already have been initialized with Transactions (either during Link, by specifying it in `/link/token/create`, or after Link, by calling `/transactions/get`) before calling this endpoint. Data is available to `/transactions/recurring/get` approximately 5 seconds after the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook has fired (about 1-2 minutes after initialization).
   *
   * After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Since recurring streams do not change often, it will typically not be necessary to call this endpoint more than once per day.
   */
  transactionsRecurringGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsRecurringGetResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsRecurringGetRequest"];
      };
    };
  };
  /**
   * This endpoint replaces `/transactions/get` and its associated webhooks for most common use-cases.
   *
   * The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates.
   *
   * This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.
   *
   * Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.
   *
   * In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as "adds"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.
   *
   * Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates.
   *
   * Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.
   *
   * Note that for newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.
   *
   * To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
   */
  transactionsSync: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsSyncResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsSyncRequest"];
      };
    };
  };
  /**
   * Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.
   *
   * If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
   */
  institutionsGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["InstitutionsGetResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstitutionsGetRequest"];
      };
    };
  };
  /**
   * Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.
   *
   * Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
   */
  institutionsSearch: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["InstitutionsSearchResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstitutionsSearchRequest"];
      };
    };
  };
  /**
   * Returns a JSON response containing details on a specified financial institution currently supported by Plaid.
   *
   * Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
   */
  institutionsGetById: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["InstitutionsGetByIdResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstitutionsGetByIdRequest"];
      };
    };
  };
  /**
   * The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.
   *
   * Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.
   *
   * Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution's OAuth permission manager.
   *
   * API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
   */
  itemRemove: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": components["schemas"]["ItemRemoveResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemRemoveRequest"];
      };
    };
  };
  /**
   * The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.
   * For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link's [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.
   *
   * This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, balances returned may not be up-to-date; for realtime balance information, use `/accounts/balance/get` instead. Note that some information is nullable.
   */
  accountsGet: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": components["schemas"]["AccountsGetResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountsGetRequest"];
      };
    };
  };
  /** Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication. */
  categoriesGet: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": components["schemas"]["CategoriesGetResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoriesGetRequest"];
      };
    };
  };
  /** Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. */
  sandboxProcessorTokenCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxProcessorTokenCreateResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxProcessorTokenCreateRequest"];
      };
    };
  };
  /** Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions. */
  sandboxPublicTokenCreate: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxPublicTokenCreateResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxPublicTokenCreateRequest"];
      };
    };
  };
  /**
   * The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:
   *
   * `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
   *
   * `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.
   *
   * `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.
   *
   * `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
   *
   * Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development.
   */
  sandboxItemFireWebhook: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxItemFireWebhookResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxItemFireWebhookRequest"];
      };
    };
  };
  /** The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. */
  accountsBalanceGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AccountsGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountsBalanceGetRequest"];
      };
    };
  };
  /**
   * The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.
   *
   * This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
   *
   * Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
   */
  identityGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["IdentityGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentityGetRequest"];
      };
    };
  };
  /**
   * The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.
   *
   * This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
   */
  identityMatch: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["IdentityMatchResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentityMatchRequest"];
      };
    };
  };
  /** Retrieve information about a dashboard user. */
  dashobardUserGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["DashboardUserResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetDashboardUserRequest"];
      };
    };
  };
  /** List all dashboard users associated with your account. */
  dashboardUserList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedDashboardUserListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListDashboardUserRequest"];
      };
    };
  };
  /**
   * Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided.
   * If you don't know whether the associated user already has an active Identity Verification, you can specify `"is_idempotent": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.
   */
  identityVerificationCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["IdentityVerificationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentityVerificationCreateRequest"];
      };
    };
  };
  /** Retrieve a previously created identity verification */
  identityVerificationGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["IdentityVerificationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetIdentityVerificationRequest"];
      };
    };
  };
  /** Filter and list Identity Verifications created by your account */
  identityVerificationList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedIdentityVerificationListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListIdentityVerificationRequest"];
      };
    };
  };
  /** Allow a customer to retry their identity verification */
  identityVerificationRetry: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["IdentityVerificationResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentityVerificationRetryRequest"];
      };
    };
  };
  /** Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time. */
  watchlistScreeningEntityCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EntityWatchlistScreeningResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEntityScreeningRequest"];
      };
    };
  };
  /** Retrieve an entity watchlist screening. */
  watchlistScreeningEntityGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EntityWatchlistScreeningResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetEntityWatchlistScreeningRequest"];
      };
    };
  };
  /** List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned. */
  watchlistScreeningEntityHistoryList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEntityWatchlistScreeningListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListWatchlistScreeningEntityHistoryRequest"];
      };
    };
  };
  /** List all hits for the entity watchlist screening. */
  watchlistScreeningEntityHitsList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEntityWatchlistScreeningHitListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListWatchlistScreeningEntityHitRequest"];
      };
    };
  };
  /** List all entity screenings. */
  watchlistScreeningEntityList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEntityWatchlistScreeningListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListEntityWatchlistScreeningRequest"];
      };
    };
  };
  /** Get an entity watchlist screening program */
  watchlistScreeningEntityProgramGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EntityWatchlistProgramResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetWatchlistScreeningEntityProgramRequest"];
      };
    };
  };
  /** List all entity watchlist screening programs */
  watchlistScreeningEntityProgramList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEntityWatchlistProgramListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListWatchlistScreeningEntityProgramsRequest"];
      };
    };
  };
  /** Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid. */
  watchlistScreeningEntityReviewCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EntityWatchlistScreeningReviewResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEntityWatchlistScreeningReviewRequest"];
      };
    };
  };
  /** List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid. */
  watchlistScreeningEntityReviewList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedEntityWatchlistScreeningReviewListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListWatchlistScreeningEntityReviewsRequest"];
      };
    };
  };
  /** Update an entity watchlist screening. */
  watchlistScreeningEntityUpdate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EntityWatchlistScreeningResponse"];
        };
      };
    };
    /** The entity screening was successfully updated. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateEntityScreeningRequest"];
      };
    };
  };
  /** Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time. */
  watchlistScreeningIndividualCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningIndividualResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningCreateRequest"];
      };
    };
  };
  /** Retrieve a previously created individual watchlist screening */
  watchlistScreeningIndividualGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningIndividualResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetIndividualWatchlistScreeningRequest"];
      };
    };
  };
  /** List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned. */
  watchlistScreeningIndividualHistoryList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedIndividualWatchlistScreeningListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListWatchlistScreeningIndividualHistoryRequest"];
      };
    };
  };
  /** List all hits found by Plaid for a particular individual watchlist screening. */
  watchlistScreeningIndividualHitList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedIndividualWatchlistScreeningHitListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListWatchlistScreeningIndividualHitRequest"];
      };
    };
  };
  /** List previously created watchlist screenings for individuals */
  watchlistScreeningIndividualList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedIndividualWatchlistScreeningListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListIndividualWatchlistScreeningRequest"];
      };
    };
  };
  /** Get an individual watchlist screening program */
  watchlistScreeningIndividualProgramGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["IndividualWatchlistProgramResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetWatchlistScreeningIndividualProgramRequest"];
      };
    };
  };
  /** List all individual watchlist screening programs */
  watchlistScreeningIndividualProgramList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedIndividualWatchlistProgramListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListWatchlistScreeningIndividualProgramsRequest"];
      };
    };
  };
  /** Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid. */
  watchlistScreeningIndividualReviewCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningReviewResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateIndividualWatchlistScreeningReviewRequest"];
      };
    };
  };
  /** List all reviews for the individual watchlist screening. */
  watchlistScreeningIndividualReviewsList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaginatedIndividualWatchlistScreeningReviewListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListWatchlistScreeningIndividualReviewsRequest"];
      };
    };
  };
  /** Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change. */
  watchlistScreeningIndividualUpdate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningIndividualResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateIndividualScreeningRequest"];
      };
    };
  };
  /**
   * The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that''s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.
   *
   * Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
   */
  processorAuthGet: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorAuthGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorAuthGetRequest"];
      };
    };
  };
  /** Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor */
  processorBankTransferCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorBankTransferCreateResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorBankTransferCreateRequest"];
      };
    };
  };
  /** The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. */
  processorIdentityGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorIdentityGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorIdentityGetRequest"];
      };
    };
  };
  /** The `/processor/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached. */
  processorBalanceGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorBalanceGetResponse"];
        };
      };
    };
    /**
     * The `/processor/balance/get` endpoint returns the real-time balance for the account associated with a given `processor_token`.
     *
     * The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.
     *
     * Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of `null`.
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorBalanceGetRequest"];
      };
    };
  };
  /** The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL. */
  itemWebhookUpdate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemWebhookUpdateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemWebhookUpdateRequest"];
      };
    };
  };
  /**
   * By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.
   *
   * You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
   */
  itemAccessTokenInvalidate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemAccessTokenInvalidateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemAccessTokenInvalidateRequest"];
      };
    };
  };
  /**
   * Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.
   *
   * The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
   */
  webhookVerificationKeyGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookVerificationKeyGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebhookVerificationKeyGetRequest"];
      };
    };
  };
  /**
   * The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).
   *
   * The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.
   *
   * Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
   */
  liabilitiesGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LiabilitiesGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LiabilitiesGetRequest"];
      };
    };
  };
  /**
   * Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA).  For a standing order (recurring) payment, the recipient must be in the UK.
   *
   * The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
   */
  paymentInitiationRecipientCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationRecipientCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationRecipientCreateRequest"];
      };
    };
  };
  /**
   * Reverse a previously settled payment from a Plaid virtual account.
   *
   * The original payment must be in a settled state to be refunded and only full payment refunds are currently supported.
   * To power partial refunds, use `/wallet/transaction/execute`, where you can specify the exact amount for a payout to an end user.
   *
   * A payment can only be reversed once and will be refunded back to the same source account that initiated the payment.
   * The original payment must have been initiated to a Plaid virtual account.
   * The refund will be initiated from the same virtual account that the payment was paid into.
   */
  paymentInitiationPaymentReverse: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationPaymentReverseResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationPaymentReverseRequest"];
      };
    };
  };
  /** Get details about a payment recipient you have previously created. */
  paymentInitiationRecipientGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationRecipientGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationRecipientGetRequest"];
      };
    };
  };
  /** The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created. */
  paymentInitiationRecipientList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationRecipientListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationRecipientListRequest"];
      };
    };
  };
  /**
   * After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR or GBP.  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer and GBP-denominated payments will be sent via the Faster Payments network, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer will typically arrive in one business day.
   *
   * Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.
   *
   * In the Development environment, payments must be below 5 GBP / EUR. For details on any payment limits in Production, contact your Plaid Account Manager.
   */
  paymentInitiationPaymentCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationPaymentCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationPaymentCreateRequest"];
      };
    };
  };
  /**
   * The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.
   *
   * The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
   */
  createPaymentToken: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationPaymentTokenCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationPaymentTokenCreateRequest"];
      };
    };
  };
  /**
   * The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.
   *
   * Consents can be limited in time and scope, and have constraints that describe limitations for payments.
   */
  paymentInitiationConsentCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationConsentCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationConsentCreateRequest"];
      };
    };
  };
  /** The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints. */
  paymentInitiationConsentGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationConsentGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationConsentGetRequest"];
      };
    };
  };
  /** The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it. */
  paymentInitiationConsentRevoke: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationConsentRevokeResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationConsentRevokeRequest"];
      };
    };
  };
  /** The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent. */
  paymentInitiationConsentPaymentExecute: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationConsentPaymentExecuteResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationConsentPaymentExecuteRequest"];
      };
    };
  };
  /**
   * `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link's [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.
   *
   *
   * In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
   */
  sandboxItemResetLogin: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxItemResetLoginResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxItemResetLoginRequest"];
      };
    };
  };
  /**
   * The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.
   *
   * Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).
   *
   * For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
   */
  sandboxItemSetVerificationStatus: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxItemSetVerificationStatusResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxItemSetVerificationStatusRequest"];
      };
    };
  };
  /**
   * Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.
   *
   * The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
   */
  itemPublicTokenExchange: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemPublicTokenExchangeResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemPublicTokenExchangeRequest"];
      };
    };
  };
  /**
   * Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).
   *
   * If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.
   *
   * A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.
   *
   * The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
   */
  itemCreatePublicToken: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemPublicTokenCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemPublicTokenCreateRequest"];
      };
    };
  };
  /**
   * This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.
   *
   * If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.
   */
  userCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreateRequest"];
      };
    };
  };
  /** The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order. */
  paymentInitiationPaymentGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationPaymentGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationPaymentGetRequest"];
      };
    };
  };
  /** The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters. */
  paymentInitiationPaymentList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationPaymentListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationPaymentListRequest"];
      };
    };
  };
  /**
   * The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.
   *
   * The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).
   *
   * The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
   */
  assetReportCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportCreateRequest"];
      };
    };
  };
  /**
   * An Asset Report is an immutable snapshot of a user's assets. In order to "refresh" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.
   *
   * The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string ("") for any previously-populated fields you would like set as empty.
   */
  assetReportRefresh: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportRefreshResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportRefreshRequest"];
      };
    };
  };
  /** The `/asset_report/relay/refresh` endpoint allows third parties to refresh an Asset Report that was relayed to them, using an `asset_relay_token` that was created by the report owner. A new Asset Report will be created based on the old one, but with the most recent data available. */
  assetReportRelayRefresh: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportRelayRefreshResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportRelayRefreshRequest"];
      };
    };
  };
  /**
   * The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.
   *
   * The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
   */
  assetReportRemove: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportRemoveResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportRemoveRequest"];
      };
    };
  };
  /**
   * By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.
   *
   * To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report's data.
   *
   * Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.
   *
   * Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
   */
  assetReportFilter: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportFilterResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportFilterRequest"];
      };
    };
  };
  /**
   * The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.
   *
   * By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report.
   *
   * To retrieve an Asset Report with Insights, call the `/asset_report/get` endpoint with `include_insights` set to `true`.
   */
  assetReportGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportGetRequest"];
      };
    };
  };
  /**
   * The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.
   *
   * The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.
   *
   * [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
   */
  assetReportPdfGet: {
    responses: {
      /** A PDF of the Asset Report */
      200: {
        content: {
          "application/pdf": components["schemas"]["AssetReportPDFGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportPDFGetRequest"];
      };
    };
  };
  /**
   * Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.
   *
   * To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
   */
  assetReportAuditCopyCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportAuditCopyCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportAuditCopyCreateRequest"];
      };
    };
  };
  /** The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy. */
  assetReportAuditCopyRemove: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportAuditCopyRemoveResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportAuditCopyRemoveRequest"];
      };
    };
  };
  /**
   * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.
   *
   * To grant access to an Asset Report to a third party, use the `/asset_report/relay/create` endpoint to create an `asset_relay_token` and then pass that token to the third party who needs access. Each third party has its own `secondary_client_id`, for example `ce5bd328dcd34123456`. You'll need to create a separate `asset_relay_token` for each third party to whom you want to grant access to the Report.
   */
  assetReportRelayCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportRelayCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportRelayCreateRequest"];
      };
    };
  };
  /** `/asset_report/relay/get` allows third parties to get an Asset Report that was shared with them, using an `asset_relay_token` that was created by the report owner. */
  assetReportRelayGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportRelayGetRequest"];
      };
    };
  };
  /** The `/asset_report/relay/remove` endpoint allows you to invalidate an `asset_relay_token`, meaning the third party holding the token will no longer be able to use it to access the Asset Report to which the `asset_relay_token` gives access to. The Asset Report, Items associated with it, and other Asset Relay Tokens that provide access to the same Asset Report are not affected and will remain accessible after removing the given `asset_relay_token. */
  assetReportRelayRemove: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportRelayRemoveResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportRelayRemoveRequest"];
      };
    };
  };
  /** The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts. */
  investmentsHoldingsGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["InvestmentsHoldingsGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestmentsHoldingsGetRequest"];
      };
    };
  };
  /**
   * The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.
   *
   * Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.
   *
   * Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.
   */
  investmentsTransactionsGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["InvestmentsTransactionsGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestmentsTransactionsGetRequest"];
      };
    };
  };
  /** Used to create a token suitable for sending to one of Plaid's partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Processor tokens can also be revoked, using `/item/remove`. */
  processorTokenCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorTokenCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorTokenCreateRequest"];
      };
    };
  };
  /** Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/). Bank account tokens can also be revoked, using `/item/remove`. */
  processorStripeBankAccountTokenCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorStripeBankAccountTokenCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorStripeBankAccountTokenCreateRequest"];
      };
    };
  };
  /** Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations. */
  processorApexProcessorTokenCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorTokenCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorApexProcessorTokenCreateRequest"];
      };
    };
  };
  /** This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch. */
  depositSwitchCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["DepositSwitchCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepositSwitchCreateRequest"];
      };
    };
  };
  /**
   * `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.
   *
   * Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated. This will automatically generate the Plaid native account ID for the account the user will switch their direct deposit to (`target_account_id`).
   */
  itemImport: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemImportResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemImportRequest"];
      };
    };
  };
  /** In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes. */
  depositSwitchTokenCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["DepositSwitchTokenCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepositSwitchTokenCreateRequest"];
      };
    };
  };
  /**
   * The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.
   *
   * A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
   */
  linkTokenCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LinkTokenCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkTokenCreateRequest"];
      };
    };
  };
  /**
   * The `/link/token/get` endpoint gets information about a previously-created `link_token` using the
   * `/link/token/create` endpoint. It can be useful for debugging purposes.
   */
  linkTokenGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LinkTokenGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkTokenGetRequest"];
      };
    };
  };
  /** `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`. */
  assetReportAuditCopyGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportAuditCopyGetRequest"];
      };
    };
  };
  /** This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user's direct deposit allocation preferences. */
  depositSwitchGet: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["DepositSwitchGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepositSwitchGetRequest"];
      };
    };
  };
  /** The `/transfer/get` fetches information about the transfer corresponding to the given `transfer_id`. */
  transferGet: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferGetResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferGetRequest"];
      };
    };
  };
  /** The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`. */
  bankTransferGet: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferGetResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferGetRequest"];
      };
    };
  };
  /**
   * Use the `/transfer/authorization/create` endpoint to determine transfer failure risk.
   *
   * In Plaid's sandbox environment the decisions will be returned as follows:
   *
   *   - To approve a transfer with null rationale code, make an authorization request with an `amount` less than the available balance in the account.
   *
   *   - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).
   *
   *   - To approve a transfer with the rationale code `LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).
   *
   *   - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
   *
   *   - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
   *
   * For guaranteed ACH customers, the following fields are required : `user.phone_number` (optional if `email_address` provided), `user.email_address` (optional if `phone_number` provided), `device.ip_address`, `device.user_agent`, and `user_present`.
   */
  transferAuthorizationCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferAuthorizationCreateResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferAuthorizationCreateRequest"];
      };
    };
  };
  /** Use the `/transfer/create` endpoint to initiate a new transfer. */
  transferCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferCreateResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferCreateRequest"];
      };
    };
  };
  /** Use the `/bank_transfer/create` endpoint to initiate a new bank transfer. */
  bankTransferCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferCreateResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferCreateRequest"];
      };
    };
  };
  /** Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers. */
  transferList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferListResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferListRequest"];
      };
    };
  };
  /** Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers. */
  bankTransferList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferListResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferListRequest"];
      };
    };
  };
  /** Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/transfer/get` is `true`. */
  transferCancel: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferCancelResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferCancelRequest"];
      };
    };
  };
  /** Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`. */
  bankTransferCancel: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferCancelResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferCancelRequest"];
      };
    };
  };
  /** Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria. */
  transferEventList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferEventListResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferEventListRequest"];
      };
    };
  };
  /** Use the `/bank_transfer/event/list` endpoint to get a list of bank transfer events based on specified filter criteria. */
  bankTransferEventList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferEventListResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferEventListRequest"];
      };
    };
  };
  /** `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events. */
  transferEventSync: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferEventSyncResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferEventSyncRequest"];
      };
    };
  };
  /** `/bank_transfer/event/sync` allows you to request up to the next 25 bank transfer events that happened after a specific `event_id`. Use the `/bank_transfer/event/sync` endpoint to guarantee you have seen all bank transfer events. */
  bankTransferEventSync: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferEventSyncResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferEventSyncRequest"];
      };
    };
  };
  /** The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`. */
  transferSweepGet: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferSweepGetResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferSweepGetRequest"];
      };
    };
  };
  /** The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`. */
  bankTransferSweepGet: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferSweepGetResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferSweepGetRequest"];
      };
    };
  };
  /** The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters. */
  transferSweepList: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferSweepListResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferSweepListRequest"];
      };
    };
  };
  /** The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters. */
  bankTransferSweepList: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferSweepListResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferSweepListRequest"];
      };
    };
  };
  /**
   * Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.
   *
   * The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.
   *
   * Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
   */
  bankTransferBalanceGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferBalanceGetResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferBalanceGetRequest"];
      };
    };
  };
  /** As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager. */
  bankTransferMigrateAccount: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferMigrateAccountResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferMigrateAccountRequest"];
      };
    };
  };
  /** As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager. */
  transferMigrateAccount: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferMigrateAccountResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferMigrateAccountRequest"];
      };
    };
  };
  /** Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI. */
  transferIntentCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferIntentCreateResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferIntentCreateRequest"];
      };
    };
  };
  /** Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent. */
  transferIntentGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferIntentGetResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferIntentGetRequest"];
      };
    };
  };
  /** The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`. */
  transferRepaymentList: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferRepaymentListResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferRepaymentListRequest"];
      };
    };
  };
  /** The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment. */
  transferRepaymentReturnList: {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferRepaymentReturnListResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferRepaymentReturnListRequest"];
      };
    };
  };
  /** Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox. */
  sandboxBankTransferSimulate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxBankTransferSimulateResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxBankTransferSimulateRequest"];
      };
    };
  };
  /** Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`. */
  sandboxTransferSweepSimulate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferSweepSimulateResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferSweepSimulateRequest"];
      };
    };
  };
  /** Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox. */
  sandboxTransferSimulate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferSimulateResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferSimulateRequest"];
      };
    };
  };
  /** Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned. */
  sandboxTransferRepaymentSimulate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferRepaymentSimulateResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferRepaymentSimulateRequest"];
      };
    };
  };
  /** Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a Transfer webhook in the Sandbox environment. */
  sandboxTransferFireWebhook: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferFireWebhookResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferFireWebhookRequest"];
      };
    };
  };
  /**
   * `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user's employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.
   *
   * The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
   */
  employersSearch: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmployersSearchResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployersSearchRequest"];
      };
    };
  };
  /** `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing. */
  incomeVerificationCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["IncomeVerificationCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomeVerificationCreateRequest"];
      };
    };
  };
  /**
   * `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user's income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
   *
   * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
   */
  incomeVerificationPaystubsGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["IncomeVerificationPaystubsGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomeVerificationPaystubsGetRequest"];
      };
    };
  };
  /**
   * `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.
   *
   * If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available
   * for download from the payroll provider will be available from this endpoint.
   *
   * The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file.
   * If not, the response will contain all documents associated with the verification.
   *
   * The `request_id` is returned in the `Plaid-Request-ID` header.
   */
  incomeVerificationDocumentsDownload: {
    parameters: {};
    responses: {
      /** A ZIP file containing source documents(s) used as the basis for income verification. */
      200: {
        content: {
          "application/zip": string;
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomeVerificationDocumentsDownloadRequest"];
      };
    };
  };
  /** `/income/verification/refresh` refreshes a given income verification. */
  incomeVerificationRefresh: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": components["schemas"]["IncomeVerificationRefreshResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomeVerificationRefreshRequest"];
      };
    };
  };
  /**
   * `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user''s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
   *
   * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
   */
  incomeVerificationTaxformsGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["IncomeVerificationTaxformsGetResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomeVerificationTaxformsGetRequest"];
      };
    };
  };
  /**
   * `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.
   *
   * While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.
   *
   * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
   */
  incomeVerificationPrecheck: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["IncomeVerificationPrecheckResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomeVerificationPrecheckRequest"];
      };
    };
  };
  /**
   * `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.
   *
   * This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
   */
  employmentVerificationGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmploymentVerificationGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmploymentVerificationGetRequest"];
      };
    };
  };
  /** This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch. */
  depositSwitchAltCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["DepositSwitchAltCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepositSwitchAltCreateRequest"];
      };
    };
  };
  /**
   * Plaid can provide an Audit Copy token of an Asset Report and/or Income Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).
   *
   * To grant access to an Audit Copy token, use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
   */
  creditAuditCopyTokenCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditAuditCopyTokenCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditAuditCopyTokenCreateRequest"];
      };
    };
  };
  /** The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy. */
  creditReportAuditCopyRemove: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditAuditCopyTokenRemoveResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditAuditCopyTokenRemoveRequest"];
      };
    };
  };
  /** The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac's JSON format. */
  creditAssetReportFreddieMacGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportFreddieGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportFreddieGetRequest"];
      };
    };
  };
  /** `/credit/bank_income/get` returns the bank income report(s) for a specified user. */
  creditBankIncomeGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditBankIncomeGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditBankIncomeGetRequest"];
      };
    };
  };
  /** `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format. */
  creditBankIncomePdfGet: {
    responses: {
      /** A PDF of the Bank Income Report */
      200: {
        content: {
          "application/pdf": components["schemas"]["CreditBankIncomePDFGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditBankIncomePDFGetRequest"];
      };
    };
  };
  /** `/credit/bank_income/refresh` refreshes the bank income report data for a specific user. */
  creditBankIncomeRefresh: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditBankIncomeRefreshResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditBankIncomeRefreshRequest"];
      };
    };
  };
  /** This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document. */
  creditPayrollIncomeGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditPayrollIncomeGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditPayrollIncomeGetRequest"];
      };
    };
  };
  /**
   * `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.
   *
   * While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.
   */
  creditPayrollIncomePrecheck: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditPayrollIncomePrecheckResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditPayrollIncomePrecheckRequest"];
      };
    };
  };
  /** `/credit/employment/get` returns a list of items with employment information from a user's payroll provider that was verified by an end user. */
  creditEmploymentGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditEmploymentGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditEmploymentGetRequest"];
      };
    };
  };
  /** `/credit/payroll_income/refresh` refreshes a given digital payroll income verification. */
  creditPayrollIncomeRefresh: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": components["schemas"]["CreditPayrollIncomeRefreshResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditPayrollIncomeRefreshRequest"];
      };
    };
  };
  /**
   * Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.
   *
   * To grant access to an Asset Report to a third party, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to the third party who needs access. Each third party has its own `secondary_client_id`, for example `ce5bd328dcd34123456`. You'll need to create a separate `relay_token` for each third party to whom you want to grant access to the Report.
   */
  creditRelayCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditRelayCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditRelayCreateRequest"];
      };
    };
  };
  /** `/credit/relay/get` allows third parties to get a report that was shared with them, using an `relay_token` that was created by the report owner. */
  creditRelayGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditRelayGetRequest"];
      };
    };
  };
  /** The `/credit/relay/refresh` endpoint allows third parties to refresh an report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created based on the old one, but with the most recent data available. */
  creditRelayRefresh: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditRelayRefreshResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditRelayRefreshRequest"];
      };
    };
  };
  /** The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`, meaning the third party holding the token will no longer be able to use it to access the reports to which the `relay_token` gives access to. The report, items associated with it, and other Relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token. */
  creditRelayRemove: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditRelayRemoveResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditRelayRemoveRequest"];
      };
    };
  };
  /** Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment. */
  sandboxBankTransferFireWebhook: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxBankTransferFireWebhookResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxBankTransferFireWebhookRequest"];
      };
    };
  };
  /** Use the `/sandbox/income/fire_webhook` endpoint to manually trigger an Income webhook in the Sandbox environment. */
  sandboxIncomeFireWebhook: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxIncomeFireWebhookResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxIncomeFireWebhookRequest"];
      };
    };
  };
  /** Save the selected accounts when connecting to the Platypus Oauth institution */
  sandboxOauthSelectAccounts: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxOauthSelectAccountsResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxOauthSelectAccountsRequest"];
      };
    };
  };
  /**
   * Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.
   *
   * In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned.
   */
  signalEvaluate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SignalEvaluateResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignalEvaluateRequest"];
      };
    };
  };
  /** After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated. This endpoint will return an `INVALID_REQUEST` error if called a second time with a different value for `initiated`. */
  signalDecisionReport: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SignalDecisionReportResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignalDecisionReportRequest"];
      };
    };
  };
  /** Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio. */
  signalReturnReport: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SignalReturnReportResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignalReturnReportRequest"];
      };
    };
  };
  /** Call `/signal/prepare` with Plaid-linked bank account information at least 10 seconds before calling `/signal/evaluate` or as soon as an end-user enters the ACH deposit flow in your application. */
  signalPrepare: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["SignalPrepareResponse"];
        };
      };
      /** Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignalPrepareRequest"];
      };
    };
  };
  /** Create an e-wallet. The response is the newly created e-wallet object. */
  walletCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletCreateResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletCreateRequest"];
      };
    };
  };
  /** Fetch an e-wallet. The response includes the current balance. */
  walletGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletGetRequest"];
      };
    };
  };
  /** This endpoint lists all e-wallets in descending order of creation. */
  walletList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletListRequest"];
      };
    };
  };
  /**
   * Execute a transaction using the specified e-wallet.
   * Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction.
   * Transactions will settle in seconds to several days, depending on the underlying payment rail.
   */
  walletTransactionExecute: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletTransactionExecuteResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletTransactionExecuteRequest"];
      };
    };
  };
  /** Fetch a specific e-wallet transaction */
  walletTransactionGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletTransactionGetResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletTransactionGetRequest"];
      };
    };
  };
  /** This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time. */
  walletTransactionsList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletTransactionsListResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletTransactionsListRequest"];
      };
    };
  };
  /**
   * The '/beta/transactions/v1/enhance' endpoint enriches raw transaction data provided directly by clients.
   *
   * The product is currently in beta.
   */
  transactionsEnhance: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsEnhanceGetResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsEnhanceGetRequest"];
      };
    };
  };
  /**
   * The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.
   *
   * Rules will be applied on the Item's transactions returned in `/transactions/get` response.
   *
   * The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
   */
  transactionsRulesCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsRulesCreateResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsRulesCreateRequest"];
      };
    };
  };
  /** The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token. */
  transactionsRulesList: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsRulesListResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsRulesListRequest"];
      };
    };
  };
  /** The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule. */
  transactionsRulesRemove: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsRulesRemoveResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsRulesRemoveRequest"];
      };
    };
  };
  /** Use `/payment_profile/create` endpoint to create a new payment profile, the return value is a Payment Profile ID. Attach it to the link token create request and the link workflow will then "activate" this Payment Profile if the linkage is successful. It can then be used to create Transfers using `/transfer/authorization/create` and /transfer/create`. */
  paymentProfileCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentProfileCreateResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentProfileCreateRequest"];
      };
    };
  };
  /** Use the `/payment_profile/get` endpoint to get the status of a given Payment Profile. */
  paymentProfileGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentProfileGetResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentProfileGetRequest"];
      };
    };
  };
  /** Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers. */
  paymentProfileRemove: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentProfileRemoveResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentProfileRemoveRequest"];
      };
    };
  };
  /** The `/partner/v1/customers/create` endpoint is used by reseller partners to create an end customer client. */
  partnerCustomersCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["PartnerCustomersCreateResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartnerCustomersCreateRequest"];
      };
    };
  };
  /** Use the `/link_delivery/create` endpoint to create a Link Delivery session. */
  linkDeliveryCreate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LinkDeliveryCreateResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkDeliveryCreateRequest"];
      };
    };
  };
  /** Use the `/link_delivery/get` endpoint to get the status of a Link Delivery session. */
  linkDeliveryGet: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LinkDeliveryGetResponse"];
        };
      };
      /** Error response */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkDeliveryGetRequest"];
      };
    };
  };
}

export interface external {}

export enum ApiPaths {
  itemApplicationList = "/item/application/list",
  itemApplicationScopesUpdate = "/item/application/scopes/update",
  applicationGet = "/application/get",
  itemGet = "/item/get",
  authGet = "/auth/get",
  transactionsGet = "/transactions/get",
  transactionsRefresh = "/transactions/refresh",
  transactionsRecurringGet = "/transactions/recurring/get",
  transactionsSync = "/transactions/sync",
  institutionsGet = "/institutions/get",
  institutionsSearch = "/institutions/search",
  institutionsGetById = "/institutions/get_by_id",
  itemRemove = "/item/remove",
  accountsGet = "/accounts/get",
  categoriesGet = "/categories/get",
  sandboxProcessorTokenCreate = "/sandbox/processor_token/create",
  sandboxPublicTokenCreate = "/sandbox/public_token/create",
  sandboxItemFireWebhook = "/sandbox/item/fire_webhook",
  accountsBalanceGet = "/accounts/balance/get",
  identityGet = "/identity/get",
  identityMatch = "/identity/match",
  dashobardUserGet = "/dashboard_user/get",
  dashboardUserList = "/dashboard_user/list",
  identityVerificationCreate = "/identity_verification/create",
  identityVerificationGet = "/identity_verification/get",
  identityVerificationList = "/identity_verification/list",
  identityVerificationRetry = "/identity_verification/retry",
  watchlistScreeningEntityCreate = "/watchlist_screening/entity/create",
  watchlistScreeningEntityGet = "/watchlist_screening/entity/get",
  watchlistScreeningEntityHistoryList = "/watchlist_screening/entity/history/list",
  watchlistScreeningEntityHitsList = "/watchlist_screening/entity/hit/list",
  watchlistScreeningEntityList = "/watchlist_screening/entity/list",
  watchlistScreeningEntityProgramGet = "/watchlist_screening/entity/program/get",
  watchlistScreeningEntityProgramList = "/watchlist_screening/entity/program/list",
  watchlistScreeningEntityReviewCreate = "/watchlist_screening/entity/review/create",
  watchlistScreeningEntityReviewList = "/watchlist_screening/entity/review/list",
  watchlistScreeningEntityUpdate = "/watchlist_screening/entity/update",
  watchlistScreeningIndividualCreate = "/watchlist_screening/individual/create",
  watchlistScreeningIndividualGet = "/watchlist_screening/individual/get",
  watchlistScreeningIndividualHistoryList = "/watchlist_screening/individual/history/list",
  watchlistScreeningIndividualHitList = "/watchlist_screening/individual/hit/list",
  watchlistScreeningIndividualList = "/watchlist_screening/individual/list",
  watchlistScreeningIndividualProgramGet = "/watchlist_screening/individual/program/get",
  watchlistScreeningIndividualProgramList = "/watchlist_screening/individual/program/list",
  watchlistScreeningIndividualReviewCreate = "/watchlist_screening/individual/review/create",
  watchlistScreeningIndividualReviewsList = "/watchlist_screening/individual/review/list",
  watchlistScreeningIndividualUpdate = "/watchlist_screening/individual/update",
  processorAuthGet = "/processor/auth/get",
  processorBankTransferCreate = "/processor/bank_transfer/create",
  processorIdentityGet = "/processor/identity/get",
  processorBalanceGet = "/processor/balance/get",
  itemWebhookUpdate = "/item/webhook/update",
  itemAccessTokenInvalidate = "/item/access_token/invalidate",
  webhookVerificationKeyGet = "/webhook_verification_key/get",
  liabilitiesGet = "/liabilities/get",
  paymentInitiationRecipientCreate = "/payment_initiation/recipient/create",
  paymentInitiationPaymentReverse = "/payment_initiation/payment/reverse",
  paymentInitiationRecipientGet = "/payment_initiation/recipient/get",
  paymentInitiationRecipientList = "/payment_initiation/recipient/list",
  paymentInitiationPaymentCreate = "/payment_initiation/payment/create",
  createPaymentToken = "/payment_initiation/payment/token/create",
  paymentInitiationConsentCreate = "/payment_initiation/consent/create",
  paymentInitiationConsentGet = "/payment_initiation/consent/get",
  paymentInitiationConsentRevoke = "/payment_initiation/consent/revoke",
  paymentInitiationConsentPaymentExecute = "/payment_initiation/consent/payment/execute",
  sandboxItemResetLogin = "/sandbox/item/reset_login",
  sandboxItemSetVerificationStatus = "/sandbox/item/set_verification_status",
  itemPublicTokenExchange = "/item/public_token/exchange",
  itemCreatePublicToken = "/item/public_token/create",
  userCreate = "/user/create",
  paymentInitiationPaymentGet = "/payment_initiation/payment/get",
  paymentInitiationPaymentList = "/payment_initiation/payment/list",
  assetReportCreate = "/asset_report/create",
  assetReportRefresh = "/asset_report/refresh",
  assetReportRelayRefresh = "/asset_report/relay/refresh",
  assetReportRemove = "/asset_report/remove",
  assetReportFilter = "/asset_report/filter",
  assetReportGet = "/asset_report/get",
  assetReportPdfGet = "/asset_report/pdf/get",
  assetReportAuditCopyCreate = "/asset_report/audit_copy/create",
  assetReportAuditCopyRemove = "/asset_report/audit_copy/remove",
  assetReportRelayCreate = "/asset_report/relay/create",
  assetReportRelayGet = "/asset_report/relay/get",
  assetReportRelayRemove = "/asset_report/relay/remove",
  investmentsHoldingsGet = "/investments/holdings/get",
  investmentsTransactionsGet = "/investments/transactions/get",
  processorTokenCreate = "/processor/token/create",
  processorStripeBankAccountTokenCreate = "/processor/stripe/bank_account_token/create",
  processorApexProcessorTokenCreate = "/processor/apex/processor_token/create",
  depositSwitchCreate = "/deposit_switch/create",
  itemImport = "/item/import",
  depositSwitchTokenCreate = "/deposit_switch/token/create",
  linkTokenCreate = "/link/token/create",
  linkTokenGet = "/link/token/get",
  assetReportAuditCopyGet = "/asset_report/audit_copy/get",
  depositSwitchGet = "/deposit_switch/get",
  transferGet = "/transfer/get",
  bankTransferGet = "/bank_transfer/get",
  transferAuthorizationCreate = "/transfer/authorization/create",
  transferCreate = "/transfer/create",
  bankTransferCreate = "/bank_transfer/create",
  transferList = "/transfer/list",
  bankTransferList = "/bank_transfer/list",
  transferCancel = "/transfer/cancel",
  bankTransferCancel = "/bank_transfer/cancel",
  transferEventList = "/transfer/event/list",
  bankTransferEventList = "/bank_transfer/event/list",
  transferEventSync = "/transfer/event/sync",
  bankTransferEventSync = "/bank_transfer/event/sync",
  transferSweepGet = "/transfer/sweep/get",
  bankTransferSweepGet = "/bank_transfer/sweep/get",
  transferSweepList = "/transfer/sweep/list",
  bankTransferSweepList = "/bank_transfer/sweep/list",
  bankTransferBalanceGet = "/bank_transfer/balance/get",
  bankTransferMigrateAccount = "/bank_transfer/migrate_account",
  transferMigrateAccount = "/transfer/migrate_account",
  transferIntentCreate = "/transfer/intent/create",
  transferIntentGet = "/transfer/intent/get",
  transferRepaymentList = "/transfer/repayment/list",
  transferRepaymentReturnList = "/transfer/repayment/return/list",
  sandboxBankTransferSimulate = "/sandbox/bank_transfer/simulate",
  sandboxTransferSweepSimulate = "/sandbox/transfer/sweep/simulate",
  sandboxTransferSimulate = "/sandbox/transfer/simulate",
  sandboxTransferRepaymentSimulate = "/sandbox/transfer/repayment/simulate",
  sandboxTransferFireWebhook = "/sandbox/transfer/fire_webhook",
  employersSearch = "/employers/search",
  incomeVerificationCreate = "/income/verification/create",
  incomeVerificationPaystubsGet = "/income/verification/paystubs/get",
  incomeVerificationDocumentsDownload = "/income/verification/documents/download",
  incomeVerificationRefresh = "/income/verification/refresh",
  incomeVerificationTaxformsGet = "/income/verification/taxforms/get",
  incomeVerificationPrecheck = "/income/verification/precheck",
  employmentVerificationGet = "/employment/verification/get",
  depositSwitchAltCreate = "/deposit_switch/alt/create",
  creditAuditCopyTokenCreate = "/credit/audit_copy_token/create",
  creditReportAuditCopyRemove = "/credit/audit_copy_token/remove",
  creditAssetReportFreddieMacGet = "/credit/asset_report/freddie_mac/get",
  creditBankIncomeGet = "/credit/bank_income/get",
  creditBankIncomePdfGet = "/credit/bank_income/pdf/get",
  creditBankIncomeRefresh = "/credit/bank_income/refresh",
  creditPayrollIncomeGet = "/credit/payroll_income/get",
  creditPayrollIncomePrecheck = "/credit/payroll_income/precheck",
  creditEmploymentGet = "/credit/employment/get",
  creditPayrollIncomeRefresh = "/credit/payroll_income/refresh",
  creditRelayCreate = "/credit/relay/create",
  creditRelayGet = "/credit/relay/get",
  creditRelayRefresh = "/credit/relay/refresh",
  creditRelayRemove = "/credit/relay/remove",
  sandboxBankTransferFireWebhook = "/sandbox/bank_transfer/fire_webhook",
  sandboxIncomeFireWebhook = "/sandbox/income/fire_webhook",
  sandboxOauthSelectAccounts = "/sandbox/oauth/select_accounts",
  signalEvaluate = "/signal/evaluate",
  signalDecisionReport = "/signal/decision/report",
  signalReturnReport = "/signal/return/report",
  signalPrepare = "/signal/prepare",
  walletCreate = "/wallet/create",
  walletGet = "/wallet/get",
  walletList = "/wallet/list",
  walletTransactionExecute = "/wallet/transaction/execute",
  walletTransactionGet = "/wallet/transaction/get",
  walletTransactionsList = "/wallet/transactions/list",
  transactionsEnhance = "/beta/transactions/v1/enhance",
  transactionsRulesCreate = "/beta/transactions/rules/v1/create",
  transactionsRulesList = "/beta/transactions/rules/v1/list",
  transactionsRulesRemove = "/beta/transactions/rules/v1/remove",
  paymentProfileCreate = "/payment_profile/create",
  paymentProfileGet = "/payment_profile/get",
  paymentProfileRemove = "/payment_profile/remove",
  partnerCustomersCreate = "/beta/partner/v1/customers/create",
  linkDeliveryCreate = "/link_delivery/create",
  linkDeliveryGet = "/link_delivery/get",
}
